<?xml version='1.0' encoding='UTF-8' standalone='no'?>

<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="capl_api.xsd"
         version="1.9.2"
         xml:lang="en-US">
    <compounddef id="namespacecapl" kind="namespace" language="C++">
        <compoundname>capl</compoundname>
        <innerclass refid="classcapl_1_1_bus_event" prot="public">capl::BusEvent</innerclass>
        <innerclass refid="structcapl_1_1_d_b_lookup_msg_ret" prot="public">capl::DBLookupMsgRet</innerclass>
        <innerclass refid="structcapl_1_1_d_b_lookup_sig_ret" prot="public">capl::DBLookupSigRet</innerclass>
        <innerclass refid="classcapl_1_1_diag_event" prot="public">capl::DiagEvent</innerclass>
        <innerclass refid="classcapl_1_1_diag_request_event" prot="public">capl::DiagRequestEvent</innerclass>
        <innerclass refid="classcapl_1_1_diag_response_event" prot="public">capl::DiagResponseEvent</innerclass>
        <innerclass refid="classcapl_1_1_error_active_event" prot="public">capl::ErrorActiveEvent</innerclass>
        <innerclass refid="classcapl_1_1_error_bus_off_event" prot="public">capl::ErrorBusOffEvent</innerclass>
        <innerclass refid="classcapl_1_1_error_frame_event" prot="public">capl::ErrorFrameEvent</innerclass>
        <innerclass refid="classcapl_1_1_error_passive_event" prot="public">capl::ErrorPassiveEvent</innerclass>
        <innerclass refid="classcapl_1_1_ethernet_packet_event" prot="public">capl::EthernetPacketEvent</innerclass>
        <innerclass refid="classcapl_1_1_ethernet_status_event" prot="public">capl::EthernetStatusEvent</innerclass>
        <innerclass refid="structcapl_1_1_file_info" prot="public">capl::FileInfo</innerclass>
        <innerclass refid="classcapl_1_1_i_access" prot="public">capl::IAccess</innerclass>
        <innerclass refid="classcapl_1_1_i_attribute" prot="public">capl::IAttribute</innerclass>
        <innerclass refid="classcapl_1_1_i_byte_value" prot="public">capl::IByteValue</innerclass>
        <innerclass refid="classcapl_1_1_i_can_error" prot="public">capl::ICanError</innerclass>
        <innerclass refid="classcapl_1_1_i_char_value" prot="public">capl::ICharValue</innerclass>
        <innerclass refid="classcapl_1_1_i_diag" prot="public">capl::IDiag</innerclass>
        <innerclass refid="classcapl_1_1_i_diag_base" prot="public">capl::IDiagBase</innerclass>
        <innerclass refid="classcapl_1_1_i_diag_request" prot="public">capl::IDiagRequest</innerclass>
        <innerclass refid="classcapl_1_1_i_diag_response" prot="public">capl::IDiagResponse</innerclass>
        <innerclass refid="classcapl_1_1_i_d_word_value" prot="public">capl::IDWordValue</innerclass>
        <innerclass refid="classcapl_1_1_i_env_var" prot="public">capl::IEnvVar</innerclass>
        <innerclass refid="classcapl_1_1_i_env_var_event" prot="public">capl::IEnvVarEvent</innerclass>
        <innerclass refid="classcapl_1_1_i_error_frame" prot="public">capl::IErrorFrame</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_packet" prot="public">capl::IEthernetPacket</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_packet_protocol" prot="public">capl::IEthernetPacketProtocol</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_packet_protocol_byte_field" prot="public">capl::IEthernetPacketProtocolByteField</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_packet_protocol_d_word_field" prot="public">capl::IEthernetPacketProtocolDWordField</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_packet_protocol_field" prot="public">capl::IEthernetPacketProtocolField</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_packet_protocol_q_word_field" prot="public">capl::IEthernetPacketProtocolQWordField</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_packet_protocol_word_field" prot="public">capl::IEthernetPacketProtocolWordField</innerclass>
        <innerclass refid="classcapl_1_1_i_ethernet_status" prot="public">capl::IEthernetStatus</innerclass>
        <innerclass refid="classcapl_1_1_i_event" prot="public">capl::IEvent</innerclass>
        <innerclass refid="classcapl_1_1_i_event_3_01void_01_4" prot="public">capl::IEvent&lt; void &gt;</innerclass>
        <innerclass refid="classcapl_1_1_i_i_c_m_pv6" prot="public">capl::IICMPv6</innerclass>
        <innerclass refid="classcapl_1_1_i_i_pv4" prot="public">capl::IIPv4</innerclass>
        <innerclass refid="classcapl_1_1_i_i_pv6" prot="public">capl::IIPv6</innerclass>
        <innerclass refid="classcapl_1_1_i_key" prot="public">capl::IKey</innerclass>
        <innerclass refid="classcapl_1_1_i_lin_wakeup_frame" prot="public">capl::ILinWakeupFrame</innerclass>
        <innerclass refid="classcapl_1_1_i_long_long_value" prot="public">capl::ILongLongValue</innerclass>
        <innerclass refid="classcapl_1_1_i_long_value" prot="public">capl::ILongValue</innerclass>
        <innerclass refid="classcapl_1_1_i_message" prot="public">capl::IMessage</innerclass>
        <innerclass refid="classcapl_1_1_i_n_d_p" prot="public">capl::INDP</innerclass>
        <innerclass refid="classcapl_1_1_i_n_d_p_neighbor_advertisement" prot="public">capl::INDPNeighborAdvertisement</innerclass>
        <innerclass refid="classcapl_1_1_i_n_d_p_neighbor_solicitation" prot="public">capl::INDPNeighborSolicitation</innerclass>
        <innerclass refid="classcapl_1_1_i_n_d_p_redirect" prot="public">capl::INDPRedirect</innerclass>
        <innerclass refid="classcapl_1_1_i_n_d_p_router_advertisement" prot="public">capl::INDPRouterAdvertisement</innerclass>
        <innerclass refid="classcapl_1_1_i_n_d_p_router_solicitation" prot="public">capl::INDPRouterSolicitation</innerclass>
        <innerclass refid="classcapl_1_1_i_phys_raw_value" prot="public">capl::IPhysRawValue</innerclass>
        <innerclass refid="classcapl_1_1_i_pre_start" prot="public">capl::IPreStart</innerclass>
        <innerclass refid="classcapl_1_1_i_pre_stop" prot="public">capl::IPreStop</innerclass>
        <innerclass refid="classcapl_1_1_i_property" prot="public">capl::IProperty</innerclass>
        <innerclass refid="classcapl_1_1_i_q_word_value" prot="public">capl::IQWordValue</innerclass>
        <innerclass refid="classcapl_1_1_i_short_value" prot="public">capl::IShortValue</innerclass>
        <innerclass refid="classcapl_1_1_i_signal" prot="public">capl::ISignal</innerclass>
        <innerclass refid="classcapl_1_1_i_signal_val" prot="public">capl::ISignalVal</innerclass>
        <innerclass refid="classcapl_1_1_i_start" prot="public">capl::IStart</innerclass>
        <innerclass refid="classcapl_1_1_i_stop" prot="public">capl::IStop</innerclass>
        <innerclass refid="classcapl_1_1_i_t_c_p" prot="public">capl::ITCP</innerclass>
        <innerclass refid="classcapl_1_1_i_timer" prot="public">capl::ITimer</innerclass>
        <innerclass refid="classcapl_1_1_i_u_d_p" prot="public">capl::IUDP</innerclass>
        <innerclass refid="classcapl_1_1_i_value_table" prot="public">capl::IValueTable</innerclass>
        <innerclass refid="classcapl_1_1_i_word_value" prot="public">capl::IWordValue</innerclass>
        <innerclass refid="classcapl_1_1_key_event" prot="public">capl::KeyEvent</innerclass>
        <innerclass refid="classcapl_1_1_lin_wakeup_frame_event" prot="public">capl::LinWakeupFrameEvent</innerclass>
        <innerclass refid="classcapl_1_1_message_event" prot="public">capl::MessageEvent</innerclass>
        <innerclass refid="classcapl_1_1_pre_start_event" prot="public">capl::PreStartEvent</innerclass>
        <innerclass refid="classcapl_1_1_pre_stop_event" prot="public">capl::PreStopEvent</innerclass>
        <innerclass refid="classcapl_1_1_signal_event" prot="public">capl::SignalEvent</innerclass>
        <innerclass refid="classcapl_1_1_signal_update_event" prot="public">capl::SignalUpdateEvent</innerclass>
        <innerclass refid="classcapl_1_1_start_event" prot="public">capl::StartEvent</innerclass>
        <innerclass refid="classcapl_1_1_stop_event" prot="public">capl::StopEvent</innerclass>
        <innerclass refid="classcapl_1_1_test_info" prot="public">capl::TestInfo</innerclass>
        <innerclass refid="classcapl_1_1_thread" prot="public">capl::Thread</innerclass>
        <innerclass refid="classcapl_1_1_timer_array_event" prot="public">capl::TimerArrayEvent</innerclass>
        <innerclass refid="classcapl_1_1_timer_event" prot="public">capl::TimerEvent</innerclass>
        <innerclass refid="classcapl_1_1_warning_limit_event" prot="public">capl::WarningLimitEvent</innerclass>
        <sectiondef kind="enum">
            <memberdef kind="enum" id="_c_a_p_l_plugin_api_8h_1af80a9e54c598f16582ae8cb1e09805b7" prot="public"
                       static="no"
                       strong="no">
                <type></type>
                <name>PluginStatus</name>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1af80a9e54c598f16582ae8cb1e09805b7a18135ee9c20de281e634360b99f51a62"
                    prot="public">
                    <name>Plugin_Running</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1af80a9e54c598f16582ae8cb1e09805b7ae9c5b4200160fd0302f05bb6f91032af"
                    prot="public">
                    <name>Plugin_RunningNoEvents</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1af80a9e54c598f16582ae8cb1e09805b7aa1fe02c2ba90770aebd35ec0a5a163ad"
                    prot="public">
                    <name>Plugin_Stopped</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1af80a9e54c598f16582ae8cb1e09805b7af9e03f2e571e58990f493fef1efa04a0"
                    prot="public">
                    <name>Plugin_Error</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Definiert den Status des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Wird in der API-Callack-Funktion tStatusFunc verwendet. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="78" column="5" bodyfile="CAPLPluginApi.h" bodystart="78"
                          bodyend="78" />
            </memberdef>
            <memberdef kind="enum" id="_c_a_p_l_plugin_api_8h_1a9e8c9708999a6935c145506bb93c7ddf" prot="public"
                       static="no"
                       strong="no">
                <type></type>
                <name>CAPLPLUGIN_StringResource</name>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a9e8c9708999a6935c145506bb93c7ddfa976b21d6bf3daa19cfca6cd53e344559"
                    prot="public">
                    <name>CAPLPLUGIN_WARNING_OLD_DATA_TO_LOAD</name>
                    <initializer>= 0</initializer>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a9e8c9708999a6935c145506bb93c7ddfa58be955c78c0fbb1bae69e3dbf2f9a88"
                    prot="public">
                    <name>CAPLPLUGIN_WARNING_NEW_DATA_TO_LOAD</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a9e8c9708999a6935c145506bb93c7ddfa8870132a98ebde69392f2afe68ee5385"
                    prot="public">
                    <name>CAPLPLUGIN_ERROR_LOADING_FAILED</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a9e8c9708999a6935c145506bb93c7ddfad7164f1c2ba01ca1d8bd657773145161"
                    prot="public">
                    <name>CAPLPLUGIN_ERROR_SAVING_FAILED</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>\breif Definiert die Stringresourcen die in der CAPL-RT definiert sind und �ber die Funktion capl::GetStringResource(CAPLPLUGIN_StringResources) von den Capl-Plugin-Generaten verwendet werden k�nnen.</para>
                    <para>
                        <simplesect kind="remark">
                            <para>Die Enumwerte sind wie die Stringresourcen benannt, wobei diese noch das &quot;IDS_&quot; am Anfang stehen haben. </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="227" column="5" bodyfile="CAPLPluginApi.h" bodystart="228"
                          bodyend="233" />
            </memberdef>
            <memberdef kind="enum" id="_c_a_p_l_plugin_api_8h_1ae96c3b2521510395782a9e76d233e0aa" prot="public"
                       static="no"
                       strong="no">
                <type></type>
                <name>CAPLRT_ReturnValue</name>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ae96c3b2521510395782a9e76d233e0aaa4ff3cb4027c57af5193ecae3c4f547d6"
                    prot="public">
                    <name>CAPLRT_OK</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ae96c3b2521510395782a9e76d233e0aaafea023b26a997dbc4210b162709a7774"
                    prot="public">
                    <name>CAPLRT_InvalideHandle</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ae96c3b2521510395782a9e76d233e0aaaa6ceed21b2245ac52e6d063ae7dc5151"
                    prot="public">
                    <name>CAPLRT_InvalidParam</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ae96c3b2521510395782a9e76d233e0aaab13969af89ee60873e8a6bf9493435d5"
                    prot="public">
                    <name>CAPLRT_UnknownError</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Definiert die R�ckgabewerte der CAPL-Runtime-Funktionen, die mit der CanEasy-API kommunizieren. </para>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="240" column="5" bodyfile="CAPLPluginApi.h" bodystart="241"
                          bodyend="246" />
            </memberdef>
            <memberdef kind="enum" id="_c_a_p_l_plugin_api_8h_1a5faff2a06d2c1c0d932eec2e122e8199" prot="public"
                       static="no"
                       strong="no">
                <type></type>
                <name>ReportStyle</name>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a5faff2a06d2c1c0d932eec2e122e8199a028d0b201b1dd3bd2a40b13737488f36"
                    prot="public">
                    <name>Report_Info</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a5faff2a06d2c1c0d932eec2e122e8199a96d35506809d862708c9773088ba312f"
                    prot="public">
                    <name>Report_Warning</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a5faff2a06d2c1c0d932eec2e122e8199afd55b3a6b30bc4c7e932a6c7bbb5ca53"
                    prot="public">
                    <name>Report_Error</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="289" column="5" bodyfile="CAPLPluginApi.h" bodystart="289"
                          bodyend="289" />
            </memberdef>
            <memberdef kind="enum" id="_c_a_p_l_plugin_api_8h_1a4bb76d77908cf44da0e345aa5adf85c4" prot="public"
                       static="no"
                       strong="no">
                <type></type>
                <name>BusEventType</name>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a4bb76d77908cf44da0e345aa5adf85c4a6d14d7c7adf199ab35364db9578f8f00"
                    prot="public">
                    <name>BusOff</name>
                    <initializer>= 1</initializer>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a4bb76d77908cf44da0e345aa5adf85c4a5499d85ed8093b4368c3e5369a57c8c5"
                    prot="public">
                    <name>Passive</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a4bb76d77908cf44da0e345aa5adf85c4ad8710e8ff53f8667844ec33afed3d43d"
                    prot="public">
                    <name>Active</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1a4bb76d77908cf44da0e345aa5adf85c4a224014dc50916e745b9b750f56838a01"
                    prot="public">
                    <name>WarningLimit</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="342" column="5" bodyfile="CAPLPluginApi.h" bodystart="342"
                          bodyend="342" />
            </memberdef>
            <memberdef kind="enum" id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1" prot="public"
                       static="no"
                       strong="no">
                <type></type>
                <name>AttributeTypes</name>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1aee257ac6f91e2fb214630ba1f16be8f8"
                    prot="public">
                    <name>TypeEmpty</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a3f084d4fa64d67614fbca34a3896f71e"
                    prot="public">
                    <name>TypeChar</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a615ad9e6c73f2fcbfc6bf059a8546526"
                    prot="public">
                    <name>TypeCharVector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a79f78b0c594de3cd67b78143c9d1c18e"
                    prot="public">
                    <name>TypeUChar</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a98e6654822eefbabba70c1a359df3405"
                    prot="public">
                    <name>TypeUCharVector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a38a9c3c5cba41fa6986a45c655049ae5"
                    prot="public">
                    <name>TypeInt</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a9649a915c40c2003aaf26b49e9f3175b"
                    prot="public">
                    <name>TypeIntVector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a92b7f03b53d12839143b46c191ae0b5d"
                    prot="public">
                    <name>TypeUInt</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1aaa9cd0b5050625a8182dbedb685f0d93"
                    prot="public">
                    <name>TypeUIntVector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a451406a313098e3a32a31c0216ef6ed2"
                    prot="public">
                    <name>TypeInt64</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1aae6bb6b8bf556dc0a945623406cbc7e3"
                    prot="public">
                    <name>TypeInt64Vector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a3172ece02fdaf299eda7471153c7044c"
                    prot="public">
                    <name>TypeUInt64</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a44190197e769416ff4c3437222ab0da7"
                    prot="public">
                    <name>TypeUInt64Vector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a95017d527873d8c0a537f23f40e5b041"
                    prot="public">
                    <name>TypeDouble</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a7d2ae5eeb5dc20b3fb267890a86cabee"
                    prot="public">
                    <name>TypeDoubleVector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1ab26e6c5f711fee928d9e1185a37534f1"
                    prot="public">
                    <name>TypeString</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1a37f7036f3995448f23fda4475741458c"
                    prot="public">
                    <name>TypeStringVector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1afd2da4c744ce1cd4299bd5eedc013e44"
                    prot="public">
                    <name>TypePointer</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <enumvalue
                    id="_c_a_p_l_plugin_api_8h_1ab44c080dd11c664afe76f62d330006e1ad0279b70f4d25f2f41bf85fefa079c93"
                    prot="public">
                    <name>TypePointerVector</name>
                    <briefdescription>
                    </briefdescription>
                    <detaileddescription>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="448" column="5" bodyfile="CAPLPluginApi.h" bodystart="449"
                          bodyend="460" />
            </memberdef>
        </sectiondef>
        <sectiondef kind="typedef">
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1abb5779b02728e7aaa659d17f20d64c19" prot="public"
                       static="no">
                <type>void(*</type>
                <definition>typedef void( * capl::tStatusFunc) (PluginStatus enStatus, HINSTANCE hDll)</definition>
                <argsstring>)(PluginStatus enStatus, HINSTANCE hDll)</argsstring>
                <name>tStatusFunc</name>
                <briefdescription>
                    <para>Definiert den Typ der Status-Funktion f�r das Plugin. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funtkion diesen Typs wird beim Init-Aufruf des Plugins �bergeben. Wenn das Plugin seinen Status �ndert, muss es die �bergebene Funktion mit dem neuen Status aufrufen. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="86" column="13" bodyfile="CAPLPluginApi.h" bodystart="86"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1af29161c466cea58c199244050b6d9288" prot="public"
                       static="no">
                <type>bool(*</type>
                <definition>typedef bool( * capl::tInitFunc) (tStatusFunc, HWND)</definition>
                <argsstring>)(tStatusFunc, HWND)</argsstring>
                <name>tInitFunc</name>
                <briefdescription>
                    <para>Definiert den Typ der API-Init-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Name CAPL_boInit muss vom Plugin exportiert werden.</para>
                    <para>CAPL_boInit wird aufgerufen, wenn das Plugin vom CAPL-Loader geladen wird (die CAPL-Plugin-Dll wurde zu diesem Zeitpunkt bereits geladen.).</para>
                    <para>Diese Funktion sollte true zur�ck geben, wenn die Initialisierung erfolgreich war und somit der Ladeprozess erfolgreich abgeschlossen werden kann. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="101" column="13" bodyfile="CAPLPluginApi.h" bodystart="101"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a2394d0331f0f87d7d126cd0c69d9a5fe" prot="public"
                       static="no">
                <type>bool(*</type>
                <definition>typedef bool( * capl::tInitDependenciesFunc) ()</definition>
                <argsstring>)()</argsstring>
                <name>tInitDependenciesFunc</name>
                <briefdescription>
                    <para>Definiert den Typ der API-Init-Dependencies-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Name CAPL_boInitDependencies muss vom Plugin exportiert werden.</para>
                    <para>CAPL_boInitDependencies wird aufgerufen, wenn das Plugin vom CAPL-Loader geladen wurde und alle gespeicherten Daten geladen wurden (CAPL_boInit und CAPL_iLoad wurden bereits aufgerufen).</para>
                    <para>Diese Funktion sollte true zur�ck geben, wenn die Initialisierung alle abh�ngigen DLLs (z.B. eine CAPLDLL f�r BAP) erfolgreich war und somit der Ladeprozess erfolgreich abgeschlossen werden kann. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="116" column="13" bodyfile="CAPLPluginApi.h" bodystart="116"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1ae7852f16862dfcdcd1670e01f6974f63" prot="public"
                       static="no">
                <type>void(*</type>
                <definition>typedef void( * capl::tDeinitFunc) (void)</definition>
                <argsstring>)(void)</argsstring>
                <name>tDeinitFunc</name>
                <briefdescription>
                    <para>Definiert den Typ der API-Deinit-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Name CAPL_vDeinit muss vom Plugin exportiert werden.</para>
                    <para>CAPL_boDeinit wird aufgerufen, wenn das Plugin vom CAPL-Loader entladen wird (die CAPL-Plugin-Dll wurde zu diesem Zeitpunkt noch nicht entladen.). </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="127" column="13" bodyfile="CAPLPluginApi.h" bodystart="127"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a6fabbc58c94cb2f1424fd3c5c9338ee3" prot="public"
                       static="no">
                <type>bool(*</type>
                <definition>typedef bool( * capl::tGetDll) (int, char *)</definition>
                <argsstring>)(int, char *)</argsstring>
                <name>tGetDll</name>
                <briefdescription>
                    <para>Definiert den Typ der API-GetDlls-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Name CAPL_boGetDll muss vom Plugin exportiert werden.</para>
                    <para>CAPL_boGetDll wird aufgerufen, wenn der CAPL-Loader Informationen �ber die abh�ngigen CAPL-DLLs ben�tigt.</para>
                    <para>Der erste Parameter definiert die Identifizierungsnummer der abh�ngigen DLL. Der zweite Parameter ist ein Zeiger auf ein Character-Buffer der die Gr��e MAX_PATH+1 besitzt.</para>
                    <para>Diese Funktion sollte true zur�ck liefern, wenn diese Identifizierungsnummer eine g�ltige Dll adressiert. Ansonsten soll false zur�ck geliefert werden. Die Identifizierungsnummer m�sssen von 0 an direkt aufeinanderfolgend vergeben werden! </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="148" column="13" bodyfile="CAPLPluginApi.h" bodystart="148"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a02a4566ed8ac78e9f95363e03b9e060c" prot="public"
                       static="no">
                <type>char *(*</type>
                <definition>typedef char *( * capl::tGetPluginName) ()</definition>
                <argsstring>)()</argsstring>
                <name>tGetPluginName</name>
                <briefdescription>
                    <para>Definiert den Typ der API-GetPluginName-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Namen CAPL_sGetPluginName kann vom Plugin exportiert werden.</para>
                    <para>CAPL_sGetPluginName wird aufgerufen, wenn der CAPL-Loader den PluginNamen ben�tigt. Dieser wird bei der Erstellung des Plugins im CAPL-Converter angegeben und mit in das Plugin kompiliert. Der PluginName wird zur anzeige im Baum benutzt, sofern einer gesetzt ist. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="160" column="13" bodyfile="CAPLPluginApi.h" bodystart="160"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1ac02bb3702062d1c423721f4ec1e4f488" prot="public"
                       static="no">
                <type>char *(*</type>
                <definition>typedef char *( * capl::tGetVersionNumber) ()</definition>
                <argsstring>)()</argsstring>
                <name>tGetVersionNumber</name>
                <briefdescription>
                    <para>Definiert den Typ der API-GetVersionNumber-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Namen CAPL_sGetVersionNumber kann vom Plugin exportiert werden.</para>
                    <para>CAPL_sGetVersionNumber wird aufgerufen, wenn der CAPL-Loader die Versionsnummer ben�tigt. Diese wird bei der Erstellung des Plugins im CAPL-Converter angegeben und mit in das Plugin kompiliert. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="171" column="13" bodyfile="CAPLPluginApi.h" bodystart="171"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1aceca5fa0d1c68ef6e33cb67d080eb266" prot="public"
                       static="no">
                <type>char *(*</type>
                <definition>typedef char *( * capl::tGetDescription) ()</definition>
                <argsstring>)()</argsstring>
                <name>tGetDescription</name>
                <briefdescription>
                    <para>Definiert den Typ der API-GetDescription-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Namen CAPL_sGetDescription kann vom Plugin exportiert werden.</para>
                    <para>CAPL_sGetDescription wird aufgerufen, wenn der CAPL-Loader die Beschreibung ben�tigt. Diese wird bei der Erstellung des Plugins im CAPL-Converter angegeben und mit in das Plugin kompiliert. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="182" column="13" bodyfile="CAPLPluginApi.h" bodystart="182"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a52e6c6f59720b10909799432d45b92cd" prot="public"
                       static="no">
                <type>void(*</type>
                <definition>typedef void( * capl::tGetConfigFile) (char *)</definition>
                <argsstring>)(char *)</argsstring>
                <name>tGetConfigFile</name>
                <briefdescription>
                    <para>Definiert den Typ der API-GetConfigFile-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Namen CAPL_vGetConfigFile kann vom Plugin exportiert werden.</para>
                    <para>CAPL_vGetConfigFile wird aufgerufen, wenn der CAPL-Loader die relativen Pfade aktualisieren muss. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="192" column="13" bodyfile="CAPLPluginApi.h" bodystart="192"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a69dd77b0b7f211e634f20ed2abf4882c" prot="public"
                       static="no">
                <type>void(*</type>
                <definition>typedef void( * capl::tSetConfigFile) (const char *)</definition>
                <argsstring>)(const char *)</argsstring>
                <name>tSetConfigFile</name>
                <briefdescription>
                    <para>Definiert den Typ der API-GetConfigFile-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Namen CAPL_vSetConfigFile kann vom Plugin exportiert werden.</para>
                    <para>CAPL_vSetConfigFile wird aufgerufen, wenn der CAPL-Loader die relativen Pfade aktualisieren muss. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="202" column="13" bodyfile="CAPLPluginApi.h" bodystart="202"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1ad5a935e6f7e89a4f36ba7c4b9ad7fd50" prot="public"
                       static="no">
                <type>void(*</type>
                <definition>typedef void( * capl::tMainTest) ()</definition>
                <argsstring>)()</argsstring>
                <name>tMainTest</name>
                <briefdescription>
                    <para>Definiert den Typ der MainTest-Funktion des Plugins. </para>
                </briefdescription>
                <detaileddescription>
                    <para>Eine Funktion diesen Typs mit dem Name MainTest wird vom Plugin exportiert, wenn es ein Test Modul ist.</para>
                    <para>Diese Funktion kann von extern aufgerufen werden um die Tests durchzuf�hren. </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="210" column="13" bodyfile="CAPLPluginApi.h" bodystart="210"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1aa171d2bc45bd3f525b73af4ca289a4d6" prot="public"
                       static="no">
                <type>unsigned __int8 unsigned</type>
                <definition>typedef unsigned __int8 unsigned capl::__int32</definition>
                <argsstring></argsstring>
                <name>__int32</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="376" column="52" bodyfile="CAPLPluginApi.h" bodystart="376"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a63f0f4e1c5035a7ea82926a37e4ab031" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::NMHighFunction(void)</definition>
                <argsstring>(void)</argsstring>
                <name>NMHighFunction</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5034" column="13" bodyfile="CAPLPluginApi.h" bodystart="5034"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a7bb8a58b04a30af29d9d024fe7200529" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::NMHighRemoteFunction(__int32)</definition>
                <argsstring>(__int32)</argsstring>
                <name>NMHighRemoteFunction</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5035" column="13" bodyfile="CAPLPluginApi.h" bodystart="5035"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a4fbe8099dcea6d0add98fd845146aeda" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::NMHighStateChangeFunction(__int32, __int32)</definition>
                <argsstring>(__int32, __int32)</argsstring>
                <name>NMHighStateChangeFunction</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5036" column="13" bodyfile="CAPLPluginApi.h" bodystart="5036"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1adb3920f99b475f6d181c484c67431f91" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::OnDiagTiemoutFunction()</definition>
                <argsstring>()</argsstring>
                <name>OnDiagTiemoutFunction</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5775" column="13" bodyfile="CAPLPluginApi.h" bodystart="5775"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1ae3b04311d590ca1e3a65c3c0fd78f316" prot="public"
                       static="no">
                <type>const BYTE *</type>
                <definition>typedef const BYTE * capl::pBuffer</definition>
                <argsstring></argsstring>
                <name>pBuffer</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6551" column="36" bodyfile="CAPLPluginApi.h" bodystart="6551"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a945ec24210f9491e139fd43881bcd800" prot="public"
                       static="no">
                <type>const BYTE unsigned __int32</type>
                <definition>typedef const BYTE unsigned __int32 capl::size</definition>
                <argsstring></argsstring>
                <name>size</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6551" column="65" bodyfile="CAPLPluginApi.h" bodystart="6551"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1acfa7d520332d57975cdc4d3a9cf6dec7" prot="public"
                       static="no">
                <type>unsigned __int32</type>
                <definition>typedef __int32 capl::datum</definition>
                <argsstring></argsstring>
                <name>datum</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6552" column="46" bodyfile="CAPLPluginApi.h" bodystart="6552"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1aa06bb6063744b20f1c55ea5df449b747" prot="public"
                       static="no">
                <type>unsigned __int32 unsigned __int32</type>
                <definition>typedef __int32 __int32 capl::note</definition>
                <argsstring></argsstring>
                <name>note</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6552" column="73" bodyfile="CAPLPluginApi.h" bodystart="6552"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1aa47c624b6007df9b1ae5164e60b57509" prot="public"
                       static="no">
                <type>unsigned __int32</type>
                <definition>typedef unsigned __int32 capl::errorFlags</definition>
                <argsstring></argsstring>
                <name>errorFlags</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6554" column="46" bodyfile="CAPLPluginApi.h" bodystart="6554"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1af6b6cdde1c73925aadc723f9343cc608" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::OnSendFunction(unsigned __int32 socket, __int32 result, void *buffer, unsigned __int32 size)</definition>
                <argsstring>(unsigned __int32 socket, __int32 result, void *buffer, unsigned __int32 size)</argsstring>
                <name>OnSendFunction</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7366" column="13" bodyfile="CAPLPluginApi.h" bodystart="7366"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1affe56855595d23ad11c7b432fc244d6f" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::OnUdpReceiveFromFunctionIPv4(unsigned __int32 socket, __int32 result, unsigned __int32 address, unsigned __int32 port, void *buffer, unsigned __int32 size)</definition>
                <argsstring>(unsigned __int32 socket, __int32 result, unsigned __int32 address, unsigned __int32 port, void *buffer, unsigned __int32 size)</argsstring>
                <name>OnUdpReceiveFromFunctionIPv4</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7367" column="13" bodyfile="CAPLPluginApi.h" bodystart="7367"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a28a2ed8e81eab4e161bb5e65a9a509a2" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::OnUdpReceiveFromFunctionIPv6(unsigned __int32 socket, __int32 result, unsigned __int8 address[], unsigned __int32 port, void *buffer, unsigned __int32 size)</definition>
                <argsstring>(unsigned __int32 socket, __int32 result, unsigned __int8 address[], unsigned __int32 port, void *buffer, unsigned __int32 size)</argsstring>
                <name>OnUdpReceiveFromFunctionIPv6</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7368" column="13" bodyfile="CAPLPluginApi.h" bodystart="7368"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a7ff194588f81525f3b32ca7375a316df" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::OnTcpReceiveFunctionIPv4(unsigned __int32 socket, __int32 result, unsigned __int32 address, unsigned __int32 port, void *buffer, unsigned __int32 size)</definition>
                <argsstring>(unsigned __int32 socket, __int32 result, unsigned __int32 address, unsigned __int32 port, void *buffer, unsigned __int32 size)</argsstring>
                <name>OnTcpReceiveFunctionIPv4</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7369" column="13" bodyfile="CAPLPluginApi.h" bodystart="7369"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1ab670a85482c7d154e0c5f809fb201b02" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::OnTcpReceiveFunctionIPv6(unsigned __int32 socket, __int32 result, unsigned __int8 address[], unsigned __int32 port, void *buffer, unsigned __int32 size)</definition>
                <argsstring>(unsigned __int32 socket, __int32 result, unsigned __int8 address[], unsigned __int32 port, void *buffer, unsigned __int32 size)</argsstring>
                <name>OnTcpReceiveFunctionIPv6</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7370" column="13" bodyfile="CAPLPluginApi.h" bodystart="7370"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="typedef" id="_c_a_p_l_plugin_api_8h_1a3df85d7b16c4956be46876f15f01515b" prot="public"
                       static="no">
                <type>void()</type>
                <definition>typedef void() capl::OnEthernetFunction(__int32 channel, __int32 dir, __int32 packet)</definition>
                <argsstring>(__int32 channel, __int32 dir, __int32 packet)</argsstring>
                <name>OnEthernetFunction</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7372" column="13" bodyfile="CAPLPluginApi.h" bodystart="7372"
                          bodyend="-1" />
            </memberdef>
        </sectiondef>
        <sectiondef kind="var">
            <memberdef kind="variable" id="_c_a_p_l_plugin_api_8h_1a51e52ebda5638a7264cc5dd56e987d9f" prot="public"
                       static="no" mutable="no">
                <type>const __int32</type>
                <definition>const __int32 capl::MAX_SIGNAL_NAME_LENGTH</definition>
                <argsstring></argsstring>
                <name>MAX_SIGNAL_NAME_LENGTH</name>
                <initializer>= 128</initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="64" column="21" bodyfile="CAPLPluginApi.h" bodystart="64"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="variable" id="_c_a_p_l_plugin_api_8h_1ae97f2d34246ff7306de78ed7327e567c" prot="public"
                       static="no" mutable="no">
                <type>const __int32</type>
                <definition>const __int32 capl::STRLEN_FOR_SIGNAL_NAME</definition>
                <argsstring></argsstring>
                <name>STRLEN_FOR_SIGNAL_NAME</name>
                <initializer>= MAX_SIGNAL_NAME_LENGTH + 1</initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="65" column="21" bodyfile="CAPLPluginApi.h" bodystart="65"
                          bodyend="-1" />
            </memberdef>
            <memberdef kind="variable" id="_c_a_p_l_plugin_api_8h_1a6638573e8c7457369ae8ff0c9ee83acd" prot="public"
                       static="no" mutable="no">
                <type>const DWORD</type>
                <definition>const DWORD capl::NotExist</definition>
                <argsstring></argsstring>
                <name>NotExist</name>
                <initializer>= 0xFFFFFFFF</initializer>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="250" column="17" bodyfile="CAPLPluginApi.h" bodystart="250"
                          bodyend="-1" />
            </memberdef>
        </sectiondef>
        <sectiondef kind="func">
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a43318cfe9436564f109e2bf0e3bed08c" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type>LPCSTR</type>
                <definition>LPCSTR capl::GetSignalName</definition>
                <argsstring>(unsigned __int32 iIndex, const char *pSignalNameArr)</argsstring>
                <name>GetSignalName</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>iIndex</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>pSignalNameArr</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="69" column="19" bodyfile="CAPLPluginApi.h" bodystart="69"
                          bodyend="72" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad0a3c7337a8e9e9e6864ef775c7f7746" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>const char *</type>
                <definition>const char * capl::GetStringResource</definition>
                <argsstring>(CAPLPLUGIN_StringResource stringResource)</argsstring>
                <name>GetStringResource</name>
                <param>
                    <type>CAPLPLUGIN_StringResource</type>
                    <declname>stringResource</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="235" column="40" declfile="CAPLPluginApi.h" declline="235"
                          declcolumn="40" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af1458290f6a7b2f2d1ed90f44621efa9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::GetWorkspace</definition>
                <argsstring>(char *sWorkspace)</argsstring>
                <name>GetWorkspace</name>
                <param>
                    <type>char *</type>
                    <declname>sWorkspace</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="249" column="34" declfile="CAPLPluginApi.h" declline="249"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adf3f865c85df06176aad8bb8a92524a1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="structcapl_1_1_file_info" kindref="compound">FileInfo</ref>
                </type>
                <definition>FileInfo capl::GetInfo</definition>
                <argsstring>(const char *file)</argsstring>
                <name>GetInfo</name>
                <param>
                    <type>const char *</type>
                    <declname>file</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="264" column="38" declfile="CAPLPluginApi.h" declline="264"
                          declcolumn="38" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a659234505d9133b86d2724afb6401760" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::FreeFileInfo</definition>
                <argsstring>(FileInfo &amp;fileInfo)</argsstring>
                <name>FreeFileInfo</name>
                <param>
                    <type><ref refid="structcapl_1_1_file_info" kindref="compound">FileInfo</ref> &amp;</type>
                    <declname>fileInfo</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="265" column="34" declfile="CAPLPluginApi.h" declline="265"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0fa44f638196e8684b402eb6390a8361" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>BOOL</type>
                <definition>BOOL capl::SetCurrentDirectoryByFile</definition>
                <argsstring>(const char *pcFile)</argsstring>
                <name>SetCurrentDirectoryByFile</name>
                <param>
                    <type>const char *</type>
                    <declname>pcFile</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="267" column="34" declfile="CAPLPluginApi.h" declline="267"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3ece5132327bf853ab5427cec062f443" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>BOOL</type>
                <definition>BOOL capl::SaveWorkingDirectory</definition>
                <argsstring>(char pcWorkingDirectory[MAX_PATH])</argsstring>
                <name>SaveWorkingDirectory</name>
                <param>
                    <type>char</type>
                    <declname>pcWorkingDirectory</declname>
                    <array>[MAX_PATH]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="268" column="34" declfile="CAPLPluginApi.h" declline="268"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5cbb09b10bfc8367b40ce27975ddcc03" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>BOOL</type>
                <definition>BOOL capl::RestoreWorkingDirectory</definition>
                <argsstring>(const char *pcWokringDirectory)</argsstring>
                <name>RestoreWorkingDirectory</name>
                <param>
                    <type>const char *</type>
                    <declname>pcWokringDirectory</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="269" column="34" declfile="CAPLPluginApi.h" declline="269"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2b8329e080e40174e056c8fe0d5f77c1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>CAPLRT_ReturnValue</type>
                <definition>CAPLRT_ReturnValue capl::WriteModuleData</definition>
                <argsstring>(DWORD dwFileModule, const void *pData, DWORD dwBytesToWrite)</argsstring>
                <name>WriteModuleData</name>
                <param>
                    <type>DWORD</type>
                    <declname>dwFileModule</declname>
                </param>
                <param>
                    <type>const void *</type>
                    <declname>pData</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>dwBytesToWrite</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="275" column="48" declfile="CAPLPluginApi.h" declline="275"
                          declcolumn="48" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aee9e1686b0c1a57d4c75b18068302d4a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>CAPLRT_ReturnValue</type>
                <definition>CAPLRT_ReturnValue capl::ReadModuleData</definition>
                <argsstring>(DWORD dwFileModule, void *pData, DWORD dwBytesToRead)</argsstring>
                <name>ReadModuleData</name>
                <param>
                    <type>DWORD</type>
                    <declname>dwFileModule</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>pData</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>dwBytesToRead</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="282" column="48" declfile="CAPLPluginApi.h" declline="282"
                          declcolumn="48" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2ef31543606ba1e1442cac8849f08e8f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::GetPathRelativeToWorkspace</definition>
                <argsstring>(char *sPath)</argsstring>
                <name>GetPathRelativeToWorkspace</name>
                <param>
                    <type>char *</type>
                    <declname>sPath</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="287" column="34" declfile="CAPLPluginApi.h" declline="287"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2e2dafc84dfa422b1f740ae48b47f30f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::Report</definition>
                <argsstring>(const ReportStyle &amp;reportStyle, const char *sWarning)</argsstring>
                <name>Report</name>
                <param>
                    <type>const ReportStyle &amp;</type>
                    <declname>reportStyle</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sWarning</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="290" column="34" declfile="CAPLPluginApi.h" declline="290"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa44b85faa56aad4f3201970a2ca18bc8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetStatusFunc</definition>
                <argsstring>(tStatusFunc pFunc, HINSTANCE hDll)</argsstring>
                <name>SetStatusFunc</name>
                <param>
                    <type>tStatusFunc</type>
                    <declname>pFunc</declname>
                </param>
                <param>
                    <type>HINSTANCE</type>
                    <declname>hDll</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="293" column="34" declfile="CAPLPluginApi.h" declline="293"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aae7bd46592b5f6ddac987a95f532c02f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateMessageEvent</definition>
                <argsstring>(MessageEvent *pEvent, DWORD u32FileIndex, const char *sFilter)</argsstring>
                <name>CreateMessageEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_message_event" kindref="compound">MessageEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>u32FileIndex</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sFilter</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="296" column="36" declfile="CAPLPluginApi.h" declline="296"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ade8757133033d95dab9015837f599364" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteMessageEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteMessageEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="297" column="34" declfile="CAPLPluginApi.h" declline="297"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a99d86cdd0586d4ea632680be04e05c67" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateSignalEvent</definition>
                <argsstring>(SignalEvent *pEvent, const char *sIds)</argsstring>
                <name>CreateSignalEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_signal_event" kindref="compound">SignalEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="300" column="36" declfile="CAPLPluginApi.h" declline="300"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac4b99cb460624e0fc730214ec2e2cd1b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateSignalEventBySigVal</definition>
                <argsstring>(SignalEvent *pEvent, ISignalVal &amp;sIds)</argsstring>
                <name>CreateSignalEventBySigVal</name>
                <param>
                    <type><ref refid="classcapl_1_1_signal_event" kindref="compound">SignalEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> &amp;</type>
                    <declname>sIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="301" column="36" declfile="CAPLPluginApi.h" declline="301"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ade82d7bc98cfc0ebc9e2eba3aa8800aa" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteSignalEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteSignalEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="302" column="34" declfile="CAPLPluginApi.h" declline="302"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afda57d7982653fe6459bf2b5439294f8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateSignalUpdateEvent</definition>
                <argsstring>(SignalUpdateEvent *pEvent, const char *sIds)</argsstring>
                <name>CreateSignalUpdateEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_signal_update_event" kindref="compound">SignalUpdateEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="305" column="36" declfile="CAPLPluginApi.h" declline="305"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9d0df091bacdce55e4b0857cb9d50f5a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateSignalUpdateEventBySigVal</definition>
                <argsstring>(SignalUpdateEvent *pEvent, ISignalVal &amp;sIds)</argsstring>
                <name>CreateSignalUpdateEventBySigVal</name>
                <param>
                    <type><ref refid="classcapl_1_1_signal_update_event" kindref="compound">SignalUpdateEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> &amp;</type>
                    <declname>sIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="306" column="36" declfile="CAPLPluginApi.h" declline="306"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abd71d9703a8a7f187ff2d13cfaef4584" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteSignalUpdateEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteSignalUpdateEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="307" column="34" declfile="CAPLPluginApi.h" declline="307"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6955f90372f48881f4d7583ae57a6605" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateTimerEvent</definition>
                <argsstring>(TimerEvent *pEvent, ITimer *pTimer)</argsstring>
                <name>CreateTimerEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_timer_event" kindref="compound">TimerEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_timer" kindref="compound">ITimer</ref> *</type>
                    <declname>pTimer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="310" column="36" declfile="CAPLPluginApi.h" declline="310"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a557658e05c479c903c0205cd1e6a0a45" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteTimerEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteTimerEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="311" column="34" declfile="CAPLPluginApi.h" declline="311"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aedc07d6788015125c7039789b64f71b7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateEnvVarEvent</definition>
                <argsstring>(IEnvVarEvent *pEvent, const char *sId)</argsstring>
                <name>CreateEnvVarEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var_event" kindref="compound">IEnvVarEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="314" column="36" declfile="CAPLPluginApi.h" declline="314"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a65ceabbab3402fe714d90b049d004a72" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteEnvVarEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteEnvVarEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="315" column="34" declfile="CAPLPluginApi.h" declline="315"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a308bb9664dbc3a842e1564e9c67539cf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateEnvVarUpdateEvent</definition>
                <argsstring>(IEnvVarEvent *pEvent, const char *sId)</argsstring>
                <name>CreateEnvVarUpdateEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var_event" kindref="compound">IEnvVarEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="318" column="36" declfile="CAPLPluginApi.h" declline="318"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aed78ce27ac8db21a77187e370047a847" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteEnvVarUpdateEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteEnvVarUpdateEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="319" column="34" declfile="CAPLPluginApi.h" declline="319"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad53139507a6ebb74f90a75a804601e38" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreatePreStartEvent</definition>
                <argsstring>(PreStartEvent *pEvent)</argsstring>
                <name>CreatePreStartEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_pre_start_event" kindref="compound">PreStartEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="322" column="36" declfile="CAPLPluginApi.h" declline="322"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aef89362cc1b9bb1cbe3a47b95badba15" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeletePreStartEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeletePreStartEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="323" column="34" declfile="CAPLPluginApi.h" declline="323"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2ecd2fe1496f2314c4489cc8fdda326f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateStartEvent</definition>
                <argsstring>(StartEvent *pEvent)</argsstring>
                <name>CreateStartEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_start_event" kindref="compound">StartEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="326" column="36" declfile="CAPLPluginApi.h" declline="326"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7ad4a0bc0400ea4ea1399a656bf7bf32" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteStartEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteStartEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="327" column="34" declfile="CAPLPluginApi.h" declline="327"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aafa4c9cc5f67c9c8701c8f99d98897a6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreatePreStopEvent</definition>
                <argsstring>(PreStopEvent *pEvent)</argsstring>
                <name>CreatePreStopEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_pre_stop_event" kindref="compound">PreStopEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="330" column="36" declfile="CAPLPluginApi.h" declline="330"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abe3c7c6611ca1dc1993755572fb36f41" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeletePreStopEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeletePreStopEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="331" column="34" declfile="CAPLPluginApi.h" declline="331"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a73d6316817d689ac1a73e7cd3ed1a6e8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateStopEvent</definition>
                <argsstring>(StopEvent *pEvent)</argsstring>
                <name>CreateStopEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_stop_event" kindref="compound">StopEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="334" column="36" declfile="CAPLPluginApi.h" declline="334"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a03eea5e8e0cf17bead381f803122920d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteStopEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteStopEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="335" column="34" declfile="CAPLPluginApi.h" declline="335"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab7121f521b9c4318e0a3f89f22ca6e4a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateCaplKeyEvent</definition>
                <argsstring>(KeyEvent *pEvent, __int32 caplKey, DWORD u32FileIndex)</argsstring>
                <name>CreateCaplKeyEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_key_event" kindref="compound">KeyEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>caplKey</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>u32FileIndex</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="338" column="36" declfile="CAPLPluginApi.h" declline="338"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3187c25638f9b9686ff916d67d578b6f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteKeyEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteKeyEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="339" column="34" declfile="CAPLPluginApi.h" declline="339"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af5f289ada8f792fcbfc555f2316f0d76" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateBusEvent</definition>
                <argsstring>(BusEvent *pEvent, BusEventType enState)</argsstring>
                <name>CreateBusEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_bus_event" kindref="compound">BusEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>BusEventType</type>
                    <declname>enState</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="343" column="36" declfile="CAPLPluginApi.h" declline="343"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aba6ff35ac1591082d662b9bdf3b8b146" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteBusEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteBusEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="344" column="34" declfile="CAPLPluginApi.h" declline="344"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aec0b3b41921695066d9188a861428aac" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateErrorFrameEvent</definition>
                <argsstring>(ErrorFrameEvent *pEvent)</argsstring>
                <name>CreateErrorFrameEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_error_frame_event" kindref="compound">ErrorFrameEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="347" column="36" declfile="CAPLPluginApi.h" declline="347"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac3bbd91c9e7b0ccc79de122b3dec5abb" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteErrorFrameEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteErrorFrameEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="348" column="34" declfile="CAPLPluginApi.h" declline="348"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9646ddd0a333be6eda07d0a2008a055f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateLinWakeupFrameEvent</definition>
                <argsstring>(LinWakeupFrameEvent *pEvent)</argsstring>
                <name>CreateLinWakeupFrameEvent</name>
                <param>
                    <type>
                        <ref refid="classcapl_1_1_lin_wakeup_frame_event" kindref="compound">LinWakeupFrameEvent</ref>
                        *
                    </type>
                    <declname>pEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="351" column="36" declfile="CAPLPluginApi.h" declline="351"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a43c0f95dff3222a99c68f76dc16ae496" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteLinWakeupFrameEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteLinWakeupFrameEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="352" column="34" declfile="CAPLPluginApi.h" declline="352"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a322a43a0b42674eccdbb0eb6bb3166ee" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateEthernetPacketEvent</definition>
                <argsstring>(EthernetPacketEvent *pEvent, BYTE u8Channel)</argsstring>
                <name>CreateEthernetPacketEvent</name>
                <param>
                    <type>
                        <ref refid="classcapl_1_1_ethernet_packet_event" kindref="compound">EthernetPacketEvent</ref>
                        *
                    </type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>u8Channel</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="355" column="36" declfile="CAPLPluginApi.h" declline="355"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a492894dc2649a346e72ac87fa3dd8e6f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteEthernetPacketEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteEthernetPacketEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="356" column="34" declfile="CAPLPluginApi.h" declline="356"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af2e90430f3df3c933e793b78cd8a6702" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateEthernetStatusEvent</definition>
                <argsstring>(EthernetStatusEvent *pEvent, BYTE u8Channel)</argsstring>
                <name>CreateEthernetStatusEvent</name>
                <param>
                    <type>
                        <ref refid="classcapl_1_1_ethernet_status_event" kindref="compound">EthernetStatusEvent</ref>
                        *
                    </type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>u8Channel</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="357" column="36" declfile="CAPLPluginApi.h" declline="357"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad83a53988531b2adcd4bba9e026522ba" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteEthernetStatusEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteEthernetStatusEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="358" column="34" declfile="CAPLPluginApi.h" declline="358"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a90c5c7e9b45fe4ba8f41749345883cb8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateDiagEvent</definition>
                <argsstring>(DiagEvent *pEvent)</argsstring>
                <name>CreateDiagEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_diag_event" kindref="compound">DiagEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="361" column="36" declfile="CAPLPluginApi.h" declline="361"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aef028b37642a7dd9ed9c755c789ea018" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteDiagEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteDiagEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="362" column="34" declfile="CAPLPluginApi.h" declline="362"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a345a0745923c35c52d22225dbb562792" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateDiagResponseEvent</definition>
                <argsstring>(DiagResponseEvent *pEvent, const char *sId, const char *sStack)</argsstring>
                <name>CreateDiagResponseEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_diag_response_event" kindref="compound">DiagResponseEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="363" column="36" declfile="CAPLPluginApi.h" declline="363"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a238eb76b42d0ad6fc32f97f4f607d81f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteDiagResponseEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteDiagResponseEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="364" column="34" declfile="CAPLPluginApi.h" declline="364"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a06d56386fb07578f6d09ce60102b2d9c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateDiagRequestEvent</definition>
                <argsstring>(DiagRequestEvent *pEvent, const char *sId, const char *sStack)</argsstring>
                <name>CreateDiagRequestEvent</name>
                <param>
                    <type><ref refid="classcapl_1_1_diag_request_event" kindref="compound">DiagRequestEvent</ref> *</type>
                    <declname>pEvent</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="365" column="36" declfile="CAPLPluginApi.h" declline="365"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3671de1dd6fdde914c79b40585c8451e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteDiagRequestEvent</definition>
                <argsstring>(void *handle)</argsstring>
                <name>DeleteDiagRequestEvent</name>
                <param>
                    <type>void *</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="366" column="34" declfile="CAPLPluginApi.h" declline="366"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abe523b3982a845c3e4de4ad6a1a61219" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>typedef</type>
                <definition>typedef capl::void</definition>
                <argsstring>(_cdecl AIDA_DataFunction)(__int32)</argsstring>
                <name>void</name>
                <param>
                    <type>_cdecl</type>
                    <declname>AIDA_DataFunction</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="376" column="13" declfile="CAPLPluginApi.h" declline="369"
                          declcolumn="13" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afc6d8cbb34723dfffa391eba5050b165" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::Create_AIDA_DataIndEvent</definition>
                <argsstring>(AIDA_DataFunction *pFunc, void *hStack)</argsstring>
                <name>Create_AIDA_DataIndEvent</name>
                <param>
                    <type>AIDA_DataFunction *</type>
                    <declname>pFunc</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="370" column="36" declfile="CAPLPluginApi.h" declline="370"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af1d75f019e6eef9539c5f689d1c45a66" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::Delete_AIDA_DataIndEvent</definition>
                <argsstring>(void *hEvent)</argsstring>
                <name>Delete_AIDA_DataIndEvent</name>
                <param>
                    <type>void *</type>
                    <declname>hEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="371" column="34" declfile="CAPLPluginApi.h" declline="371"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a60db29846bf1bce50262ddbb38f79753" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::Create_AIDA_DataConEvent</definition>
                <argsstring>(AIDA_DataFunction *pFunc, void *hStack)</argsstring>
                <name>Create_AIDA_DataConEvent</name>
                <param>
                    <type>AIDA_DataFunction *</type>
                    <declname>pFunc</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="372" column="36" declfile="CAPLPluginApi.h" declline="372"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab298f872901549a0cefb089b52ac1342" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::Delete_AIDA_DataConEvent</definition>
                <argsstring>(void *hEvent)</argsstring>
                <name>Delete_AIDA_DataConEvent</name>
                <param>
                    <type>void *</type>
                    <declname>hEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="373" column="34" declfile="CAPLPluginApi.h" declline="373"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a12a11647006a473bca540c23d9d783ff" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::Create_ReceptionInd_Event</definition>
                <argsstring>(Transmission_Function *pFunc, void *hStack)</argsstring>
                <name>Create_ReceptionInd_Event</name>
                <param>
                    <type>Transmission_Function *</type>
                    <declname>pFunc</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="377" column="36" declfile="CAPLPluginApi.h" declline="377"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a43060a8371dea25a498fbb458b8f92b5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::Delete_ReceptionInd_Event</definition>
                <argsstring>(void *hEvent)</argsstring>
                <name>Delete_ReceptionInd_Event</name>
                <param>
                    <type>void *</type>
                    <declname>hEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="378" column="34" declfile="CAPLPluginApi.h" declline="378"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3b0b9162b003924b19c45f8f1221916d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::Create_SendCon_Event</definition>
                <argsstring>(Transmission_Function *pFunc, void *hStack)</argsstring>
                <name>Create_SendCon_Event</name>
                <param>
                    <type>Transmission_Function *</type>
                    <declname>pFunc</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="379" column="36" declfile="CAPLPluginApi.h" declline="379"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1ce96f9ef5ae3924ad449fd352930faf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::Delete_SendCon_Event</definition>
                <argsstring>(void *hEvent)</argsstring>
                <name>Delete_SendCon_Event</name>
                <param>
                    <type>void *</type>
                    <declname>hEvent</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="380" column="34" declfile="CAPLPluginApi.h" declline="380"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa62a5f918962aceb449d92fa85f5df8e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_timer" kindref="compound">ITimer</ref> *</type>
                <definition>ITimer * capl::CreateTimer</definition>
                <argsstring>(bool boSeconds)</argsstring>
                <name>CreateTimer</name>
                <param>
                    <type>bool</type>
                    <declname>boSeconds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="383" column="36" declfile="CAPLPluginApi.h" declline="383"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a83e2792c29f3bf33fbfa2cab9196bbd6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteTimer</definition>
                <argsstring>(ITimer *pTimer)</argsstring>
                <name>DeleteTimer</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_timer" kindref="compound">ITimer</ref> *</type>
                    <declname>pTimer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="384" column="34" declfile="CAPLPluginApi.h" declline="384"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9de88294ea0078766293fe57698b20fa" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_message" kindref="compound">IMessage</ref> *</type>
                <definition>IMessage * capl::CreateMessage</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>CreateMessage</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="387" column="38" declfile="CAPLPluginApi.h" declline="387"
                          declcolumn="38" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1f33b36502f79d9746234b9fbc05a51a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_message" kindref="compound">IMessage</ref> *</type>
                <definition>IMessage * capl::CreateMessageById</definition>
                <argsstring>(DWORD dwMessageId, BYTE u8Channel, BYTE u8Type)</argsstring>
                <name>CreateMessageById</name>
                <param>
                    <type>DWORD</type>
                    <declname>dwMessageId</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>u8Channel</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>u8Type</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="388" column="38" declfile="CAPLPluginApi.h" declline="388"
                          declcolumn="38" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5a8a16ce73ac989ac7b393f31e9e80aa" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteMessage</definition>
                <argsstring>(IMessage *pMsg)</argsstring>
                <name>DeleteMessage</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">IMessage</ref> *</type>
                    <declname>pMsg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="389" column="34" declfile="CAPLPluginApi.h" declline="389"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa1a2f89ccdb7f973c08d7e96f056552a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> *</type>
                <definition>IEnvVar * capl::CreateEnvVar</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>CreateEnvVar</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="392" column="37" declfile="CAPLPluginApi.h" declline="392"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af79f3c951f437cf04bc52afbb9290fb9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> *</type>
                <definition>IEnvVar * capl::CreateEnvVarByName</definition>
                <argsstring>(const char *sName)</argsstring>
                <name>CreateEnvVarByName</name>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="393" column="37" declfile="CAPLPluginApi.h" declline="393"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3897ce7be788c4dcc7040ea6465377e6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteEnvVar</definition>
                <argsstring>(IEnvVar *pVar)</argsstring>
                <name>DeleteEnvVar</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> *</type>
                    <declname>pVar</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="395" column="34" declfile="CAPLPluginApi.h" declline="395"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9fbc569799c966439bab49f02fd89a30" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CreateThread</definition>
                <argsstring>()</argsstring>
                <name>CreateThread</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="401" column="36" declfile="CAPLPluginApi.h" declline="401"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abadf864ba48503fc61e51050945adb9a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteThread</definition>
                <argsstring>(void *hThread)</argsstring>
                <name>DeleteThread</name>
                <param>
                    <type>void *</type>
                    <declname>hThread</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="404" column="34" declfile="CAPLPluginApi.h" declline="404"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab2a46973233e740bee1a37230b915fab" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::ResetCurrentThread</definition>
                <argsstring>()</argsstring>
                <name>ResetCurrentThread</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="405" column="34" declfile="CAPLPluginApi.h" declline="405"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae86ac9c64cb921b93987d3068ec26754" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> *</type>
                <definition>ISignalVal * capl::CreateSignalVal</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>CreateSignalVal</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="408" column="40" declfile="CAPLPluginApi.h" declline="408"
                          declcolumn="40" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac716e010e2dca2f8bc35609c53515bca" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> *</type>
                <definition>ISignalVal * capl::CreateTxRqSignalVal</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>CreateTxRqSignalVal</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="409" column="40" declfile="CAPLPluginApi.h" declline="409"
                          declcolumn="40" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae0d7bc4048d62dd2eb158e0dfdacfa93" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteSignalVal</definition>
                <argsstring>(ISignalVal *pVal)</argsstring>
                <name>DeleteSignalVal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> *</type>
                    <declname>pVal</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="410" column="34" declfile="CAPLPluginApi.h" declline="410"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab32cfc1e5013bed5ff28cae96e075489" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> *</type>
                <definition>ISignal * capl::CreateSignal</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>CreateSignal</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="413" column="37" declfile="CAPLPluginApi.h" declline="413"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9961ccec48e818341427b8faef305eca" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> *</type>
                <definition>ISignal * capl::CreateTxRqSignal</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>CreateTxRqSignal</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="414" column="37" declfile="CAPLPluginApi.h" declline="414"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab7f9c520d0f60c2a3b00b3cac4141cb8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteSignal</definition>
                <argsstring>(ISignal *pVal)</argsstring>
                <name>DeleteSignal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> *</type>
                    <declname>pVal</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="415" column="34" declfile="CAPLPluginApi.h" declline="415"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9097b2a59881feb3d26cd0f21a0d9b2d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_attribute" kindref="compound">IAttribute</ref> *</type>
                <definition>IAttribute * capl::GetAttribute</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>GetAttribute</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="418" column="40" declfile="CAPLPluginApi.h" declline="418"
                          declcolumn="40" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0ec4c01dd6eabb89b6c78a79127e5f8e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteAttribute</definition>
                <argsstring>(IAttribute *pAttribute)</argsstring>
                <name>DeleteAttribute</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_attribute" kindref="compound">IAttribute</ref> *</type>
                    <declname>pAttribute</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="419" column="34" declfile="CAPLPluginApi.h" declline="419"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa1681a7864ce48d1f7d44aa9071b2264" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetTestFunction</definition>
                <argsstring>(const char *sCAPLFunctionName)</argsstring>
                <name>SetTestFunction</name>
                <param>
                    <type>const char *</type>
                    <declname>sCAPLFunctionName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="421" column="34" declfile="CAPLPluginApi.h" declline="421"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5bc4150e29755c3b8f4ad023644588e8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::RemoveTestFunction</definition>
                <argsstring>(const char *sCAPLFunctionName)</argsstring>
                <name>RemoveTestFunction</name>
                <param>
                    <type>const char *</type>
                    <declname>sCAPLFunctionName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="422" column="34" declfile="CAPLPluginApi.h" declline="422"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a87639fad225c189d8c523a43b2dd054e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetExtendedErrorInfo</definition>
                <argsstring>(void *pThread, bool boExtendedErrorInfo)</argsstring>
                <name>SetExtendedErrorInfo</name>
                <param>
                    <type>void *</type>
                    <declname>pThread</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>boExtendedErrorInfo</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="423" column="34" declfile="CAPLPluginApi.h" declline="423"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a597619a979853af9262a459fad46c28d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_ethernet_packet" kindref="compound">IEthernetPacket</ref> *</type>
                <definition>IEthernetPacket * capl::CreateEthernetPacket</definition>
                <argsstring>()</argsstring>
                <name>CreateEthernetPacket</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="426" column="45" declfile="CAPLPluginApi.h" declline="426"
                          declcolumn="45" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a093d56a71d0dda58dc0865fea620e379" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteEthernetPacket</definition>
                <argsstring>(IEthernetPacket *pVal)</argsstring>
                <name>DeleteEthernetPacket</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_ethernet_packet" kindref="compound">IEthernetPacket</ref> *</type>
                    <declname>pVal</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="427" column="34" declfile="CAPLPluginApi.h" declline="427"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab46b544cfac6fb788fa0b0fe39a639db" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">IDiagResponse</ref> *</type>
                <definition>IDiagResponse * capl::CreateDiagResponse</definition>
                <argsstring>(const char *sId, const char *sStack)</argsstring>
                <name>CreateDiagResponse</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="430" column="43" declfile="CAPLPluginApi.h" declline="430"
                          declcolumn="43" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aed325c0a6bb85528f56a37d1edb93025" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteDiagResponse</definition>
                <argsstring>(IDiagResponse *pMsg)</argsstring>
                <name>DeleteDiagResponse</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">IDiagResponse</ref> *</type>
                    <declname>pMsg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="431" column="34" declfile="CAPLPluginApi.h" declline="431"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1e7fd0053904582505009f43a60790a7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_diag_request" kindref="compound">IDiagRequest</ref> *</type>
                <definition>IDiagRequest * capl::CreateDiagRequest</definition>
                <argsstring>(const char *sId, const char *sStack)</argsstring>
                <name>CreateDiagRequest</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="432" column="42" declfile="CAPLPluginApi.h" declline="432"
                          declcolumn="42" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9ea982aea633ffa57522539ed003d1cd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteDiagRequest</definition>
                <argsstring>(IDiagRequest *pMsg)</argsstring>
                <name>DeleteDiagRequest</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_request" kindref="compound">IDiagRequest</ref> *</type>
                    <declname>pMsg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="433" column="34" declfile="CAPLPluginApi.h" declline="433"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3c96ac3c4d92ff284215ca59cb783944" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_lin_wakeup_frame" kindref="compound">ILinWakeupFrame</ref> *</type>
                <definition>ILinWakeupFrame * capl::CreateLinWakeupFrame</definition>
                <argsstring>()</argsstring>
                <name>CreateLinWakeupFrame</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="436" column="45" declfile="CAPLPluginApi.h" declline="436"
                          declcolumn="45" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aab97bf7249520a8c2355619f12574488" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteLinWakeupFrame</definition>
                <argsstring>(ILinWakeupFrame *pVal)</argsstring>
                <name>DeleteLinWakeupFrame</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_lin_wakeup_frame" kindref="compound">ILinWakeupFrame</ref> *</type>
                    <declname>pVal</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="437" column="34" declfile="CAPLPluginApi.h" declline="437"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a245b786749ec3d5ab07e226a526a67bd" prot="public"
                       static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type>__int32</type>
                <definition>static __int32 capl::elCountTimerArray</definition>
                <argsstring>(const TimerArrayEvent &amp;timerArray)</argsstring>
                <name>elCountTimerArray</name>
                <param>
                    <type>
                        const <ref refid="classcapl_1_1_timer_array_event" kindref="compound">TimerArrayEvent</ref>
                        &amp;
                    </type>
                    <declname>timerArray</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2654" column="29" bodyfile="CAPLPluginApi.h" bodystart="2654"
                          bodyend="2657" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac6816d2c2a169b8a83ed476d08962d41" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::cancelTimer</definition>
                <argsstring>(capl::ITimer &amp;)</argsstring>
                <name>cancelTimer</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_timer" kindref="compound">capl::ITimer</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops an active timer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Timer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>or msTimer variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void cancelTimer(msTimer t); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2870" column="34" declfile="CAPLPluginApi.h" declline="2870"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afbd088f820971351af32c3be838204f7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::atodbl</definition>
                <argsstring>(const char *)</argsstring>
                <name>atodbl</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function converts the string s into a double number. Normally, the base is decimal and must have the following format: [Blank space] [Sign] [Digits] [.Digits] [ {d | D | e | E}[Sign]Digits]
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Input</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>string to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Double number, the converted string </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>double atodbl(char s[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2878" column="36" declfile="CAPLPluginApi.h" declline="2878"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3ef66418040e3b69d6682a12d6f67c5b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::atol</definition>
                <argsstring>(const char *)</argsstring>
                <name>atol</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function converts the string s to a LONG number. The number base is decimal. Starting with string 0x, base 16 is used. Leading blanks are not read
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>String</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>long integer </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long atol(char s[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2886" column="39" declfile="CAPLPluginApi.h" declline="2886"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a24021da301c987e49f0debfa4073b0c1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::ltoa</definition>
                <argsstring>(__int32, char *, __int32)</argsstring>
                <name>ltoa</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The number val is converted to a string s. In this case, base indicates a number base between 2 and 36. s must be large enough to accept the converted number!
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>val</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String, which contains the converted number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>base</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number base </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void ltoa(long val, char s[], long base); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2895" column="34" declfile="CAPLPluginApi.h" declline="2895"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8a5a43ada48c8fa18aeb6b3b945a9657" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::_round</definition>
                <argsstring>(double)</argsstring>
                <name>_round</name>
                <param>
                    <type>double</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Rounds x to the nearest integral number. The rounding method used is symmetric arithmetic rounding
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number to be rounded </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Nearest integral number </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long _round(double x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2903" column="39" declfile="CAPLPluginApi.h" declline="2903"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a862f91244cd9960b992a0d85a7718e1f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::_round64</definition>
                <argsstring>(double)</argsstring>
                <name>_round64</name>
                <param>
                    <type>double</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Rounds x to the nearest integral number. The rounding method used is symmetric arithmetic rounding
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number to be rounded </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Nearest integral number </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int64 _round64(double x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2911" column="39" declfile="CAPLPluginApi.h" declline="2911"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac95e153a28ab0e0e118f82a076c48bd1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::_floor</definition>
                <argsstring>(double x)</argsstring>
                <name>_floor</name>
                <param>
                    <type>double</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Calculates the floor of a value, i.e. the largest integer smaller or equal to the value
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value of which the floor shall be calculated </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Floor of x </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float _floor(float x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2919" column="36" declfile="CAPLPluginApi.h" declline="2919"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1769fc382cee9b6642acfb3b93f0eb07" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::_ceil</definition>
                <argsstring>(double x)</argsstring>
                <name>_ceil</name>
                <param>
                    <type>double</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Calculates the ceiling of a value, i.e. the smallest integer larger or equal to the value
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value of which the ceiling shall be calculated </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Ceiling of x </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float _ceil(float x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2927" column="36" declfile="CAPLPluginApi.h" declline="2927"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0d35d383518caaa80e39c6fb344515cf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::random</definition>
                <argsstring>(DWORD x)</argsstring>
                <name>random</name>
                <param>
                    <type>DWORD</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Calculates a random number between 0 and x-1
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Determines</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>the interval </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Random number between 0 and x-1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword random(dword x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2935" column="35" declfile="CAPLPluginApi.h" declline="2935"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad887f56558d7bd7abdeb4fb7b09649da" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::loadPanel</definition>
                <argsstring>(const char *)</argsstring>
                <name>loadPanel</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2945" column="34" declfile="CAPLPluginApi.h" declline="2945"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a914e4f2bdf09af02ffbed533feec1c33" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::openPanel</definition>
                <argsstring>(const char *)</argsstring>
                <name>openPanel</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Opens a panel.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panelName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>If several panels with the same name exist in the CANoe configuration this command has an effect on all these panels </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2952" column="34" declfile="CAPLPluginApi.h" declline="2952"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a881ed6d0f95340396116a28fcb064c77" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::closePanel</definition>
                <argsstring>(const char *)</argsstring>
                <name>closePanel</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Closes a panel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panelName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>If several panels with the same name exist in the CANoe configuration this command has an effect on all these panels </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2959" column="34" declfile="CAPLPluginApi.h" declline="2959"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adb5a5afd514876facd39d42cff5c724e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetControlBackColor</definition>
                <argsstring>(const char *sPanel, const char *sControl, __int32 color)</argsstring>
                <name>SetControlBackColor</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>color</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the background color of panel elements
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>color</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Color value (e.g. calculated by MakeRGB) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void SetControlBackColor(char[] panel, char[] control, long color); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2968" column="34" declfile="CAPLPluginApi.h" declline="2968"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adf6cac9c8676d8cdba2a5b74501d67df" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetControlForeColor</definition>
                <argsstring>(const char *sPanel, const char *sControl, __int32 color)</argsstring>
                <name>SetControlForeColor</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>color</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the foreground color of panel elements
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>color</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Color value (e.g. calculated by MakeRGB) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void SetControlForeColor(char[] panel, char[] control, long color); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2977" column="34" declfile="CAPLPluginApi.h" declline="2977"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aaf73dc01608f83866febf2e363a9e6be" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetControlColors</definition>
                <argsstring>(const char *sPanel, const char *sControl, __int32 backcolor, __int32 textcolor)</argsstring>
                <name>SetControlColors</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>backcolor</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>textcolor</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the background and text color of panel elements
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>backcolor</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Color value (e.g. calculated by MakeRGB) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>textcolor</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Color value (e.g. calculated by MakeRGB) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void SetControlColors(char[] panel, char[] control, long backcolor, long textcolor); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="2987" column="34" declfile="CAPLPluginApi.h" declline="2987"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a391b0357cb1cde36ce9791f3ddbe3047" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::enableControl</definition>
                <argsstring>(const char *sPanel, const char *sControl, __int32 enable)</argsstring>
                <name>enableControl</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>enable</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Selective activation and deactivation of the following elements: control elements control and display elements
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the panel, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>enable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>0 turn off (disable) 1 turn on (enable) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void enableControl(char panel[], char control[], long enable); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3000" column="34" declfile="CAPLPluginApi.h" declline="3000"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ade688650e54f3da8c1eb03bcdea3bba2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetControlVisibility</definition>
                <argsstring>(const char *sPanel, const char *sControl, __int32 visible)</argsstring>
                <name>SetControlVisibility</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>visible</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the visibility of panel elements.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>visible</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Sets if the panel element should be visible or not visible = 1 =&gt; Panel element is visible visible = 0 =&gt; Panel element is not visible </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void SetControlVisibility(char[] panel, char[] control, long visible); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3012" column="34" declfile="CAPLPluginApi.h" declline="3012"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4b6d56c5dc095b596786ae0e7e421636" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetClockControlTimeByValues</definition>
                <argsstring>(const char *sPanel, const char *sControl, __int32 hours, __int32 minutes, __int32 seconds)</argsstring>
                <name>SetClockControlTimeByValues</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>hours</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>minutes</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>seconds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the time of the Panel Designer Clock Control
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>hours</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Defines the hours of the time to be displayed in the clock control </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>minutes</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Defines the minutes of the time to be displayed in the clock control </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>seconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Defines the seconds of the time to be displayed in the clock control </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void SetClockControlTime(char[] panel, char[] control, int hours, int minutes, int seconds); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3023" column="34" declfile="CAPLPluginApi.h" declline="3023"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa7eae7772914682af8a3c771eeb57a83" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetClockControlTime</definition>
                <argsstring>(const char *sPanel, const char *sControl, __int32 time)</argsstring>
                <name>SetClockControlTime</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>time</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the time of the Panel Designer Clock Control
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>time</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Defines the time in seconds to be displayed in the clock control. The corresponding hours, minutes and seconds are calculated during runtime </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void SetClockControlTime(char[] panel, char[] control, int time); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3032" column="34" declfile="CAPLPluginApi.h" declline="3032"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9c0f5805b0be4ebc41cb721014ea5c25" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::ClockControlStart</definition>
                <argsstring>(const char *sPanel, const char *sControl)</argsstring>
                <name>ClockControlStart</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts the Clock Control designed as stop watch in the Panel Designer (setting Mode = StopWatch)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void ClockControlStart(char[] panel, char[] control); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3040" column="34" declfile="CAPLPluginApi.h" declline="3040"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a035ef3fc88628c1f85079e236be19aa3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::ClockControlStop</definition>
                <argsstring>(const char *sPanel, const char *sControl)</argsstring>
                <name>ClockControlStop</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops the Clock Control designed as stop watch with the Panel Designer (setting Mode = StopWatch)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void ClockControlStop(char[] panel, char[] control); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3048" column="34" declfile="CAPLPluginApi.h" declline="3048"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad198b8769da78ec7903998ee4a3cd62c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::ClockControlReset</definition>
                <argsstring>(const char *sPanel, const char *sControl)</argsstring>
                <name>ClockControlReset</name>
                <param>
                    <type>const char *</type>
                    <declname>sPanel</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sControl</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Resets the Clock Control designed as stop watch with the Panel Designer (setting Mode = StopWatch)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void ClockControlReset(char[] panel, char[] control); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3056" column="34" declfile="CAPLPluginApi.h" declline="3056"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afb115924dda326a254978c94b55fc38c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileReadArray_Internal</definition>
                <argsstring>(const char *, const char *, char *, short, const char *, const char *, const char *)</argsstring>
                <name>fileReadArray_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>short</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches for the variable entry in the section section of the file file. Its contents are interpreted as a list of byte values. The number format is decimal or with the prefix 0x it is hexadecimal. Numbers are separated by spaces, tabs, a comma, semi-colon or slash. The buffer is filled up to a quantity of bufferlen bytes
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>buffer for characters to be read </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferlen</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of buffer in byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of buffer in byte </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of characters read </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileReadArray(char section[], char entry[], char buffer[], long bufferlen, char file[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3068" column="39" declfile="CAPLPluginApi.h" declline="3068"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aea4cacd27dfc3adbb244a0df5d964a7d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::fileReadFloat_Internal</definition>
                <argsstring>(const char *, const char *, double, const char *, const char *, const char *)</argsstring>
                <name>fileReadFloat_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Analogous to fileReadInt for floats
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>def</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>file</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of characters read </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float fileReadFloat(char section[], char entry[], float def, char ile); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3079" column="36" declfile="CAPLPluginApi.h" declline="3079"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a87b7dcc8d6dffa52652ccda1f6007541" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileReadInt_Internal</definition>
                <argsstring>(const char *, const char *, __int32, const char *, const char *, const char *)</argsstring>
                <name>fileReadInt_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches for the variable entry in the section section of the file filename. If its value is a number, this number is returned as the functional result. If the file or entry is not found, or if entry does not contain a valid number, the default value def is returned as the functional result
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>def</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>file</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Integer read </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileReadInt(char section[], char entry[], long def, char file[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3090" column="39" declfile="CAPLPluginApi.h" declline="3090"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a30ad77c1d4ab339e93772a9115bc9f37" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileReadString_Internal</definition>
                <argsstring>(const char *, const char *, const char *, char *, __int32, const char *, const char *, const char *)</argsstring>
                <name>fileReadString_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches for the variable entry in the section section of the file filename. Its content (value) is written to the buffer buffer. Its length must be passed correctly to bufferlen. If the file or entry is not found, the default value def is copied to buffer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>def</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer for characters to be read </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferlen</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of buffer in byte </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of bytes read </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileReadString(char section[], char entry[], char def[], char buffer[], long bufferlen, char filename[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3103" column="39" declfile="CAPLPluginApi.h" declline="3103"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae82fb6e04f1c409583be5e19d06a1604" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileWriteFloat_Internal</definition>
                <argsstring>(const char *, const char *, double, const char *, const char *, const char *)</argsstring>
                <name>fileWriteFloat_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Analogous to fileWriteInt, but writes a float variable to the file instead of a text
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>def</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>file</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 if an error has occurred else 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileWriteFloat(char section[], char entry[], float def, char file[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3114" column="39" declfile="CAPLPluginApi.h" declline="3114"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9cb8cd7402cccfaa2170ef9549c4a805" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileWriteInt_Internal</definition>
                <argsstring>(const char *, const char *, __int32, const char *, const char *, const char *)</argsstring>
                <name>fileWriteInt_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Analogous to fileWriteString, but writes a long variable to the file instead of a text
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>def</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>file</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 if an error has occurred else 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileWriteInt(char section[], char entry[], long def, char file[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3125" column="39" declfile="CAPLPluginApi.h" declline="3125"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae2f2492b62844094c99823ce1e02e9dc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileWriteString_Internal</definition>
                <argsstring>(const char *, const char *, const char *, const char *, const char *, const char *)</argsstring>
                <name>fileWriteString_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Opens the file filename, finds the section section and writes the variable entry with the value value. If entry already exists, the old value is overwritten. The functional result is the number of characters written, or 0 for an error
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of written characters of 0 if an error has occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileWriteString(char section[], char entry[], char value[], char filename[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3136" column="39" declfile="CAPLPluginApi.h" declline="3136"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a34f4eec0493d0cbe6e673393ca9cd400" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::getLocalTime</definition>
                <argsstring>(__int32 *)</argsstring>
                <name>getLocalTime</name>
                <param>
                    <type>__int32 *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns details to the current date and time in an array of type long
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>An</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>array of type long with at least 9 entries. The entries of the array will be filled with the following information: 1 Seconds (0 - 60) 2 Minutes (0 - 60) 3 Hours (0 - 24) 4 Day of month (1 - 31) 5 Month (0 - 11) 6 Year (starting with 1900) 7 Day of week (0 - 7) 8 Day of Year (0 - 365) 9 Flag for daylight saving time (0 - 1, 1 = daylight saving time) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void getLocalTime(long time[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3152" column="34" declfile="CAPLPluginApi.h" declline="3152"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a01b253953bc5ced6177ec59fb7ab1493" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::getLocalTimeString</definition>
                <argsstring>(char *)</argsstring>
                <name>getLocalTimeString</name>
                <param>
                    <type>char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Copies a printed representation of the current date and time into the supplied character buffer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeBuffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer the string will be written in. This buffer must be at least 26 characters long. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void getLocalTimeString(char timeBuffer[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3159" column="34" declfile="CAPLPluginApi.h" declline="3159"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a712356cc538f00dd0f721f2bb743e877" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getProfileArray_Internal</definition>
                <argsstring>(const char *, const char *, char *, __int32, const char *, const char *, const char *)</argsstring>
                <name>getProfileArray_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches the file under section section for the variable entry. Entry is interpreted as a list of numerical values, separated by comma, tab, space, semicolon or slash. A 0x prefix indicates hex values
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File path as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buff</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer for the read-in numerical values </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffsize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of buff: Maximum number of read in numerical values (max. 1279 characters) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of numerical values read in </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long getProfileArray(char section[], char entry[],char buff[], long buffsize, char filename[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3171" column="39" declfile="CAPLPluginApi.h" declline="3171"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af0ae09a36576c5a2839ac433830df17a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::getProfileFloat_Internal</definition>
                <argsstring>(const char *, const char *, double, const char *, const char *, const char *)</argsstring>
                <name>getProfileFloat_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches the file filename under section section for the variable entry. If its value is a number, this number is returned as the functional result. If the file or entry is not found, or if entry does not contain a valid number, the default value def is returned as the functional result
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File path as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>def</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Default value in case of error as a float </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of numerical values read in </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float getProfileFloat(char section[], char entry[], long def, char filename[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3182" column="36" declfile="CAPLPluginApi.h" declline="3182"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6d39f838c68ccac879e07acf0a1727b8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getProfileInt_Internal</definition>
                <argsstring>(const char *, const char *, __int32, const char *, const char *, const char *)</argsstring>
                <name>getProfileInt_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches the file filename under section section for the variable entry. If its value is a number, this number is returned as the functional result. If the file or entry is not found, or if entry does not contain a valid number, the default value def is returned as the functional result
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File path as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>def</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Default value in case of error as an integer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Integer that was read in </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long getProfileInt(char section[], char entry[], long def, char filename[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3193" column="39" declfile="CAPLPluginApi.h" declline="3193"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7bfe167abea71543eec6dbd403627377" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getProfileString_Internal</definition>
                <argsstring>(const char *, const char *, const char *, char *, __int32, const char *, const char *, const char *)</argsstring>
                <name>getProfileString_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches the file filename under section section for the variable entry. Its contents (value) are written to the buffer buff. Its length must be passed correctly in buffsize. If the file or entry is not found, the default value def is copied to buffer. If the read string length is longer than the buffer, the string will be cut to the buffer length
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable name as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File path as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buff</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer for the read-in numerical as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffsize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of buff in bytes (max. 1022 characters) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Length of the read string </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Length of the default string: Fault Key not found </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Fault File not found </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long getProfileString(char section[], char entry[], char def[], char buff[], long buffsize, char filename[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3207" column="39" declfile="CAPLPluginApi.h" declline="3207"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae95ad90ca77503e8ccc739ae4d135167" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>long</type>
                <definition>long capl::ErrorFrameCount</definition>
                <argsstring>(BYTE channel)</argsstring>
                <name>ErrorFrameCount</name>
                <param>
                    <type>BYTE</type>
                    <declname>channel</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the number of Error Frames on channel x since start of measurement
                        <simplesect kind="return">
                            <para>Number of Error Frames on channel x since start of measurement </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ErrorFrameCount () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3214" column="34" declfile="CAPLPluginApi.h" declline="3214"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3cf1d3a3677fd455bd1f96847d5e713a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::getSignal</definition>
                <argsstring>(ISignal &amp;var)</argsstring>
                <name>getSignal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Gets the value of a signal
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The signal to be polled </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>This function replaces getSignalByTxNode </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3221" column="36" declfile="CAPLPluginApi.h" declline="3221"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9a6bea0b7c35f56d07f092096c1f4b6a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setSignal</definition>
                <argsstring>(ISignal &amp;var, double value)</argsstring>
                <name>setSignal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the transmitted signal aSignal to the accompanying value
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal to be set </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Physical value to be accepted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>This function replaces SetSignalByTxNode </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3229" column="34" declfile="CAPLPluginApi.h" declline="3229"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1027e932b59e0da5ff048accea4b27a6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::getSignalByStringId</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getSignalByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3231" column="36" declfile="CAPLPluginApi.h" declline="3231"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abb8b406c2698cb1cfb12ff677bae86a2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setSignalByStringId</definition>
                <argsstring>(const char *sId, double value)</argsstring>
                <name>setSignalByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3232" column="34" declfile="CAPLPluginApi.h" declline="3232"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4bd15c9c27cab38eadbbe334a38328ac" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::getRawSignal</definition>
                <argsstring>(ISignal &amp;var)</argsstring>
                <name>getRawSignal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Retrieves the current raw value of a signal
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dbSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The signal </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Form 1: the current raw value of the signal </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Form 2: 0 on success, -1 on error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>Int64 GetRawSignal(dbSignal aSignal); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3241" column="39" declfile="CAPLPluginApi.h" declline="3241"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2e49071c44ceebdf2b3f42fad8e12dfd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getRawSignalArray</definition>
                <argsstring>(ISignal &amp;var, unsigned __int8 *data, __int32 dataLength)</argsstring>
                <name>getRawSignalArray</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>unsigned __int8 *</type>
                    <declname>data</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>dataLength</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Retrieves the current raw value of a signal
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dbSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The signal </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the data bytes of the signal </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dataLength</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the data buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Form 1: the current raw value of the signal </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Form 2: 0 on success, -1 on error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long GetRawSignal(dbSignal aSignal, byte data[], dword dataLength); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3252" column="39" declfile="CAPLPluginApi.h" declline="3252"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad2f4e015a66d5a13b835b2ed24ba8737" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setRawSignal</definition>
                <argsstring>(ISignal &amp;var, __int64 value)</argsstring>
                <name>setRawSignal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>__int64</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the raw value of a signal
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dbSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The signal </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Form 2: 0 on success, -1 on error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>void SetRawSignal(dbSignal aSignal, int64 value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3260" column="34" declfile="CAPLPluginApi.h" declline="3260"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0fdef4e029cb5c465e2d5388bf646cb8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::setRawSignalArray</definition>
                <argsstring>(ISignal &amp;var, unsigned __int8 *data, __int32 dataLength)</argsstring>
                <name>setRawSignalArray</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">ISignal</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>unsigned __int8 *</type>
                    <declname>data</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>dataLength</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the raw value of a signal
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dbSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The signal </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The data bytes of the signal </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dataLength</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the data </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Form 2: 0 on success, -1 on error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>void SetRawSignal(dbSignal aSignal, byte data[], dword dataLength); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3270" column="39" declfile="CAPLPluginApi.h" declline="3270"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afe58d4cc8abf5c9fb58dee84e7eff5a8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>INT16</type>
                <definition>INT16 capl::getValueIntByStringId</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueIntByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3282" column="35" declfile="CAPLPluginApi.h" declline="3282"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a87c272ae66e4b844e7784d7c9742654d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueLongByStringId</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueLongByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3283" column="39" declfile="CAPLPluginApi.h" declline="3283"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7d0bb0f089dcb2a8f913f97ecda4a44f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::getValueDoubleByStringId</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueDoubleByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3284" column="36" declfile="CAPLPluginApi.h" declline="3284"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5c3d2ce25cb1c2db6dd9a4dbb033caef" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>INT16</type>
                <definition>INT16 capl::getValueIntByStringName</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueIntByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3285" column="35" declfile="CAPLPluginApi.h" declline="3285"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa457df860be57aace5d6c04b903fd217" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueLongByStringName</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueLongByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3286" column="39" declfile="CAPLPluginApi.h" declline="3286"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad766e07fcdf23a94e3f8e36910221f12" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::getValueDoubleByStringName</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueDoubleByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3287" column="36" declfile="CAPLPluginApi.h" declline="3287"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a58b9ee4bf40ad8839e940809c5baac79" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>INT16</type>
                <definition>INT16 capl::getValueIntByObj</definition>
                <argsstring>(IEnvVar &amp;var)</argsstring>
                <name>getValueIntByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3291" column="35" declfile="CAPLPluginApi.h" declline="3291"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a873b00bd7a1de7d4140d9e2db126b6d3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::getValueDoubleByObj</definition>
                <argsstring>(IEnvVar &amp;var)</argsstring>
                <name>getValueDoubleByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3292" column="36" declfile="CAPLPluginApi.h" declline="3292"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7e041cefab53351d77ced1732320fa4f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueLongByObj</definition>
                <argsstring>(IEnvVar &amp;var)</argsstring>
                <name>getValueLongByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3293" column="39" declfile="CAPLPluginApi.h" declline="3293"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae9890537fc391b48dc3283a1d1ac06d4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueStringByObjBufferSize</definition>
                <argsstring>(IEnvVar &amp;var, char *pBuffer, __int32 size)</argsstring>
                <name>getValueStringByObjBufferSize</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>char *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3295" column="39" declfile="CAPLPluginApi.h" declline="3295"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9414639f72329bc095a44316857b9ee2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueStringByStringIdBufferSize</definition>
                <argsstring>(const char *sId, char *pBuffer, __int32 size)</argsstring>
                <name>getValueStringByStringIdBufferSize</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>char *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3296" column="39" declfile="CAPLPluginApi.h" declline="3296"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a07158fcbe8945fa990d494dce7ef8aee" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueStringByStringNameBufferSize</definition>
                <argsstring>(const char *sId, char *pBuffer, __int32 size)</argsstring>
                <name>getValueStringByStringNameBufferSize</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>char *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3297" column="39" declfile="CAPLPluginApi.h" declline="3297"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a59a2441818e6affbff90b28d227c230c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableDataByStringInternal</definition>
                <argsstring>(const char *namespaceName, const char *variable, BYTE *pBuffer, __int32 &amp;size, __int32 max)</argsstring>
                <name>SysGetVariableDataByStringInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>namespaceName</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>variable</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32 &amp;</type>
                    <declname>size</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>max</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3299" column="39" declfile="CAPLPluginApi.h" declline="3299"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a942a2c5081e9ee1c495a279a098a78db" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableDataByObjInternal</definition>
                <argsstring>(IEnvVar &amp;var, BYTE *pBuffer, __int32 &amp;size, __int32 max)</argsstring>
                <name>SysGetVariableDataByObjInternal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32 &amp;</type>
                    <declname>size</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>max</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3300" column="39" declfile="CAPLPluginApi.h" declline="3300"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1a2301aa6f9bc5298cb978be7594a2f8" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableDataByString</definition>
                <argsstring>(const char *namespaceName, const char *variable, T &amp;pBuffer, __int32 &amp;size)</argsstring>
                <name>SysGetVariableDataByString</name>
                <param>
                    <type>const char *</type>
                    <declname>namespaceName</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>variable</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32 &amp;</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3303" column="22" bodyfile="CAPLPluginApi.h" bodystart="3303"
                          bodyend="3306" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a71d1bcec89e58b8839c29aa329605926" prot="public"
                       static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableDataByObj</definition>
                <argsstring>(IEnvVar &amp;var, T &amp;pBuffer, __int32 &amp;size)</argsstring>
                <name>SysGetVariableDataByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32 &amp;</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3308" column="22" bodyfile="CAPLPluginApi.h" bodystart="3308"
                          bodyend="3311" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a491cda1f69a11139206cf3f1e5fe7681" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableStringByString</definition>
                <argsstring>(const char *namespaceName, const char *variable, const char *pBuffer)</argsstring>
                <name>SysSetVariableStringByString</name>
                <param>
                    <type>const char *</type>
                    <declname>namespaceName</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>variable</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>pBuffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3313" column="39" declfile="CAPLPluginApi.h" declline="3313"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adaae174fde992a7538924bab82c8deb6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableStringByObj</definition>
                <argsstring>(IEnvVar &amp;var, const char *pBuffer)</argsstring>
                <name>SysSetVariableStringByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>pBuffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3314" column="39" declfile="CAPLPluginApi.h" declline="3314"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adb0a1e80faca921749530a1527def2b0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableStringByString</definition>
                <argsstring>(const char *namespaceName, const char *variable, char *pBuffer, __int32 bufferSize)</argsstring>
                <name>SysGetVariableStringByString</name>
                <param>
                    <type>const char *</type>
                    <declname>namespaceName</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>variable</declname>
                </param>
                <param>
                    <type>char *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>bufferSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3316" column="39" declfile="CAPLPluginApi.h" declline="3316"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a11f475ffd3513e3dfeaf662b88e059e0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableStringByObj</definition>
                <argsstring>(IEnvVar &amp;var, char *pBuffer, __int32 bufferSize)</argsstring>
                <name>SysGetVariableStringByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>char *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>bufferSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3317" column="39" declfile="CAPLPluginApi.h" declline="3317"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0498644b56a75cb33a1ea909f402e6ee" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableDataByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, const BYTE *val, __int32 size)</argsstring>
                <name>SysSetVariableDataByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3319" column="39" declfile="CAPLPluginApi.h" declline="3319"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a745deb5aabbdd1150ea17d3fbf1fba64" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableDataByObj</definition>
                <argsstring>(IEnvVar &amp;var, const BYTE *val, __int32 size)</argsstring>
                <name>SysSetVariableDataByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3320" column="39" declfile="CAPLPluginApi.h" declline="3320"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad4b50c80ee4c3fce6969759d14db58b0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueStringByObj</definition>
                <argsstring>(IEnvVar &amp;var, T &amp;buffer)</argsstring>
                <name>getValueStringByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3324" column="15" bodyfile="CAPLPluginApi.h" bodystart="3324"
                          bodyend="3327" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a35964beac3233e9dace358da4e3c2f26" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueStringByStringName</definition>
                <argsstring>(const char *sId, T &amp;buffer)</argsstring>
                <name>getValueStringByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3330" column="15" bodyfile="CAPLPluginApi.h" bodystart="3330"
                          bodyend="3333" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae1ae60ced3e9fda40c55f6f9206c950f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueStringByStringId</definition>
                <argsstring>(const char *sId, T &amp;buffer)</argsstring>
                <name>getValueStringByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3335" column="15" bodyfile="CAPLPluginApi.h" bodystart="3335"
                          bodyend="3338" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1acc169c469372019c2f76b34740bf2bae" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayByObjBufferSize</definition>
                <argsstring>(IEnvVar &amp;var, BYTE *pBuffer, __int32 size)</argsstring>
                <name>getValueArrayByObjBufferSize</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3340" column="39" declfile="CAPLPluginApi.h" declline="3340"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a01e0453a6d511a6f4163aec32af33068" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayByStringIdBufferSize</definition>
                <argsstring>(const char *sId, BYTE *pBuffer, __int32 size)</argsstring>
                <name>getValueArrayByStringIdBufferSize</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3341" column="39" declfile="CAPLPluginApi.h" declline="3341"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa9a6d35fccef3d03b475ef3a4c005b83" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayByStringNameBufferSize</definition>
                <argsstring>(const char *sId, BYTE *pBuffer, __int32 size)</argsstring>
                <name>getValueArrayByStringNameBufferSize</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3342" column="39" declfile="CAPLPluginApi.h" declline="3342"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a86f9beddcfc6df8bed3949c288556908" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayByObj</definition>
                <argsstring>(IEnvVar &amp;var, T &amp;buffer)</argsstring>
                <name>getValueArrayByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3345" column="15" bodyfile="CAPLPluginApi.h" bodystart="3345"
                          bodyend="3348" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a29e33603524001e1c141cfe91e08966a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayByStringId</definition>
                <argsstring>(const char *sId, T &amp;buffer)</argsstring>
                <name>getValueArrayByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3351" column="15" bodyfile="CAPLPluginApi.h" bodystart="3351"
                          bodyend="3354" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae2f559fa10fb2678715fc8c8e23063a4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayByStringName</definition>
                <argsstring>(const char *sId, T &amp;buffer)</argsstring>
                <name>getValueArrayByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3356" column="15" bodyfile="CAPLPluginApi.h" bodystart="3356"
                          bodyend="3359" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afd1d8d4ae2eb4380964ef89ef7b69f15" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayOffsetByObj</definition>
                <argsstring>(IEnvVar &amp;var, BYTE *pBuffer, __int32 size, __int32 offset)</argsstring>
                <name>getValueArrayOffsetByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3360" column="39" declfile="CAPLPluginApi.h" declline="3360"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a33c02a1f7e6299bfd50f38d240bed02c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayOffsetByStringId</definition>
                <argsstring>(const char *sId, BYTE *pBuffer, __int32 size, __int32 offset)</argsstring>
                <name>getValueArrayOffsetByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3361" column="39" declfile="CAPLPluginApi.h" declline="3361"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abc628841e78cff22efb61e3f8c1a0d76" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayOffsetByStringName</definition>
                <argsstring>(const char *sId, BYTE *pBuffer, __int32 size, __int32 offset)</argsstring>
                <name>getValueArrayOffsetByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3362" column="39" declfile="CAPLPluginApi.h" declline="3362"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8d8f66aa7434b15d878a422b40e40725" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayOffsetByObj</definition>
                <argsstring>(IEnvVar &amp;var, T &amp;buffer, __int32 offset)</argsstring>
                <name>getValueArrayOffsetByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3365" column="15" bodyfile="CAPLPluginApi.h" bodystart="3365"
                          bodyend="3368" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8d522203407f3ffc707db42c30e37479" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayOffsetByStringId</definition>
                <argsstring>(const char *sId, T &amp;buffer, __int32 offset)</argsstring>
                <name>getValueArrayOffsetByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3371" column="15" bodyfile="CAPLPluginApi.h" bodystart="3371"
                          bodyend="3374" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a133eebb06858864b322342a8f0a07a4c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32</type>
                <definition>__int32 capl::getValueArrayOffsetByStringName</definition>
                <argsstring>(const char *sId, T &amp;buffer, __int32 offset)</argsstring>
                <name>getValueArrayOffsetByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3376" column="15" bodyfile="CAPLPluginApi.h" bodystart="3376"
                          bodyend="3379" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a58e16f9833cf5f7b63b54f4a47267589" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::SysGetVariableLongLongByString</definition>
                <argsstring>(const char *sNamespace, const char *sName)</argsstring>
                <name>SysGetVariableLongLongByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3381" column="39" declfile="CAPLPluginApi.h" declline="3381"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a325b517eac67c9916d05874e64b9ee91" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::SysGetVariableLongLongByObj</definition>
                <argsstring>(IEnvVar &amp;var)</argsstring>
                <name>SysGetVariableLongLongByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3382" column="39" declfile="CAPLPluginApi.h" declline="3382"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af2e003a8ac9fec1ad0ee719e046ebaaf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableFloatArrayByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, double *val, __int32 size)</argsstring>
                <name>SysGetVariableFloatArrayByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>double *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3383" column="39" declfile="CAPLPluginApi.h" declline="3383"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a28567829a7a10c883684e099fceba6c7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableFloatArrayByObj</definition>
                <argsstring>(IEnvVar &amp;var, double *val, __int32 size)</argsstring>
                <name>SysGetVariableFloatArrayByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>double *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3384" column="39" declfile="CAPLPluginApi.h" declline="3384"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a138d628776b4da3447bf87b332c0fbe6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableLongArrayByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, __int32 *val, __int32 size)</argsstring>
                <name>SysGetVariableLongArrayByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>__int32 *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3385" column="39" declfile="CAPLPluginApi.h" declline="3385"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a63a428b40c30a0e8830ec6310e88f10c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableLongArrayByObj</definition>
                <argsstring>(IEnvVar &amp;var, __int32 *val, __int32 size)</argsstring>
                <name>SysGetVariableLongArrayByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>__int32 *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3386" column="39" declfile="CAPLPluginApi.h" declline="3386"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3de3cdc16cd8defab5d9c5ecf54a2eab" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueIntByStringId</definition>
                <argsstring>(const char *sId, INT16 val)</argsstring>
                <name>putValueIntByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>INT16</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3399" column="34" declfile="CAPLPluginApi.h" declline="3399"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad5aa6e0b3b1a1f734ad54a21ec8f0086" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueLongByStringId</definition>
                <argsstring>(const char *sId, __int32 val)</argsstring>
                <name>putValueLongByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3400" column="34" declfile="CAPLPluginApi.h" declline="3400"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adbb6009d661e0d18e06d9668fb91e772" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueDoubleByStringId</definition>
                <argsstring>(const char *sId, double val)</argsstring>
                <name>putValueDoubleByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3401" column="34" declfile="CAPLPluginApi.h" declline="3401"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac3003ba54f53f29f10cd322342103a72" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueIntByStringName</definition>
                <argsstring>(const char *sId, INT16 val)</argsstring>
                <name>putValueIntByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>INT16</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3402" column="34" declfile="CAPLPluginApi.h" declline="3402"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4a6bbaa0fe9df0f260ed8ac8f748607a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueLongByStringName</definition>
                <argsstring>(const char *sId, __int32 val)</argsstring>
                <name>putValueLongByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3403" column="34" declfile="CAPLPluginApi.h" declline="3403"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae5dd19836c074f8ed22a02b8be9f43f9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueDoubleByStringName</definition>
                <argsstring>(const char *sId, double val)</argsstring>
                <name>putValueDoubleByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3404" column="34" declfile="CAPLPluginApi.h" declline="3404"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ade989611049ea95e2dfe6a88ee1d8554" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueIntByObj</definition>
                <argsstring>(IEnvVar &amp;var, INT16 val)</argsstring>
                <name>putValueIntByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>INT16</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3406" column="34" declfile="CAPLPluginApi.h" declline="3406"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7e7b8035d25c3837cecf3f6e3a97d2c4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueLongByObj</definition>
                <argsstring>(IEnvVar &amp;var, __int32 val)</argsstring>
                <name>putValueLongByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3407" column="34" declfile="CAPLPluginApi.h" declline="3407"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aecec8f41a15a80abcb85d684e5677b88" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueDoubleByObj</definition>
                <argsstring>(IEnvVar &amp;var, double val)</argsstring>
                <name>putValueDoubleByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3408" column="34" declfile="CAPLPluginApi.h" declline="3408"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab78abc4d6573b0656ac65b56d14f9cbf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueStringByObj</definition>
                <argsstring>(IEnvVar &amp;var, const char *val)</argsstring>
                <name>putValueStringByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3410" column="34" declfile="CAPLPluginApi.h" declline="3410"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adb27407655e0d44a2e020285c2c9e9ca" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueStringByStringId</definition>
                <argsstring>(const char *sId, const char *val)</argsstring>
                <name>putValueStringByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3411" column="34" declfile="CAPLPluginApi.h" declline="3411"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a81e394e2d4439b682b81e4dfe739708c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueStringByStringName</definition>
                <argsstring>(const char *sId, const char *val)</argsstring>
                <name>putValueStringByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3412" column="34" declfile="CAPLPluginApi.h" declline="3412"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a388500bcd9d5844d3a2e34723c416f44" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueArrayBufferSizeByObj</definition>
                <argsstring>(IEnvVar &amp;var, const BYTE *val, __int32 size)</argsstring>
                <name>putValueArrayBufferSizeByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3414" column="34" declfile="CAPLPluginApi.h" declline="3414"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a890417c9fda2e1516725c2c85fdbf7c2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueArrayBufferSizeByStringId</definition>
                <argsstring>(const char *sId, const BYTE *val, __int32 size)</argsstring>
                <name>putValueArrayBufferSizeByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3415" column="34" declfile="CAPLPluginApi.h" declline="3415"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6506399f24a4c8cf8b8131da0eaa314d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueArrayBufferSizeByStringName</definition>
                <argsstring>(const char *sId, const BYTE *val, __int32 size)</argsstring>
                <name>putValueArrayBufferSizeByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3416" column="34" declfile="CAPLPluginApi.h" declline="3416"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aef2f54797775ada3e9928c6e934bce81" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>void</type>
                <definition>void capl::putValueArrayByObj</definition>
                <argsstring>(IEnvVar &amp;var, T &amp;buffer)</argsstring>
                <name>putValueArrayByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3419" column="10" bodyfile="CAPLPluginApi.h" bodystart="3419"
                          bodyend="3422" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4794b7dbdccc537cfbfe1104e70ce97a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>void</type>
                <definition>void capl::putValueArrayByStringId</definition>
                <argsstring>(const char *sId, const T &amp;buffer)</argsstring>
                <name>putValueArrayByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3425" column="10" bodyfile="CAPLPluginApi.h" bodystart="3425"
                          bodyend="3428" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac8090ec7117e265d11019378c8560e79" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>void</type>
                <definition>void capl::putValueArrayByStringName</definition>
                <argsstring>(const char *sId, const T &amp;buffer)</argsstring>
                <name>putValueArrayByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <param>
                    <type>const T &amp;</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3430" column="10" bodyfile="CAPLPluginApi.h" bodystart="3430"
                          bodyend="3433" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a74c2cc9a3d42ec9c2795dea4253070b9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableFloatByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, double val)</argsstring>
                <name>SysSetVariableFloatByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of the double type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New value of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>SysVarName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the fully qualified name of the system variable, including all name spaces, separated by &quot;::&quot;. The name must be preceded by &quot;sysVar::&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableFloat(char namespace[], char variable[], float value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3448" column="39" declfile="CAPLPluginApi.h" declline="3448"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a82aaa65a40fbffadbeeac370518d3e9e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableFloatByObj</definition>
                <argsstring>(IEnvVar &amp;var, double val)</argsstring>
                <name>SysSetVariableFloatByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of the double type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New value of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableFloat(SysVarName, float value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3461" column="39" declfile="CAPLPluginApi.h" declline="3461"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae521e675f99a34ef91d9f51fc390c0ff" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableIntByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, __int32 val)</argsstring>
                <name>SysSetVariableIntByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of a 32 bit integer type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>SysVarName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the fully qualified name of the system variable, including all name spaces, separated by &quot;::&quot;. The name must be preceded by &quot;sysVar::&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New value of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableInt(char namespace[], char variable[], long value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3475" column="39" declfile="CAPLPluginApi.h" declline="3475"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5355203a2d58a342274a70c4e4edce84" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableIntByObj</definition>
                <argsstring>(IEnvVar &amp;var, __int32 val)</argsstring>
                <name>SysSetVariableIntByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of a 32 bit integer type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New value of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableInt(SysVarName, long value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3488" column="39" declfile="CAPLPluginApi.h" declline="3488"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa4b59aa90f1887785a09c7a4fcaff5ac" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableLongLongByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, long long val)</argsstring>
                <name>SysSetVariableLongLongByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>long long</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of a 64 bit integer type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>SysVarName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the fully qualified name of the system variable, including all name spaces, separated by &quot;::&quot;. The name must be preceded by &quot;sysVar::&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New value of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found 2: variable was not found 3: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableLongLong(char namespace[], char variable[], int64 value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3501" column="39" declfile="CAPLPluginApi.h" declline="3501"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a15ef214f3c2e69898e6a0c96b927da88" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableLongLongByObj</definition>
                <argsstring>(IEnvVar &amp;var, long long val)</argsstring>
                <name>SysSetVariableLongLongByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>long long</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of a 64 bit integer type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New value of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found 2: variable was not found 3: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableLongLong(SysVarName, int64 value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3513" column="39" declfile="CAPLPluginApi.h" declline="3513"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac4a41cbb8cf04c3ffe05008158d7d13c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableFloatArrayByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, const double *val, __int32 size)</argsstring>
                <name>SysSetVariableFloatArrayByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>const double *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of the float[] type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>SysVarName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the fully qualified name of the system variable, including all name spaces, separated by &quot;::&quot;. The name must be preceded by &quot;sysVar::&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>values</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New values of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>arraySize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of values in the array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableFloatArray(char namespace[], char variable[], float values[], long arraySize); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3528" column="39" declfile="CAPLPluginApi.h" declline="3528"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae31139a8e35dae3c3a4670244b4770e9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableFloatArrayByObj</definition>
                <argsstring>(IEnvVar &amp;var, const double *val, __int32 size)</argsstring>
                <name>SysSetVariableFloatArrayByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>const double *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of the float[] type.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>values</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New values of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>arraySize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of values in the array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableFloatArray(SysVarName,float values[], long arraySize); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3542" column="39" declfile="CAPLPluginApi.h" declline="3542"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0095866a0610848e12405612e95aaf32" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableLongArrayByString</definition>
                <argsstring>(const char *sNamespace, const char *sName, const __int32 *val, __int32 size)</argsstring>
                <name>SysSetVariableLongArrayByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <param>
                    <type>const __int32 *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of the int[] type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>SysVarName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the fully qualified name of the system variable, including all name spaces, separated by &quot;::&quot;. The name must be preceded by &quot;sysVar::&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>values</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Values of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>arraySize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of values in the array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableLongArray(char namespace[], char variable[], long values[], long arraySize); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3557" column="39" declfile="CAPLPluginApi.h" declline="3557"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac5ebd8edacb1dbcddc229dfd201b1657" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysSetVariableLongArrayByObj</definition>
                <argsstring>(IEnvVar &amp;var, const __int32 *val, __int32 size)</argsstring>
                <name>SysSetVariableLongArrayByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>const __int32 *</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the value of a variable of the int[] type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>values</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Values of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>arraySize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of values in the array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: no error, function successful 1: name space was not found or second try to define the same name space 2: variable was not found or second try to define the same variable 3: no writing right for the name space available 4: the variable has no suitable type for the function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysSetVariableLongArray(SysVarName, long values[], long arraySize); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3571" column="39" declfile="CAPLPluginApi.h" declline="3571"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8fe88fc0faa1b253efaf69adc2e3071c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableArrayLengthByString</definition>
                <argsstring>(const char *sNamespace, const char *sName)</argsstring>
                <name>SysGetVariableArrayLengthByString</name>
                <param>
                    <type>const char *</type>
                    <declname>sNamespace</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the length of the array of the system variable
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>SysVarName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the fully qualified name of the system variable, including all name spaces, separated by &quot;::&quot;. The name must be preceded by &quot;sysVar::&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>For system variables of type data, returns the current size (in bytes) of the value. For system variables of type long or float array, returns the number of elements in the array. For system variables of type string, returns the length of the string, excluding the terminating 0 character. For system variables of type long or float, returns 1. </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword sysGetVariableArrayLength(char namespace[], char variable[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3583" column="39" declfile="CAPLPluginApi.h" declline="3583"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a21a63c3a16eaedaf58ca076d667ccac0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableArrayLengthByObj</definition>
                <argsstring>(IEnvVar &amp;var)</argsstring>
                <name>SysGetVariableArrayLengthByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the length of the array of the system variable
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>For system variables of type data, returns the current size (in bytes) of the value. For system variables of type long or float array, returns the number of elements in the array. For system variables of type string, returns the length of the string, excluding the terminating 0 character. For system variables of type long or float, returns 1. </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword sysGetVariableArrayLength(SysVarName); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3594" column="39" declfile="CAPLPluginApi.h" declline="3594"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab987530551b460c4aede69fb45c14658" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; char &gt; &amp;</type>
                <definition>IAccess&lt; char &gt; &amp; capl::GetSysVarArrayChar</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayChar</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3608" column="37" declfile="CAPLPluginApi.h" declline="3608"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae659d5b12b4fed677221ab737ac7d977" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; unsigned char &gt; &amp;</type>
                <definition>IAccess&lt; unsigned char &gt; &amp; capl::GetSysVarArrayUChar</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayUChar</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3609" column="37" declfile="CAPLPluginApi.h" declline="3609"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5137a4826f6b3446779fa13f6d3dc3d4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; long &gt; &amp;</type>
                <definition>IAccess&lt; long &gt; &amp; capl::GetSysVarArrayLong</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayLong</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3610" column="37" declfile="CAPLPluginApi.h" declline="3610"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab78a541722e0766c07fa734a129a207f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; unsigned long &gt; &amp;</type>
                <definition>IAccess&lt; unsigned long &gt; &amp; capl::GetSysVarArrayULong</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayULong</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3611" column="37" declfile="CAPLPluginApi.h" declline="3611"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae05875b8c21b2dbef6a1ed3d8db53558" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; long long &gt; &amp;</type>
                <definition>IAccess&lt; long long &gt; &amp; capl::GetSysVarArrayLongLong</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayLongLong</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3612" column="37" declfile="CAPLPluginApi.h" declline="3612"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac9761983891ad916c544b50fa5fa003b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; unsigned long long &gt; &amp;</type>
                <definition>IAccess&lt; unsigned long long &gt; &amp; capl::GetSysVarArrayULongLong</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayULongLong</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3613" column="37" declfile="CAPLPluginApi.h" declline="3613"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa9065bc720ba0c86bf244c4f072720b5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; double &gt; &amp;</type>
                <definition>IAccess&lt; double &gt; &amp; capl::GetSysVarArrayDouble</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayDouble</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3614" column="37" declfile="CAPLPluginApi.h" declline="3614"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4c7b8a262b64f8837a9eb444a00ff8aa" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; short &gt; &amp;</type>
                <definition>IAccess&lt; short &gt; &amp; capl::GetSysVarArrayShort</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayShort</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3615" column="37" declfile="CAPLPluginApi.h" declline="3615"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a45cd4295a1d009a90e86aab1829757a6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; unsigned short &gt; &amp;</type>
                <definition>IAccess&lt; unsigned short &gt; &amp; capl::GetSysVarArrayUShort</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayUShort</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3616" column="37" declfile="CAPLPluginApi.h" declline="3616"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac61507cc01012adad8d934a003cd6038" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="classcapl_1_1_i_access" kindref="compound">IAccess</ref>&lt; float &gt; &amp;</type>
                <definition>IAccess&lt; float &gt; &amp; capl::GetSysVarArrayFloat</definition>
                <argsstring>(IEnvVar &amp;var, size_t pos)</argsstring>
                <name>GetSysVarArrayFloat</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3617" column="37" declfile="CAPLPluginApi.h" declline="3617"
                          declcolumn="37" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6982a9a9081f764cd9715479af2dd033" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>INT16</type>
                <definition>INT16 capl::getValueSizeByStringName</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueSizeByStringName</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3622" column="35" declfile="CAPLPluginApi.h" declline="3622"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a34f0552b8f833019ab041558747e623a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>INT16</type>
                <definition>INT16 capl::getValueSizeByStringId</definition>
                <argsstring>(const char *sId)</argsstring>
                <name>getValueSizeByStringId</name>
                <param>
                    <type>const char *</type>
                    <declname>sId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3623" column="35" declfile="CAPLPluginApi.h" declline="3623"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a630a2c9cd2375eec85123a1f3c5a16d8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>INT16</type>
                <definition>INT16 capl::getValueSizeByObj</definition>
                <argsstring>(IEnvVar &amp;var)</argsstring>
                <name>getValueSizeByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>var</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the size of the environment variable value in bytes
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>EnvVarNamem</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Environment variable name. Must exist in the database </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Size of the data in bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int getValueSize(EnvVarName); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3631" column="35" declfile="CAPLPluginApi.h" declline="3631"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa5f19249278cf3181fe3a633268c375f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::isExtIdById</definition>
                <argsstring>(DWORD dwMsgId)</argsstring>
                <name>isExtIdById</name>
                <param>
                    <type>DWORD</type>
                    <declname>dwMsgId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks parameter for extended identifier (29 bit) or standard identifier (11 Bit)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Id part of a message </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if check was successful, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long isExtId(dword id); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3640" column="39" declfile="CAPLPluginApi.h" declline="3640"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a02c92968c635106ce308dda9dc5ca24a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::isExtIdByObj</definition>
                <argsstring>(capl::IMessage &amp;m)</argsstring>
                <name>isExtIdByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                    <declname>m</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks parameter for extended identifier (29 bit) or standard identifier (11 Bit)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Id part of a message </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if check was successful, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long isStdId(message m); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3648" column="39" declfile="CAPLPluginApi.h" declline="3648"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af2ff018e1f2da210041e99ff7dc7bf27" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::isStdIdById</definition>
                <argsstring>(DWORD dwMsgId)</argsstring>
                <name>isStdIdById</name>
                <param>
                    <type>DWORD</type>
                    <declname>dwMsgId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks parameter for extended identifier (29 bit) or standard identifier (11 Bit)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Id part of a message </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if check was successful, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long isStdId(dword id); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3657" column="39" declfile="CAPLPluginApi.h" declline="3657"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7a10a546a730635b6f54f437cd77b660" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::isStdIdByObj</definition>
                <argsstring>(capl::IMessage &amp;m)</argsstring>
                <name>isStdIdByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                    <declname>m</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks parameter for extended identifier (29 bit) or standard identifier (11 Bit)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>of type message </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Part of a message </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if check was successful, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long isStdId(message m); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3666" column="39" declfile="CAPLPluginApi.h" declline="3666"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a60b7686ee38d2393730e37ad8139be91" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::MakeRGB</definition>
                <argsstring>(__int32, __int32, __int32)</argsstring>
                <name>MakeRGB</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Calculates the color value from the three primary color components
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Red</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Red color component (0 - 255) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Green</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Green color component (0 - 255) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Blue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Blue color component (0 - 255) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Color value (type: long) </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long MakeRGB(long Red, long Green, long Blue); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3676" column="39" declfile="CAPLPluginApi.h" declline="3676"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ada234cabb66f01b3cdc40530c67559ab" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::mkExtId</definition>
                <argsstring>(DWORD)</argsstring>
                <name>mkExtId</name>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns an extended id
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>part of a message </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Extended identifier </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword mkExtId(dword id); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3684" column="35" declfile="CAPLPluginApi.h" declline="3684"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aecfd9ed356387dd6e017e0bb13ba7c8f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::outputInternal</definition>
                <argsstring>(capl::IMessage &amp;)</argsstring>
                <name>outputInternal</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Outputs a message
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>msg</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable of type message </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void output(message msg); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3691" column="34" declfile="CAPLPluginApi.h" declline="3691"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa0534510fb78709326a69f01d90ea36d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::outputEthernetPacket</definition>
                <argsstring>(capl::IEthernetPacket &amp;)</argsstring>
                <name>outputEthernetPacket</name>
                <param>
                    <type>
                        <ref refid="classcapl_1_1_i_ethernet_packet" kindref="compound">capl::IEthernetPacket</ref>
                        &amp;
                    </type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Outputs a Ethernet packet from the program block
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable of type ethernetPacket </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void output(ethernetPacket packet); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3698" column="34" declfile="CAPLPluginApi.h" declline="3698"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9ca7c81a222d008d28c5192ff37886f2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::setBtr</definition>
                <argsstring>(__int32, BYTE, BYTE)</argsstring>
                <name>setBtr</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>BYTE</type>
                </param>
                <param>
                    <type>BYTE</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets another baud rate. The values do not become active until the next call of the function resetCan
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CAN</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>channel 0: All controllers; 1 - 32: channel 1 - 32 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>BTR0</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value of Bit Timing Register 0 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>BTR1</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value of Bit Timing Register 1 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Always 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long setBtr(long channel, byte btr0, byte btr1); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3708" column="39" declfile="CAPLPluginApi.h" declline="3708"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5011ee21fc0572269d5fe3a138b46443" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::snprintf</definition>
                <argsstring>(char *, __int32, const char *,...)</argsstring>
                <name>snprintf</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        long snprintf(char dest[], long len, char format[], ...);
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Character buffer to print to </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>len</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum number of characters printed to buffer including terminating &apos;\0&apos;. Must be at most the size of the buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>format</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Formatted string printed to buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The number of characters written </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long snprintf(char dest[], long len, char format[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3718" column="39" declfile="CAPLPluginApi.h" declline="3718"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab3fea0f693ba136ea2b5681b76320ecd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::stop</definition>
                <argsstring>()</argsstring>
                <name>stop</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Programmed interrupt of the ongoing measurement.In offline mode this function interrupts but does not end the measurement. In offline mode the measurement can only be ended with &lt;ESC&gt;
                        <simplesect kind="note">
                            <para>void stop(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3724" column="34" declfile="CAPLPluginApi.h" declline="3724"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aca66e0ee7e0abbfa811c95b77da3ea2f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::strncpy</definition>
                <argsstring>(char *, const char *, INT32)</argsstring>
                <name>strncpy</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>INT32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function copies src to dest. len indicates the size of the string that shall be copied. The function ensures that there is a terminating &apos;\0&apos;. Thus, a maximum of len-1 characters are copied
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>len</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of the string to be copied. Must not be larger than the size of dest. If it is larger than the size of src, characters are copied until a terminating &apos;\0&apos; is encountered. A maximum of len-1 characters are copied </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void strncpy(char dest[], char src[], long len); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3737" column="34" declfile="CAPLPluginApi.h" declline="3737"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a52ae755670822a9e9a77ef6b1bd257fa" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strstr</definition>
                <argsstring>(const char *, const char *)</argsstring>
                <name>strstr</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches in s1 for s2
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s1</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>First string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s2</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Second string </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>First position of s2 in s1, or -1 if s2 is not found in s1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long strstr(char s1[], char s2[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3746" column="39" declfile="CAPLPluginApi.h" declline="3746"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae60e1629ca853f20cdb927f9f12d1005" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strstr_off</definition>
                <argsstring>(const char *, __int32, const char *)</argsstring>
                <name>strstr_off</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches in s1 for s2
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s1</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>First string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>offset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Offset in s1 at which the search shall be started </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s2</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Second string </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>First position of s2 in s1, or -1 if s2 is not found in s1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long strstr_off(char s1[], long offset, char s2[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3756" column="39" declfile="CAPLPluginApi.h" declline="3756"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6c8a4a3b28aa43b7cf324dd958370f7e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strncmp</definition>
                <argsstring>(const char *, const char *, __int32, __int32)</argsstring>
                <name>strncmp</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function compares s1 with s2 for a maximum of len characters. If they are identical the functional result is 0. If s1 is less than s2 the result is -1, else +1
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s1</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>First string ]param s2 Second string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>len</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum number of characters to compare </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1 if s1 is less than s2 </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1 if s2 is less than s1 </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0 if the strings are equal </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long strncmp(char s1[], char s2[], long len); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3768" column="39" declfile="CAPLPluginApi.h" declline="3768"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3e1207538d03878909e26667b2460d9c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strncmp_off</definition>
                <argsstring>(const char *, __int32, const char *, __int32, __int32)</argsstring>
                <name>strncmp_off</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function starts the comparison in s2 at the specified offset
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s1</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>First string ]param s2 Second string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>len</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum number of characters to compare </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1 if s1 is less than s2 </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1 if s2 is less than s1 </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0 if the strings are equal </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long strncmp(char s1[], char s2[], long s2offset, long len) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3780" column="39" declfile="CAPLPluginApi.h" declline="3780"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1acff508bfbc9c9409b89bc7d158ea2ec4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::strncpy_off</definition>
                <argsstring>(char *, __int32, const char *, __int32)</argsstring>
                <name>strncpy_off</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function copies src to dest. max indicates the size of dest. The function ensures that there is a terminating &apos;\0&apos;. Thus, a maximum of max-1-destOffset characters are copied. Characters are overwritten in dest starting at destOffset
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>destOffset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Offset in destination buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>max</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Is used to determine the maximum number of copied characters. Must not be larger than the size of dest. A maximum of max-1-destOffset characters are copied.If src is shorter than that, characters are only copied until a terminating &apos;\0&apos; is encountered </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void strncpy_off(char dest[], long destOffset, char src[], long max); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3790" column="34" declfile="CAPLPluginApi.h" declline="3790"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a34e082cb9166bdc6fd2efee08f932137" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::substr_cpy</definition>
                <argsstring>(char *, const char *, __int32, __int32, __int32)</argsstring>
                <name>substr_cpy</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function copies a substring of src to dest. max indicates the size of dest. The function ensures that there is a terminating &apos;\0&apos;. Thus, a maximum of max-1 characters are copied
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>srcStart</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Start index in src of substring </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>len</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the substring, or -1 to copy the string until the end </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>max</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of dest </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void substr_cpy(char dest[], char src[], long srcStart, long len, long max); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3801" column="34" declfile="CAPLPluginApi.h" declline="3801"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae51e8c33dd4ffa86e47dc0217910c242" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::substr_cpy_off</definition>
                <argsstring>(char *, __int32, const char *, __int32, __int32, __int32)</argsstring>
                <name>substr_cpy_off</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function copies a substring of src to dest. max indicates the the size of dest
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>destOffset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Offset in destination buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>srcStart</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Start index in src of substring </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>len</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the substring, or -1 to copy the string until the end </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>max</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of dest </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void substr_cpy_off(char dest[], long destOffset, char src[], long srcStart, long len, long max) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3813" column="34" declfile="CAPLPluginApi.h" declline="3813"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa3c455a7cc7db2bc3a5211c5db6a45d2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::mbstrncpy_off_internal</definition>
                <argsstring>(char *dest, long destSize, const char *src, long srcSize)</argsstring>
                <name>mbstrncpy_off_internal</name>
                <param>
                    <type>char *</type>
                    <declname>dest</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>destSize</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>src</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>srcSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3815" column="34" declfile="CAPLPluginApi.h" declline="3815"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af67e824f92ca8de43d024b6431f80c79" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class D</type>
                    </param>
                    <param>
                        <type>class S</type>
                    </param>
                </templateparamlist>
                <type>void</type>
                <definition>void capl::mbstrncpy_off</definition>
                <argsstring>(D &amp;dest, long destOffset, S &amp;src, long len)</argsstring>
                <name>mbstrncpy_off</name>
                <param>
                    <type>D &amp;</type>
                    <declname>dest</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>destOffset</declname>
                </param>
                <param>
                    <type>S &amp;</type>
                    <declname>src</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>len</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3817" column="10" bodyfile="CAPLPluginApi.h" bodystart="3817"
                          bodyend="3824" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa388cfe148d3c87892cf9bbd8e47a89d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class D</type>
                    </param>
                    <param>
                        <type>class S</type>
                    </param>
                </templateparamlist>
                <type>void</type>
                <definition>void capl::mbstrncpy</definition>
                <argsstring>(D &amp;dest, S &amp;src, long len)</argsstring>
                <name>mbstrncpy</name>
                <param>
                    <type>D &amp;</type>
                    <declname>dest</declname>
                </param>
                <param>
                    <type>S &amp;</type>
                    <declname>src</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>len</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3826" column="10" bodyfile="CAPLPluginApi.h" bodystart="3826"
                          bodyend="3829" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae29c425d6a2492120f11ab48c36a7825" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::SysGetVariableFloat</definition>
                <argsstring>(const char *, const char *)</argsstring>
                <name>SysGetVariableFloat</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of a variable of the double type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value of the variable or 0 in case of error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>double sysGetVariableFloat(char namespace[], char variable[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3838" column="36" declfile="CAPLPluginApi.h" declline="3838"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae32c07ecfc9f02b0812562e3f7f88887" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::SysGetVariableInt</definition>
                <argsstring>(const char *, const char *)</argsstring>
                <name>SysGetVariableInt</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of a variable of a 32 bit integer typev
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>namespace</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the name space </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value of the variable or 0 in case of error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysGetVariableInt(char namespace[], char variable[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3847" column="39" declfile="CAPLPluginApi.h" declline="3847"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3ff43e5c294155b605b6d015566bd3dd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::valOfId</definition>
                <argsstring>(DWORD)</argsstring>
                <name>valOfId</name>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of a message identifier independent of its type. Identifier as long value
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Identifier as long value </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long valOfId(dword id); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3855" column="39" declfile="CAPLPluginApi.h" declline="3855"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abf64524fef3ce15b8a298c35fe8396fe" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::msgvalOfId</definition>
                <argsstring>(capl::IMessage &amp;)</argsstring>
                <name>msgvalOfId</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of a message identifier independent of its type. Identifier as long value
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>message</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Identifier as long value long valOfId(message m); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3863" column="39" declfile="CAPLPluginApi.h" declline="3863"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa1921529d387a7dbc0e0971d5431d726" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::writeProfileFloat_Internal</definition>
                <argsstring>(const char *, const char *, double, const char *, const char *, const char *)</argsstring>
                <name>writeProfileFloat_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Opens the file filename, searches the section section and writes the variable entry with the value value. If entry already exists the old value is overwritten
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of the file as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable name as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value as a float </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File path as a string </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The functional result is 0 in case of an error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long writeProfileFloat(char section[], char entry[], float value, char filename[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3874" column="39" declfile="CAPLPluginApi.h" declline="3874"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae31c95cdcdbcdb7d205814eafbeda439" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::writeProfileInt_Internal</definition>
                <argsstring>(const char *, const char *, __int32, const char *, const char *, const char *)</argsstring>
                <name>writeProfileInt_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Opens the file filename, searches the section section and writes the variable entry with the value value. If entry already exists the old value is overwritten
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of the file as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable name as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value as a float </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File path as a string </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The functional result is 0 in case of an error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long writeProfileInt(char section[], char entry[], long value, char filename[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3885" column="39" declfile="CAPLPluginApi.h" declline="3885"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7fb97fb80a38f137fb4ba4bba803af1c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::writeProfileString_Internal</definition>
                <argsstring>(const char *, const char *, const char *, const char *, const char *, const char *)</argsstring>
                <name>writeProfileString_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Opens the file filename, searches the section section and writes the variable entry with the value value. If entry already exists the old value is overwritten. The functional result is the number of characters written or 0 in case of an error
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>section</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Section of the file as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>entry</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable name as a string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value as a float </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File path as a string </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>long writeProfileString(char section[], char entry[], char value[], char filename[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3895" column="39" declfile="CAPLPluginApi.h" declline="3895"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a213112af5994d4eae6c7e56dcf1053dd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::beep</definition>
                <argsstring>(short, short)</argsstring>
                <name>beep</name>
                <param>
                    <type>short</type>
                </param>
                <param>
                    <type>short</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Tone output. In the Windows Version the parameter duration has no effect
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>freq</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Integer for tone pitch. In the Windows version, the parameters freq defines the tone output. Different sounds are defined in the section [SOUND] in the file WIN.ini: freq 0x0000 (SystemDefault) freq 0x0010 (SystemHand) freq 0x0020 (SystemQuestion) freq 0x0030 (SystemExclamation) freq 0x0040 (SystemAsterisk) freq 0xFFFF Standard Beep </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>duration</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Integer for tone length </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void beep(int freq, int duration); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3911" column="34" declfile="CAPLPluginApi.h" declline="3911"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a032dd5008bec3f77b0569348220c798d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetBusLoad</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetBusLoad</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current busload of the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current busload of the specified channel in percent </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetBusLoad (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3921" column="39" declfile="CAPLPluginApi.h" declline="3921"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad5b96f390373a212df4010bcd3290b77" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetChipState</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetChipState</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current chip state of the specified CAN controller
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Chip state of the specified CAN controller. See the following table for a description of the return values 0 Value not available 1 Simulated 3 Error Active 4 Warning Level 5 Error Passive 6 Bus Off </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetChipState (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3935" column="39" declfile="CAPLPluginApi.h" declline="3935"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abfe22fe2687c8b72dbf6f944b52f8cce" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetErrorCount</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetErrorCount</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the number of Error Frames on the specified channel since start of measurement
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of Error Frames on the specified channel since start of measurement </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetErrorCount (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3945" column="39" declfile="CAPLPluginApi.h" declline="3945"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5cd07c3fd982bf66489add5342e1a2df" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetErrorRate</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetErrorRate</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current rate of CAN error messages of the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current Rate of CAN error messages on the specified channel in messages per second </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetErrorRate(long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3955" column="39" declfile="CAPLPluginApi.h" declline="3955"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a86b833e2ee1db27fa0275d0de58c39ec" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetExtData</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetExtData</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the number of extended CAN frames on the specified channel since start of measurement
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of extended CAN frames on the specified channel since start of measurement </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetExtData (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3965" column="39" declfile="CAPLPluginApi.h" declline="3965"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9c14961f31a9ad2f2e9eb7d2721a49f4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetExtDataRate</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetExtDataRate</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current rate of extended CAN frames on the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current rate of extended CAN frames on the specified channel in messages per second </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetExtDataRate(long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3975" column="39" declfile="CAPLPluginApi.h" declline="3975"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a32872eed972023e58754bf63a32359bf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetExtRemote</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetExtRemote</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the number of extended remote CAN messages on the specified channel since start of measurement
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of extended remote CAN messages on the specified channel since start of measurement </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetExtRemote (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3985" column="39" declfile="CAPLPluginApi.h" declline="3985"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2aee13d5b064ce77ded425d624cc9eef" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetExtRemoteRate</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetExtRemoteRate</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current rate of extended remote CAN messages on the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current rate of extended remote CAN messages on the specified channel in frames per second </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetExtRemoteRate (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="3995" column="39" declfile="CAPLPluginApi.h" declline="3995"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa58ddff1a5bfc13663f1abaf813a2eb0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetOverloadCount</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetOverloadCount</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the number of CAN overload frames on the specified channel since start of measurement
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of CAN overload frames on the specified channel since start of measurement </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetOverloadCount (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4005" column="39" declfile="CAPLPluginApi.h" declline="4005"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2c0ac948a04bf1f495e9d584d1ad693f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetOverloadRate</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetOverloadRate</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current rate of CAN overload frames on the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current rate of CAN overload frames on the specified channel in messages per second </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetOverloadRate (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4015" column="39" declfile="CAPLPluginApi.h" declline="4015"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1c4e06a56dd6b12bd0fced71d1fd8a8a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetPeakLoad</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetPeakLoad</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the peakload of the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Peakload of the specified channel in percent </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetPeakLoad (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4025" column="39" declfile="CAPLPluginApi.h" declline="4025"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3342cd851325f866d435a0cb1d61a01b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetRxErrorCount</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetRxErrorCount</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current RX error count in the receiver of the specified CAN channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current error count in the receiver of the specified CAN channel </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetRxErrorCount (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4035" column="39" declfile="CAPLPluginApi.h" declline="4035"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a10dfaf25a13d0873a7d0d247a99973b8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetStdData</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetStdData</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the number of standard CAN frames on the specified channel since start of measurement
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of standard CAN frames on the specified channel since start of measurement </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetStdData (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4045" column="39" declfile="CAPLPluginApi.h" declline="4045"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab84e2798a5157adc985d4e0745801471" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetStdDataRate</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetStdDataRate</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current rate of standard CAN frames on the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current rate of standard CAN frames on the specified channel in messages per second </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetStdDataRate (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4055" column="39" declfile="CAPLPluginApi.h" declline="4055"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae3991ab2d64ade16bc107946e62f1a1c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetStdRemote</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetStdRemote</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the number of standard remote CAN frames on the specified channel since start of measurement
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of standard remote CAN frames on the specified channel since start of measurement </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetStdRemote (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4065" column="39" declfile="CAPLPluginApi.h" declline="4065"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a91cfdef64228d76e8c0ef9ce0afa14ba" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetStdRemoteRate</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetStdRemoteRate</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current rate of standard remote CAN frames of the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current rate of standard remote CAN frames of the specified channel in messages per second </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetStdRemoteRate (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4075" column="39" declfile="CAPLPluginApi.h" declline="4075"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2be8b0a7d86a81cfe3f8d624a60ecea0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canGetTxErrorCount</definition>
                <argsstring>(__int32)</argsstring>
                <name>canGetTxErrorCount</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the current number of TX errors in the CAN receiver of the specified channel
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel Vector API driver Values 1 ... 32 Softing API driver Values 1, 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Current number of errors in the CAN receiver of the specified channel </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canGetTxErrorCount (long channel) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4085" column="39" declfile="CAPLPluginApi.h" declline="4085"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8974dd817235a45479df72b70cd681af" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canSetChannelAcc</definition>
                <argsstring>(__int32, DWORD, DWORD)</argsstring>
                <name>canSetChannelAcc</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Via an acceptance filter the CAN controllers control which received messages are sent through to CANoe
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CAN</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>channel </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Acceptance</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>code for ID filtering </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Acceptance</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>mask for ID filtering </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: ok </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>!=0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canSetChannelAcc(long channel, dword code, dword mask); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4096" column="39" declfile="CAPLPluginApi.h" declline="4096"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad0682547d54e9566c2fce6c45a307c20" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canSetChannelMode</definition>
                <argsstring>(__int32, __int32, __int32)</argsstring>
                <name>canSetChannelMode</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Activates/deactivates the TXRQ and Tx of the CAN controller. This function does nothing with the Ack bit
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CAN</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>channel gtx 0 tx off 1 tx on </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>gtxreq</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>0 gtxreq off 1 gtxreq on </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: ok </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>!=0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canSetChannelMode(long channel, long gtx, long gtxreq); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4110" column="39" declfile="CAPLPluginApi.h" declline="4110"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7503092f564680c892889dc2883d0f06" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::canSetChannelOutput</definition>
                <argsstring>(__int32, __int32)</argsstring>
                <name>canSetChannelOutput</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Defines the response of the CAN controller to the bus traffic and sets the ACK bit
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CAN</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>channel </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>silent</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>0 silent 1 normal </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: ok </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>!=0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long canSetChannelOutput(long channel, long silent); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4122" column="39" declfile="CAPLPluginApi.h" declline="4122"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a263a92a61acfcdce5000d6714b42b131" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileClose</definition>
                <argsstring>(unsigned __int32)</argsstring>
                <name>fileClose</name>
                <param>
                    <type>unsigned</type>
                    <declname>__int32</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function closes the specified file
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>The</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>integer contains the handle to the file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If an error occurs the return value is 0, else 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileClose (dword fileHandle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4130" column="39" declfile="CAPLPluginApi.h" declline="4130"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a59e864041fbd733fc969a1570090fa5b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileGetBinaryBlock</definition>
                <argsstring>(BYTE *, __int32, unsigned __int32)</argsstring>
                <name>fileGetBinaryBlock</name>
                <param>
                    <type>BYTE *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>unsigned</type>
                    <declname>__int32</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function reads characters from the specified file in binary format
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buff</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffsize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum of buffsize characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileHandle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The function returns the number of characters read </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileGetBinaryBlock (byte buff[], long buffsize, dword fileHandle) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4140" column="39" declfile="CAPLPluginApi.h" declline="4140"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aedf2d7b1b01609045f5de200fdf85e96" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileGetString</definition>
                <argsstring>(char *, __int32, unsigned __int32)</argsstring>
                <name>fileGetString</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>unsigned</type>
                    <declname>__int32</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function reads a string from the specified file into the buffer buff. Characters are read until the end of line is reached or the number of read characters is equal to buffsize -1. The end of line is marked either by a single line feed or a carriage return and a line feed (DOS file)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buff</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer for the read-out string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffsize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileHandle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If an error occurs, the return value is 0, else 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileGetString (char buff[], long buffsize, dword fileHandle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4152" column="41" declfile="CAPLPluginApi.h" declline="4152"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a081f2f2575ed606ef8e23c23a7d04b16" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileGetStringSZ</definition>
                <argsstring>(char *, __int32, unsigned __int32)</argsstring>
                <name>fileGetStringSZ</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>unsigned</type>
                    <declname>__int32</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function reads a string from the specified file. Characters are read until the end of line is reached or the number of read characters is equal to buffsize -1. The end of line is marked either by a single line feed or a carriage return and a line feed (DOS file)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buff</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer for the read-out string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffsize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileHandle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If an error occurs, the return value is 0, else 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileGetStringSZ(char buff[], long buffsize, dword fileHandle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4164" column="41" declfile="CAPLPluginApi.h" declline="4164"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3f9b2b52378429c682b00eb3ed05286b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::filePutString</definition>
                <argsstring>(const char *, __int32, unsigned __int32)</argsstring>
                <name>filePutString</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>unsigned</type>
                    <declname>__int32</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function writes a string in the specified file
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buff</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer for the read-out string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffsize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileHandle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If an error occurs, the return value is 0, else 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long filePutString (char buff[], long buffsize, dword fileHandle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4174" column="39" declfile="CAPLPluginApi.h" declline="4174"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af9967da6bf1b18114a6c61cee1c6d494" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileRewind</definition>
                <argsstring>(unsigned __int32)</argsstring>
                <name>fileRewind</name>
                <param>
                    <type>unsigned</type>
                    <declname>__int32</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function resets the position pointer to the beginning of the file
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>The</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>integer indicates the file handle </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If an error occurs, the return value is 0, else 1 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileRewind (dword fileHandle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4182" column="39" declfile="CAPLPluginApi.h" declline="4182"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab230336e76df6313ae9d5ac1c0bdda21" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::fileWriteBinaryBlock</definition>
                <argsstring>(const BYTE *, __int32, unsigned __int32)</argsstring>
                <name>fileWriteBinaryBlock</name>
                <param>
                    <type>const BYTE *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>unsigned</type>
                    <declname>__int32</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function writes buffsize bytes in the specified file
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buff</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer, with the binary data to be written </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffersize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of bytes to be written </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileHandle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The function returns the number of bytes written </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long fileWriteBinaryBlock (byte buff[], long buffsize, dword fileHandle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4192" column="39" declfile="CAPLPluginApi.h" declline="4192"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a78f2b3fc8a0debcec7f0f6839bf05fb0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getCanOeAbsFilePath</definition>
                <argsstring>(const char *, const char *, char *, __int32)</argsstring>
                <name>getCanOeAbsFilePath</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4193" column="39" declfile="CAPLPluginApi.h" declline="4193"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab682f31c855067b3ac14ba1505d8082c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getCardType</definition>
                <argsstring>()</argsstring>
                <name>getCardType</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the type of CAN platform being used. Is needed e.g. to program the BTR / OCR values
                        <simplesect kind="return">
                            <para>17: for Vector drivers </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>For other manufacturer other values will be returned </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long getCardType(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4201" column="39" declfile="CAPLPluginApi.h" declline="4201"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3919db952026b1510b71404bb8f47d17" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::getCardTypeEx</definition>
                <argsstring>(short)</argsstring>
                <name>getCardTypeEx</name>
                <param>
                    <type>short</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the card type of CAN channel. Is needed e.g. to program the BTR / OCR values
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CAN</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Channel number </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Type of board as one of the following values: -1 Unknown or Invalid hardware type 3 DEMO - Demo driver 25 Vector PCMCIA CANcardXL 27 Vector USB CANcaseXL 28 Vector CANcaseXLLog (USB + memory) 29 Vector CANboardXL PCI 30 Vector CPCI CANboardXL Compact 31 Vector CANboardXL PCI express 33 Vector VN7600 34 Vector ExpressCard CANcardXLe 36 Vector VN3300 37 Vector VN3600 38 Vector VN2610 40 Vector VN8950 41 Remote (IP) Device 43 Vector VN8910 46 Vector VN6104 47 Vector VN8970 48 Vector VN2640 49 Vector VN1610 50 Vector VN1611 51 Vector VN1630 52 Vector VN1640 53 Vector VN5610 54 Vector VN7570 55 Vector IP Server 61 Vector VN7572 62 Vector VN8972 63 Vector VN7610 75 Vector VX1131 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int getCardTypeEx(int can); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4239" column="35" declfile="CAPLPluginApi.h" declline="4239"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7f8b0e9693606470415571a270f8d803" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getChipType</definition>
                <argsstring>(__int32)</argsstring>
                <name>getChipType</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the type of CAN controller used
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CAN</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>channel 0 both controller 1 Channel 1 2 Channel 2 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Type of controller with the following values: 5 NEC 72005 200 Philipps PCA82C200 526 Intel 82526 527 Intel 82527 1000,1001 Philipps SJA1000 Other types may occur. DEMO versions return the result 0 or simulate one of the existing types. If an attempt is made to access a nonexistent channel (e.g. Channel 2 for CPC/PP) or if the driver used does not support this function, the functional result is 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long getChipType(long channel); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4256" column="39" declfile="CAPLPluginApi.h" declline="4256"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a46e5edc8d1b1e976a79bf041ce833e67" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::getDrift</definition>
                <argsstring>()</argsstring>
                <name>getDrift</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the constant deviation when Drift is set
                        <simplesect kind="return">
                            <para>Drift in parts per thousand </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int getDrift(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4263" column="35" declfile="CAPLPluginApi.h" declline="4263"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2e2a73fba83eab70a9d703ea415e34d5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::GetEventSortingStatus</definition>
                <argsstring>(capl::IMessage &amp;)</argsstring>
                <name>GetEventSortingStatus</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the Event Sorting state
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>message</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Invalid state </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: sorted </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>2: unsorted </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int GetEventSortingStatus(message msg); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4273" column="35" declfile="CAPLPluginApi.h" declline="4273"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab71a880ba7a8a998876fed1bda8c3558" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::GetFirstCANdbName</definition>
                <argsstring>(char *, DWORD)</argsstring>
                <name>GetFirstCANdbName</name>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Finds out the name of the first assigned database
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer in which the database name is written </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of the buffer in Buyte </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If successful unequal 0, otherwise 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword GetFirstCANdbName( char buffer[], dword size); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4282" column="35" declfile="CAPLPluginApi.h" declline="4282"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2d3c6a1bf0ef2aa70a082690709ed103" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::getJitterMax</definition>
                <argsstring>()</argsstring>
                <name>getJitterMax</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the upper limit for the allowable deviation when Jitter is set
                        <simplesect kind="return">
                            <para>Upper deviation in parts per thousand </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int getJitterMax(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4289" column="35" declfile="CAPLPluginApi.h" declline="4289"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a96e0060b26e3b17efb5527dc4c05a3ea" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::getJitterMin</definition>
                <argsstring>()</argsstring>
                <name>getJitterMin</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the lower limit for the allowable deviation when Jitter is set
                        <simplesect kind="return">
                            <para>Lower deviation in parts per thousand </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int getJitterMin(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4296" column="35" declfile="CAPLPluginApi.h" declline="4296"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5c2c7d2479b47d10af5dfcdc2456bf54" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::GetMessageAttrInt</definition>
                <argsstring>(capl::IMessage &amp;, const char *)</argsstring>
                <name>GetMessageAttrInt</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Gets the value of a message attribute from the database
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>canMessage</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>attributeName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Attribute name </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value of the attribute (or default value) from the database </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long GetMessageAttrInt(message canMessage, char attributeName[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4305" column="39" declfile="CAPLPluginApi.h" declline="4305"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae817be9a615ca9b296716483a7533b32" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::GetMessageName</definition>
                <argsstring>(DWORD, DWORD, char *, DWORD)</argsstring>
                <name>GetMessageName</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Finds out the message name
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Id of the message for which the message name should be found </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If successful unequal 0, otherwise 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword getMessageName( dword id, dword context, char buffer[], dword size); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4313" column="35" declfile="CAPLPluginApi.h" declline="4313"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aabd1b8ed1521c072fbc9c258cc73b3c9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::GetNextCANdbName</definition>
                <argsstring>(DWORD, char *, DWORD)</argsstring>
                <name>GetNextCANdbName</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>char *</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Finds out the names of the other assigned databases with pos
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pos</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Position number of the database to be found </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer in which the database name is written </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of the buffer in Byte </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>If successful unequal 0, otherwise 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword getNextCANdbName( dword pos, char buffer[], dword size); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4323" column="35" declfile="CAPLPluginApi.h" declline="4323"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9602452efac48d36adcc2e3c9957e9eb" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::getStartdelay</definition>
                <argsstring>()</argsstring>
                <name>getStartdelay</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Determines the value of the start delay configured for this network node in the Simulation Setup
                        <simplesect kind="return">
                            <para>Start delay in ms. If no start delay was set the function returns the value zero </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int getStartdelay(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4330" column="35" declfile="CAPLPluginApi.h" declline="4330"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a28b7df50ed20648c3636a681962074a6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::halt</definition>
                <argsstring>()</argsstring>
                <name>halt</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function stops both the debugged program as well as the simulation. The debugger window opens and the halt() command is displayed. The function thus creates a breakpoint while simultaneously interrupting the measurement in simulated mode (also for test modules). The simulation can be continued with &lt;F9&gt;. The halt instruction is ignored in Real mode
                        <simplesect kind="note">
                            <para>void halt(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4336" column="34" declfile="CAPLPluginApi.h" declline="4336"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af009215e116eee5eca4803c003bd2507" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::inspect</definition>
                <argsstring>()</argsstring>
                <name>inspect</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function causes an update of the variables displayed on the Inspect side of the Write window
                        <simplesect kind="note">
                            <para>void inspect(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4342" column="34" declfile="CAPLPluginApi.h" declline="4342"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a892318d70e406bb07cf2e803f5ebc9c9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::isSimulated</definition>
                <argsstring>()</argsstring>
                <name>isSimulated</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function is used to get the information if CANoe is in simulated mode
                        <simplesect kind="return">
                            <para>1: True, CANoe is in simulated mode </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: False, CANoe is in real mode </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long isSimulated(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4350" column="39" declfile="CAPLPluginApi.h" declline="4350"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9db803f18ecad80db65bd9f4e34c9e19" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::isStatisticAcquisitionRunning</definition>
                <argsstring>()</argsstring>
                <name>isStatisticAcquisitionRunning</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function is used to test whether an acquisition range has already been started
                        <simplesect kind="return">
                            <para>The function returns 1 if an evaluation is already running. Otherwise it returns 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int isStatisticAcquisitionRunning(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4357" column="35" declfile="CAPLPluginApi.h" declline="4357"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adb62049120f0d680d300651709f83f3e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>short</type>
                <definition>short capl::isTimerActive</definition>
                <argsstring>(const capl::ITimer &amp;)</argsstring>
                <name>isTimerActive</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_timer" kindref="compound">capl::ITimer</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Return value indicates whether a specific timer is active. This is the case between the call to the setTimer function and the call to the on timer event procedure
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>variable </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mstimer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1, if the timer is active; otherwise 0 </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0 is also returned within the on timer event procedure </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int isTimerActive(timer t); int isTimerActive(mstimer t); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4368" column="35" declfile="CAPLPluginApi.h" declline="4368"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2434c436dce8876078e4017067cf7e2e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::keypressed</definition>
                <argsstring>()</argsstring>
                <name>keypressed</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function returns the key code of a currently pressed key. If no key is being pressed it returns 0.. For example, pressing of a key can be queried in a timer function. The reaction can also be to letting go of a key
                        <simplesect kind="return">
                            <para>Key code of pressed key </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword keypressed(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4375" column="35" declfile="CAPLPluginApi.h" declline="4375"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1c0f5d08cb5199eaf831fd9e2862ce17" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::MessageTimeNS</definition>
                <argsstring>(capl::IMessage &amp;)</argsstring>
                <name>MessageTimeNS</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the time stamp in nanoseconds
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>message</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN message </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>linmessage</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>LIN frame </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mostMessage</parametername>
                                    <parametername>mostAmsMessage</parametername>
                                    <parametername>mostRawMessage</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>MOST message </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Time stamp of the message in ns </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float MessageTimeNS(message msg); float MessageTimeNS(linmessage msg); float MessageTimeNS(mostMessage msg); float MessageTimeNS(mostAmsMessage msg); float MessageTimeNS(mostRawMessage msg); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4389" column="36" declfile="CAPLPluginApi.h" declline="4389"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9e4acdc4f72a999cd60de49d26201c2a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::msgBeep</definition>
                <argsstring>(__int32)</argsstring>
                <name>msgBeep</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The msgBeep function plays back a sound predefined by the Windows system. It replaces the previous beep function
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>soundType</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Integer for the predefined sound. Specifically these are: 0: MB_ICONASTERISK SystemAsterisk 1: MB_ICONEXCLAMATION SystemExclamation 2: MB_ICONHAND SystemHand 3: MB_ICONQUESTION SystemQuestion 4: MB_OK SystemDefault 5: Standard beep using the PC speaker (default) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void msgBeep (long soundType); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4402" column="34" declfile="CAPLPluginApi.h" declline="4402"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1ee35342b48c9588bf6113c18c4c1ae5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD_PTR</type>
                <definition>DWORD_PTR capl::openFileRead_Internal</definition>
                <argsstring>(const char *, DWORD, const char *, const char *)</argsstring>
                <name>openFileRead_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function opens the file named filename for the read access. If mode=0 the file is opened in ASCII mode; if mode=1 the file is opened in binary mode.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File name </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mode</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The return value is the file handle that must be used for read operations. If an error occurs, the return value is 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword openFileRead (char filename[], dword mode); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4413" column="39" declfile="CAPLPluginApi.h" declline="4413"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac5bdd79fc5f3e9de71da1fc6ec229c68" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD_PTR</type>
                <definition>DWORD_PTR capl::openFileWrite_Internal</definition>
                <argsstring>(const char *, DWORD, const char *, const char *)</argsstring>
                <name>openFileWrite_Internal</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function opens the file named filename for the write access
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>File name </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mode</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The return value is the file handle that must be used for write operations If an error occurs, the return value is 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword openFileWrite (char filename[], dword mode); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4422" column="39" declfile="CAPLPluginApi.h" declline="4422"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aea42c5fdb7d4a60daed32a685178afc3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::DeleteControlContent</definition>
                <argsstring>(const char *, const char *)</argsstring>
                <name>DeleteControlContent</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Deletes the content of the Panel Designer CAPL Output View control. The panel is accessed by its individual panel name that is entered in the Panel Designer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters. &quot;&quot; � references all panels </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the CAPL Output View control, restricted to 128 characters. &quot;&quot; � references all CAPL Output View controls on the panel </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void DeleteControlContent(char[] panel, char[] control); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4430" column="34" declfile="CAPLPluginApi.h" declline="4430"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1d61cf58ce35c530e9be4a222d8a4e41" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlString</definition>
                <argsstring>(const char *, const char *, const char *)</argsstring>
                <name>putValueToControlString</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4431" column="34" declfile="CAPLPluginApi.h" declline="4431"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae5491181ceedbb543bb1e8b64f159aa3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlInt</definition>
                <argsstring>(const char *, const char *, __int32)</argsstring>
                <name>putValueToControlInt</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4432" column="34" declfile="CAPLPluginApi.h" declline="4432"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a794b731851dc0a6652e43257817576c3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlIntParagraph</definition>
                <argsstring>(const char *, const char *, __int32, __int32)</argsstring>
                <name>putValueToControlIntParagraph</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4433" column="34" declfile="CAPLPluginApi.h" declline="4433"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad7c941b1de1ea0ca23504aa93c1eda74" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlIntHex</definition>
                <argsstring>(const char *, const char *, __int32, __int32, __int32)</argsstring>
                <name>putValueToControlIntHex</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4434" column="34" declfile="CAPLPluginApi.h" declline="4434"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a39b0ab5ff870ae7995cb4b37209b7807" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlDouble</definition>
                <argsstring>(const char *, const char *, double)</argsstring>
                <name>putValueToControlDouble</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4435" column="34" declfile="CAPLPluginApi.h" declline="4435"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a14d853f374c8bb2aaa9c768c62344f26" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlDoubleParagraph</definition>
                <argsstring>(const char *, const char *, double, __int32)</argsstring>
                <name>putValueToControlDoubleParagraph</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4436" column="34" declfile="CAPLPluginApi.h" declline="4436"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a09f6beddd7c620aedb4d48c50c564dc1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlObj</definition>
                <argsstring>(const char *, const char *, capl::IMessage &amp;)</argsstring>
                <name>putValueToControlObj</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4437" column="34" declfile="CAPLPluginApi.h" declline="4437"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa027f855c6a1097554e982b070081e9a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlObjParagraph</definition>
                <argsstring>(const char *, const char *, capl::IMessage &amp;, __int32)</argsstring>
                <name>putValueToControlObjParagraph</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4438" column="34" declfile="CAPLPluginApi.h" declline="4438"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a203739611330d9fecdb36c5bf5778b03" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::putValueToControlObjHex</definition>
                <argsstring>(const char *, const char *, capl::IMessage &amp;, __int32, __int32)</argsstring>
                <name>putValueToControlObjHex</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4439" column="34" declfile="CAPLPluginApi.h" declline="4439"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a58815a9f87c2b39e38d041bc83ac4d38" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setPictureBoxImage</definition>
                <argsstring>(const char *, const char *, const char *)</argsstring>
                <name>setPictureBoxImage</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Replaces the image of the Panel Designer Picture Box control during runtime. The panel is accessed by its individual panel name that is entered in the Panel Designer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters. &quot;&quot; � references all opened panels </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the control, restricted to 128 characters. &quot;&quot; � references all controls on the panel </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>iamgefile</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Path and name of the image file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>setPictureBoxImage(panel, control, imagefile); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4448" column="34" declfile="CAPLPluginApi.h" declline="4448"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4f3a0758106cfdaca7a86b182ac0045f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::resetCan</definition>
                <argsstring>()</argsstring>
                <name>resetCan</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Resets the CAN controller. Can be used to reset the CAN controller after a BUSOFF or to activate configuration changes. Since execution of the function takes some time and the CAN controller is disconnected from the bus briefly, messages can be lost when this is performed
                        <simplesect kind="note">
                            <para>void resetCan(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4454" column="34" declfile="CAPLPluginApi.h" declline="4454"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5c1e1af043f77284d1313f98255e4493" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::ResetCanEx</definition>
                <argsstring>(__int32)</argsstring>
                <name>ResetCanEx</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Resets the CAN controller for one specific CAN channel. Can be used to reset the CAN controller after a BUSOFF or to activate configuration changes. Since execution of the function takes a certain amount of time and the CAN controller is disconnected from the bus for a brief period messages may be lost
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void ResetCanEx(long channel); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4461" column="34" declfile="CAPLPluginApi.h" declline="4461"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3a937182f8831cdf8dde7d0e7e6ddcfb" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::runError</definition>
                <argsstring>(__int32, __int32)</argsstring>
                <name>runError</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Triggers a run error. Outputs the error number to the Write Window indicating the error number and the passed number, and then terminates the measurement
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Numbers that are represented in CANoe as a references for the user. The values under 1000 are reserved for internal purposes. The second parameter is reserved for future expansions </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void runError(long err, long); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4468" column="34" declfile="CAPLPluginApi.h" declline="4468"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad34a096e58346b456bf344684853493e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ScanBaudrateActive</definition>
                <argsstring>(DWORD, DWORD, double, double, DWORD)</argsstring>
                <name>ScanBaudrateActive</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function determines the baud rate for the given channel. Result of the function is written into the Write Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Channel number. (1,..,32) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>messageID</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>ID of the message that the scanner will send to detect the baud rate. The DLC of the message is always 8 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>firstBaudrate/lastBaudrate</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Baud rate range to scan </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Period of time [ms] the scanner waits when the message is sent </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Returns 0 if the scan function was successfully started. Otherwise the return value is non-zero </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ScanBaudrateActive( dword channel, dword messageID, double firstBaudrate, double lastBaudrate, dword timeout); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4479" column="39" declfile="CAPLPluginApi.h" declline="4479"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a34c80a4412c780719531cffaef5f2fbd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ScanBaudratePassive</definition>
                <argsstring>(DWORD, DWORD, double, double, DWORD, DWORD)</argsstring>
                <name>ScanBaudratePassive</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Baud rate scanner checks different baud rates and tries to receive a message on the channel. Function starts the scan and detects the baud rate on the given channel. Result of the function is written into the Write Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>channel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Channel number. (1,..,32) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>messageID</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>ID of the message that the scanner will send to detect the baud rate. The DLC of the message is always 8 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>firstBaudrate/lastBaudrate</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Baud rate range to scan </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Period of time [ms] the scanner waits when the message is sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bAcknowledge</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Acknowledge mode on (1)/off (0). If a wrong baud rate is present, CANoe cannot receive messages and sends an Error Frame, which can be put on the bus using the parameter bAcknowledge. The parameter serves for the fact that CANoe - as a passive receiver - can participate indirectly in the network communication by sending an Error Frame. The parameter does not change the acknowledge settings of the Hardware Configuration dialog. The parameter has an effect only during runtime of the function. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Returns 0 if the scan function was successfully started. Otherwise the return value is non-zero </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ScanBaudratePassive( dword channel, dword messageID, double firstBaudrate, double lastBaudrate, dword timeout, dword bAcknowledge); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4491" column="39" declfile="CAPLPluginApi.h" declline="4491"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab8271ba0f20456420e7427aeec6426fd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::setCanCabsMode</definition>
                <argsstring>(__int32, __int32, __int32, __int32)</argsstring>
                <name>setCanCabsMode</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Various CANcabs modes may be set. Replaces the setPortBits functions
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ntype</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Unused, must be set to 0 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>nchannel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN channel </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>nmode</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Is used for the control of the board lines via a bit pattern. Mode, valid values: 0: NORMAL 1: SLEEP 2: HIVOLTAGE 3: HISPEED 4: DUAL_WIRE 5: SINGLE_WIRE_LOW 6: SINGLE_WIRE_HIGH 7: is reserved </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CANcab</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Eva Two output lines can be set </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>nflags</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Is used for the control of the board lines via a bit pattern </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: ok </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>!=0: Error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long setCanCabsMode(long ntype,long nchannel,long nmode,long nflags); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4512" column="39" declfile="CAPLPluginApi.h" declline="4512"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3ae3df2fbdb9ffb73d7a5af5a0860529" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setDrift</definition>
                <argsstring>(short)</argsstring>
                <name>setDrift</name>
                <param>
                    <type>short</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        A constant deviation can be set for the timers of a network node with this function. Inputs for the two values may lie between �10000 and 10000 (corresponds to �100.00% to 100.00%). If the value does not lie within this range, a message is output in the Write Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>drift</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Integer for the constant deviation </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void setDrift(int drift); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4519" column="34" declfile="CAPLPluginApi.h" declline="4519"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aaf46296d393cea81ebded5fcf49e44b3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setJitter</definition>
                <argsstring>(short, short)</argsstring>
                <name>setJitter</name>
                <param>
                    <type>short</type>
                </param>
                <param>
                    <type>short</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The Jitter interval for the timers of a network node can be set with this function. The two values may lie between �10000 and 10000 (corresponds to �100.00% to 100.00%). If one of the two values does not lie within this range, a message is output in the Write Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>min</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Integer for the lower interval limit </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>max</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Integer for the upper interval limit </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>setJitter(int min, int max); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4527" column="34" declfile="CAPLPluginApi.h" declline="4527"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9052ce449ce297d8cfa045b906ae42f7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setLogFileName</definition>
                <argsstring>(const char *)</argsstring>
                <name>setLogFileName</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the name of the logging file. If a valid extension is given it also changes the file type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>strLoggingBlockName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>setLogFileName(char fileName[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4535" column="34" declfile="CAPLPluginApi.h" declline="4535"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af37410ef8a777051caeb14e7494b3b77" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setOcr</definition>
                <argsstring>(__int32, BYTE)</argsstring>
                <name>setOcr</name>
                <param>
                    <type>__int32</type>
                </param>
                <param>
                    <type>BYTE</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the Output Control Register. The values do not become active until the next call of the function resetCan()
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>CAN</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>channel 0 - all channels; &gt; 0 - only the given channel </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>OCR</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value of the Output Control Register </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1: success </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>setOcr(long channel, byte ocr); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4545" column="34" declfile="CAPLPluginApi.h" declline="4545"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae6d924ea65f1a1e9dfd6494f3e4462f6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setPostTrigger</definition>
                <argsstring>(__int32)</argsstring>
                <name>setPostTrigger</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the posttrigger of the logging. The posttrigger set with this function is valid until the end of the measurement or until the next call of this function
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New posttrigger value in milliseconds. If a value of -1 is supplied, the prosttrigger will be set to infinity </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1, if the posttrigger is set to the given value, 0 else </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>setPostTrigger(long preTriggerTime); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4553" column="34" declfile="CAPLPluginApi.h" declline="4553"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac578f033f0059c078388740e10aee0fe" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setPreTrigger</definition>
                <argsstring>(__int32)</argsstring>
                <name>setPreTrigger</name>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                </parameternamelist>
                                <parameterdescription>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        return
                        <simplesect kind="note">
                            <para></para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4561" column="34" declfile="CAPLPluginApi.h" declline="4561"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a80246f66b6cbc85c175cbe586d475eb3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setStartdelay</definition>
                <argsstring>(short)</argsstring>
                <name>setStartdelay</name>
                <param>
                    <type>short</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the pretrigger of the logging. The pretrigger set with this function is valid until the end of the measurement or until the next call of this function
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New pretrigger value in milliseconds </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1, if the pretrigger is set to the given value, 0 else </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>setPreTrigger(long preTriggerTime); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4569" column="34" declfile="CAPLPluginApi.h" declline="4569"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7f19699a960be604882084b78170fabf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setWriteDbgLevel</definition>
                <argsstring>(WORD)</argsstring>
                <name>setWriteDbgLevel</name>
                <param>
                    <type>WORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function sets the priority level for the writeDbgLevel CAPL function. The output priority must be set for every network node
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>priority</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Priority of current CAPL node for output to the Write Window. Rays for priority: 0 to 15 0 - Only write output with a priority of 0 are shown in the Write Window.</para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        5 - Write output with a priority ranging from 0 to 5 are shown.
                    </para>
                    <para>
                        15 - All outputs are shown
                        <simplesect kind="note">
                            <para>void setWriteDbgLevel (unsigned int priority); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4581" column="34" declfile="CAPLPluginApi.h" declline="4581"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a00e758f74676762347271d6fa97a43db" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetControlPropertyString</definition>
                <argsstring>(const char *, const char *, const char *, const char *)</argsstring>
                <name>SetControlPropertyString</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets a property of a Panel Editor ActiveX control
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>panel</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Panel name, restricted to 128 characters. &quot;&quot; � references all opened panels </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>control</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the panel control, restricted to 128 characters. &quot;&quot; � references all elements on the panel </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>property</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the property </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value to be set (long, float or string value) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void SetControlProperty(char[] panel, char[] control, char[] property, char[] value); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4591" column="34" declfile="CAPLPluginApi.h" declline="4591"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a115ce595cbb70fa33d5ed3dbd985db50" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetControlPropertyInt</definition>
                <argsstring>(const char *, const char *, const char *, __int32)</argsstring>
                <name>SetControlPropertyInt</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4592" column="34" declfile="CAPLPluginApi.h" declline="4592"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7b343b0524ccd44a3a00a66b8740499a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::SetControlPropertyDouble</definition>
                <argsstring>(const char *, const char *, const char *, double)</argsstring>
                <name>SetControlPropertyDouble</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>double</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4593" column="34" declfile="CAPLPluginApi.h" declline="4593"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afd934e199c5be364eb94daac77928032" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setTimer2P</definition>
                <argsstring>(ITimer &amp;timer, __int32 time)</argsstring>
                <name>setTimer2P</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_timer" kindref="compound">ITimer</ref> &amp;</type>
                    <declname>timer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>time</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4595" column="34" declfile="CAPLPluginApi.h" declline="4595"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1dcce57013c057bd4cc1466a50a3a355" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setTimer3P</definition>
                <argsstring>(ITimer &amp;timer, __int32 time, __int32 time2)</argsstring>
                <name>setTimer3P</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_timer" kindref="compound">ITimer</ref> &amp;</type>
                    <declname>timer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>time</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>time2</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4596" column="34" declfile="CAPLPluginApi.h" declline="4596"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a59cbaeb75b60a2ddcf63ed422b057144" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setTimerCyclic2P</definition>
                <argsstring>(ITimer &amp;timer, __int32 period)</argsstring>
                <name>setTimerCyclic2P</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_timer" kindref="compound">ITimer</ref> &amp;</type>
                    <declname>timer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>period</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets a cyclical timer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>t</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The timer to be set </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>period</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Time in milliseconds in which the timer is restarted in case of expiration </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void setTimerCyclic(msTimer t, long period); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4604" column="34" declfile="CAPLPluginApi.h" declline="4604"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a53cd7e26ff09ce74a585c3afe3d6939e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::setTimerCyclic3P</definition>
                <argsstring>(ITimer &amp;timer, __int32 firstDuration, __int32 period)</argsstring>
                <name>setTimerCyclic3P</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_timer" kindref="compound">ITimer</ref> &amp;</type>
                    <declname>timer</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>firstDuration</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>period</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>t</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The timer to be set </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>period</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Time in milliseconds in which the timer is restarted in case of expiration </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>firstDuration</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Time in milliseconds until the timer runs out for the first time </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void setTimerCyclic(msTimer t, long firstDuration, long period); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4612" column="34" declfile="CAPLPluginApi.h" declline="4612"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a52e8d21cf4db6db4803f84506011e6f6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::startLogging</definition>
                <argsstring>()</argsstring>
                <name>startLogging</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts all Logging Blocks immediately bypassing all logging trigger settings
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>strLoggingBlockName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging Block </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>preTriggerTime</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Pre-trigger time interval in ms </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void startLogging(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4620" column="34" declfile="CAPLPluginApi.h" declline="4620"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa69852e24eb4e921ca84a1f75336d224" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::startLogging1P</definition>
                <argsstring>(const char *)</argsstring>
                <name>startLogging1P</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts all Logging Blocks immediately bypassing all logging trigger settings
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>strLoggingBlockName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void startLogging(char strLoggingBlockName[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4627" column="34" declfile="CAPLPluginApi.h" declline="4627"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a636050017229b99752453e36ea657baa" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::startLogging2P</definition>
                <argsstring>(const char *, __int32)</argsstring>
                <name>startLogging2P</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts all Logging Blocks immediately bypassing all logging trigger settings
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>strLoggingBlockName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging Block </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>preTriggerTime</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Pre-trigger time interval in ms </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void startLogging(char strLoggingBlockName[], long preTriggerTime); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4635" column="34" declfile="CAPLPluginApi.h" declline="4635"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a668912b3fdef0ff622156f4846dfbd4b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::stopLogging</definition>
                <argsstring>()</argsstring>
                <name>stopLogging</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops all Logging Blocks immediately bypassing all logging trigger settings
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>strLoggingBlockName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging Block </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>postTriggerTime</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Post-trigger time interval in ms </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void stopLogging(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4643" column="34" declfile="CAPLPluginApi.h" declline="4643"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adbe0d2acf0c2406fcb0735abe34f0adc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::stopLogging1P</definition>
                <argsstring>(const char *)</argsstring>
                <name>stopLogging1P</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops all Logging Blocks immediately bypassing all logging trigger settings
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>strLoggingBlockName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void stopLogging(char strLoggingBlockName[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4650" column="34" declfile="CAPLPluginApi.h" declline="4650"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af244e055deaf1bd0f615f3df59ba414d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::stopLogging2P</definition>
                <argsstring>(const char *, __int32)</argsstring>
                <name>stopLogging2P</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>__int32</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops all Logging Blocks immediately bypassing all logging trigger settings
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>strLoggingBlockName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging Block </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>postTriggerTime</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Post-trigger time interval in ms </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void stopLogging(char strLoggingBlockName[], long postTriggerTime); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4658" column="34" declfile="CAPLPluginApi.h" declline="4658"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a21e34e567c95d9079e0cc6674fee2f3e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD_PTR</type>
                <definition>DWORD_PTR capl::StartMacroFile</definition>
                <argsstring>(const char *)</argsstring>
                <name>StartMacroFile</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts playing the macro with the fileName file name
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Macro file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The returned handle is required to stop the macro playback </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword StartMacroFile(char fileName[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4666" column="39" declfile="CAPLPluginApi.h" declline="4666"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2b0608ff1c0df50fa30f39d97f1851ba" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD_PTR</type>
                <definition>DWORD_PTR capl::StartReplayFile</definition>
                <argsstring>(const char *)</argsstring>
                <name>StartReplayFile</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts playing the replay file with the name fileName. This function replays events of the following types: CAN messages CAN Error Frames CAN overload frames (not sent, only visible in Measurement Setup) J1708 messages Ethernet packets WLAN packets AFDX packets Diagnostic requests GPS events Signal values System variable updates Environment variable updates
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fileName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Replay file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The returned handle is required to stop the replay file </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword StartReplayFile(char fileName[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4686" column="39" declfile="CAPLPluginApi.h" declline="4686"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0310e96a4684076328a454810707651c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::startStatisticAcquisition</definition>
                <argsstring>()</argsstring>
                <name>startStatisticAcquisition</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        A new acquisition range is started with this function. If an acquisition range has already been started, the function has no effect since it cannot influence the currently active range
                        <simplesect kind="note">
                            <para>void startStatisticAcquisition() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4692" column="34" declfile="CAPLPluginApi.h" declline="4692"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a03849c45bd91896aa3af67b63e963bb2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::StopMacroFile</definition>
                <argsstring>(DWORD_PTR)</argsstring>
                <name>StopMacroFile</name>
                <param>
                    <type>DWORD_PTR</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops the macro from playing with the handle handle
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of the started macro </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void StopMacroFile(dword handle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4699" column="34" declfile="CAPLPluginApi.h" declline="4699"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab99e3107a8c5ac6e2e7d39857ee11cd7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::StopReplayFile</definition>
                <argsstring>(DWORD_PTR)</argsstring>
                <name>StopReplayFile</name>
                <param>
                    <type>DWORD_PTR</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops the replay file from playing with the handle handle
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of the started replay file </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void StopReplayFile(dword handle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4706" column="34" declfile="CAPLPluginApi.h" declline="4706"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a639caa026f6ee0ed64b2ced8cb00e300" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::stopStatisticAcquisition</definition>
                <argsstring>()</argsstring>
                <name>stopStatisticAcquisition</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        A started acquisition range is stopped with this function. If no acquisition range has been started yet, this function has no effect
                        <simplesect kind="note">
                            <para>void stopStatisticAcquisition() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4712" column="34" declfile="CAPLPluginApi.h" declline="4712"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0f853152543a036158d24c1c6b8c68b8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::sysExit</definition>
                <argsstring>()</argsstring>
                <name>sysExit</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Exits the system (CANoe) from within a CAPL program
                        <simplesect kind="note">
                            <para>void sysExit(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4718" column="34" declfile="CAPLPluginApi.h" declline="4718"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a507856991321a61dbc4dff60ce02a6db" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::sysMinimize</definition>
                <argsstring>()</argsstring>
                <name>sysMinimize</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The application window of CANoe will be minimized or restored. The first call of the function minimizes the window, afterwards the window will be restored to normal size and minimized alternaltly
                        <simplesect kind="note">
                            <para>void sysMinimize(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4724" column="34" declfile="CAPLPluginApi.h" declline="4724"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a08609f7727e18754195a7eb885e2398f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::timeDiff</definition>
                <argsstring>(capl::IMessage &amp;, capl::IMessage &amp;)</argsstring>
                <name>timeDiff</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Time difference between messages or between a message and the current time in ms (msg2 - msg1 or now - msg1). Starting with CANalyzer 2.xx this difference can be calculated directly (Units of 10 microseconds)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>of type message </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Variable</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>of type now </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Time difference in ms </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long timeDiff(message m1, NOW); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4733" column="39" declfile="CAPLPluginApi.h" declline="4733"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abddccd0e7c62ddac18152f68fdb8bb66" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::timeNow</definition>
                <argsstring>()</argsstring>
                <name>timeNow</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Supplies the current simulation time (maximum time: .2^32 * 10 microseconds = 11 hours, 55 minutes, 49 seconds, 672 milliseconds, 96 microseconds) The simulation time can be correlated with the hardware results of the interface cards (e.g. CANcardXL). The resolution of this time is dependent upon the hardware used (usually a millisecond or better). Depending on the hardware configuration, the simulation time will be the same as the message time calculated by the interface cards (e.g., system with two CAN channels connected to one CANcardXL) or the message times will have a higher accuracy
                        <simplesect kind="return">
                            <para>Simulation time in 10 microsecondsdword timeNow(); </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword timeNow(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4747" column="35" declfile="CAPLPluginApi.h" declline="4747"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac44799806fe61bf6c36eafbec55da865" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::timeNowFloat</definition>
                <argsstring>()</argsstring>
                <name>timeNowFloat</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Supplies the current simulation time. The simulation time can be correlated with the hardware results of the interface cards (e.g. CANcardXL). The resolution of this time is dependent upon the hardware used (usually a millisecond or better). Depending on the hardware configuration, the simulation time will be the same as the message time calculated by the interface cards (e.g., system with two CAN channels connected to one CANcardXL) or the message times will have a higher accuracy
                        <simplesect kind="return">
                            <para>Simulation time in 10 microseconds </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float timeNowFloat(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4761" column="36" declfile="CAPLPluginApi.h" declline="4761"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa08323f1c58f647108d6a1485e4f14d9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::timeNowNS</definition>
                <argsstring>()</argsstring>
                <name>timeNowNS</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Supplies the current simulation time. The simulation time can be correlated with the hardware results of the interface cards (e.g. CANcardXL). The resolution of this time is dependent upon the hardware used (usually a millisecond or better). Depending on the hardware configuration, the simulation time will be the same as the message time calculated by the interface cards (e.g., system with two CAN channels connected to one CANcardXL) or the message times will have a higher accuracy
                        <simplesect kind="return">
                            <para>Simulation time in nanoseconds </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float TimeNowNS(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4775" column="36" declfile="CAPLPluginApi.h" declline="4775"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4de5c3fae2b42bdfbc3ca3a85aa6d4e1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::timeNowInt64</definition>
                <argsstring>()</argsstring>
                <name>timeNowInt64</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Supplies the current simulation time. The simulation time can be correlated with the hardware results of the interface cards (e.g. CANcardXL). The resolution of this time is dependent upon the hardware used (usually a millisecond or better). Depending on the hardware configuration, the simulation time will be the same as the message time calculated by the interface cards (e.g., system with two CAN channels connected to one CANcardXL) or the message times will have a higher accuracy
                        <simplesect kind="return">
                            <para>Simulation time in nanoseconds </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int64 timeNowInt64(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4789" column="39" declfile="CAPLPluginApi.h" declline="4789"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a092d0be438a388b297980e8eeb9686a5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::timeToElapse</definition>
                <argsstring>(const capl::ITimer &amp;)</argsstring>
                <name>timeToElapse</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_timer" kindref="compound">capl::ITimer</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns a value indicating how much more time will elapse before an on timer event procedure is called
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>or mstimer variable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Time to go until the timer elapses and the event procedure is called </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long timeToElapse(timer t) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4797" column="39" declfile="CAPLPluginApi.h" declline="4797"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0359ccd5bd6e4277cc5980afd96a9526" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::traceSetEventColors</definition>
                <argsstring>(capl::IMessage &amp;)</argsstring>
                <name>traceSetEventColors</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the text and background color for displaying msg in the Trace Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>msg</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Variable type: message, errorFrame, pg, linMessage, mostRawMessage, mostMessage, mostAmsMessage, frFrame, frError, frameError, nullFrame, pdu, pocState, slot, symbol, startCycle </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>traceSetEventColors </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4804" column="34" declfile="CAPLPluginApi.h" declline="4804"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a03039b08e6cd036d64bd5748e049c6a9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::trigger</definition>
                <argsstring>()</argsstring>
                <name>trigger</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends a trigger event to all CANoe Logging or Trigger Blocks For a Logging Block, the trigger event starts and stops logging, depending on the trigger mode (single or toggle trigger) the trigger conditions for toggle on and toggle off
                        <simplesect kind="note">
                            <para>void trigger(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4813" column="34" declfile="CAPLPluginApi.h" declline="4813"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3e7f8b95b02afd722e6fe7d87a59181c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::triggerEx</definition>
                <argsstring>(const char *)</argsstring>
                <name>triggerEx</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends a trigger event to a CANoe Logging or Trigger Block specified by name. For a Logging Block, the trigger event starts and stops logging, depending on the trigger mode (single or toggle trigger) the trigger conditions for toggle on and toggle off
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Logging or Trigger Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void triggerEx(char name[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4823" column="34" declfile="CAPLPluginApi.h" declline="4823"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9c22342f9b6c11d2300749d28f78f10d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::writeCreate</definition>
                <argsstring>(const char *)</argsstring>
                <name>writeCreate</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Generates a new page in the Write Window with the specified name. The page is automatically deleted the next time a measurement starts
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the page to be generated </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Sink identifier that is valid for output to the new page </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword writeCreate(char name[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4831" column="35" declfile="CAPLPluginApi.h" declline="4831"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3c9cac6adf41ce3be86aefeb762aa06f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeDestroy</definition>
                <argsstring>(DWORD)</argsstring>
                <name>writeDestroy</name>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Removes the specified page from the Write Window. Only pages that have been created with the aid of the writeCreate function can be removed
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>sink</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Target identifier for the page to be removed </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeDestroy(dword sink) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4838" column="34" declfile="CAPLPluginApi.h" declline="4838"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a41fcfdcdfec04cd2c25595bb3ff43164" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeClear</definition>
                <argsstring>(DWORD)</argsstring>
                <name>writeClear</name>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Clears the contents of the specified page in the Write Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>sink</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Target identifier for the page to be deleted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeClear(dword sink) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4845" column="34" declfile="CAPLPluginApi.h" declline="4845"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af4cc6e97457ff39792d20dc33ec12e57" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::write</definition>
                <argsstring>(const char *,...)</argsstring>
                <name>write</name>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Outputs a text message to the Write Window. Write is based on the C function printf
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Format</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>
                                        string, variables or expressions. Legal format expressions: &quot;%ld&quot;,&quot;%d&quot; decimal display &quot;%lx&quot;,&quot;%x&quot; hexadecimal display &quot;%lX&quot;,&quot;%X&quot; hexadecimal display (upper case) &quot;%lu&quot;,&quot;%u&quot; unsigned display &quot;%lo&quot;,&quot;%o&quot; octal display &quot;%s&quot; display a string &quot;%g&quot;,&quot;%f&quot; floating point displa e.g. %5.3f means, 5 digits in total (decimal point inclusive) and 3 digits after the decimal point. 5 is the minimum of digits in this case. &quot;%c&quot; display a character &quot;%%&quot; display %-character &quot;%I64d&quot;,&quot;%lld&quot; decimal display of a 64 bit value &quot;%I64x&quot;,&quot;%llx hexadecimal display of a 64 bit value
                                        &quot;I64X&quot;,&quot;llX&quot; hexadecimal display of a 64 bit value (upper case)
                                        &quot;I64u&quot;,&quot;llu&quot; unsigned display of a 64 bit value
                                        &quot;I64o&quot;,&quot;llo" octal display of a 64 bit value
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void write(char format[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4866" column="34" declfile="CAPLPluginApi.h" declline="4866"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ade22a82067105485be641e31ffba65c9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeEx</definition>
                <argsstring>(DWORD, DWORD, const char *,...)</argsstring>
                <name>writeEx</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Writes the text into the last line of the specified CANoe window, into a page of the Write Window or into a logging file without previously creating a new line
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>sink</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Sink identifier of the page to which the output will take place. Values: -3 Trace Window -2 Output to the logging file (only in ASC format and if the CAPL node is inserted in the Measurement Setup in front of the Logging Block) -1 Reserved 0 Output to the System page of the Write Window 1 Output to the CAPL page of the Write Window 4 Output to the Test page of the Write Window </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>severity</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Constant for the type of message. Values: 0 Success 1 Information 2 Warning 3 Error </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>format</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Formatting character sequence </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeEx(long sink, dword severity, char format[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4885" column="34" declfile="CAPLPluginApi.h" declline="4885"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae89ed88678484e05567ac2824d08af68" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeLineEx</definition>
                <argsstring>(DWORD, DWORD, const char *,...)</argsstring>
                <name>writeLineEx</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>const char *</type>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Writes the text into a new line of the specified window, into a page of the CANoe Write Window or into a logging file
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>sink</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Sink identifier of the page to which the output will take place. Values: -3 Trace Window -2 Output to the logging file (only in ASC format and if the CAPL node is inserted in the Measurement Setup in front of the Logging Block) -1 Reserved 0 Output to the System page of the Write Window 1 Output to the CAPL page of the Write Window 4 Output to the Test page of the Write Window </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>severity</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Constant for the type of message. Values: 0 Success 1 Information 2 Warning 3 Error </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>format</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Formatting character sequence </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeLineEx(long sink, dword severity, char format[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4904" column="34" declfile="CAPLPluginApi.h" declline="4904"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac23ce86c0fa1d1db0d7211e9bf18658a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeTextBkgColor</definition>
                <argsstring>(DWORD, DWORD, DWORD, DWORD)</argsstring>
                <name>writeTextBkgColor</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the color for text background of the specified page in the Write Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>sink</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The target identifier of the page on which the color settings should have an effect </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>red</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Specifies the intensity of the red color </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>green</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Specifies the intensity of the green color </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>blue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Specifies the intensity of the blue color </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeTextBkgColor(dword sink,dword red, dword green, dword blue) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4914" column="34" declfile="CAPLPluginApi.h" declline="4914"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a05569f1c84be076c5122b8e5e4dafeff" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeTextColor</definition>
                <argsstring>(DWORD, DWORD, DWORD, DWORD)</argsstring>
                <name>writeTextColor</name>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <param>
                    <type>DWORD</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the color for text of the specified page in the Write Window
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>sink</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The target identifier of the page on which the color settings should have an effect </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>red</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Specifies the intensity of the red color </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>green</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Specifies the intensity of the green color </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>blue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Specifies the intensity of the blue color </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeTextColor(dword sink,dword red, dword green, dword blue) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4924" column="34" declfile="CAPLPluginApi.h" declline="4924"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a208b52caad5769d0a7022ac25325e328" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeToLog</definition>
                <argsstring>(const char *)</argsstring>
                <name>writeToLog</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Writes an output string to an ASCII logging file. Write is based on the C function printf
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Format</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>string, variables or expressions. Legal format expressions: &quot;%ld&quot;,&quot;%d&quot; decimal display &quot;%lx&quot;,&quot;%x&quot; hexadecimal display &quot;%lX&quot;,&quot;%X&quot; hexadecimal display (upper case) &quot;%lu&quot;,&quot;%u&quot; unsigned display &quot;%lo&quot;,&quot;%o&quot; octal display &quot;%s&quot; display a string &quot;%g&quot;,&quot;%lf&quot; floating point display &quot;%c&quot; display a character &quot;%%&quot; display %-character &quot;%I64d&quot; decimal display of a 64 bit value &quot;%I64x&quot; hexadecimal display of a 64 bit value &quot;%I64X&quot; hexadecimal display of a 64 bit value (upper case) &quot;%I64u&quot; unsigned display of a 64 bit value </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeToLog(char format[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4944" column="34" declfile="CAPLPluginApi.h" declline="4944"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a36b70e7e8d7c6a780d9c11a5d294771f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::writeToLogEx</definition>
                <argsstring>(const char *)</argsstring>
                <name>writeToLogEx</name>
                <param>
                    <type>const char *</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Writes an output string to an ASCII logging file. Write is based on the C function printf
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>%ld</parametername>
                                    <parametername>%d</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>decimal display &quot;%lx&quot;,&quot;%x&quot; hexadecimal display &quot;%lX&quot;,&quot;%X&quot; hexadecimal display (upper case) &quot;%lu&quot;,&quot;%u&quot; unsigned display &quot;%lo&quot;,&quot;%o&quot; octal display &quot;%s&quot; display a string &quot;%g&quot;,&quot;%lf&quot; floating point display &quot;%c&quot; display a character &quot;%%&quot; display %-character &quot;%I64d&quot; decimal display of a 64 bit value &quot;%I64x&quot; hexadecimal display of a 64 bit value &quot;%I64X&quot; hexadecimal display of a 64 bit value (upper case) &quot;%I64u&quot; unsigned display of a 64 bit value </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void writeToLogEx(char format[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4963" column="34" declfile="CAPLPluginApi.h" declline="4963"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a84800d68939eddf9fef83e1eb0a778fc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::writeDbgLevel</definition>
                <argsstring>(unsigned __int32 priority, const char *format,...)</argsstring>
                <name>writeDbgLevel</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>priority</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>format</declname>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Outputs a message to the Write Window with the specified priority. This function can be used for debugging to vary the output to the Write Window. This function is especially useful if nodelayer-DLL�s are used
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>priority</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Output priority from 0 to 15 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>format</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Format string, variables or expressions. legal format expressions: &quot;%ld&quot;, &quot;%d&quot; decimal display &quot;%lx&quot;, &quot;%x&quot; hexadecimal display &quot;%lX&quot;, &quot;%X&quot; hexadecimal display (upper case) &quot;%lu&quot;, &quot;%u&quot; unsigned display &quot;%lo&quot;, &quot;%o&quot; octal display &quot;%s&quot; display a string &quot;%g&quot;, &quot;%lf&quot; floating point display &quot;%c&quot; display a character &quot;%%&quot; display %-character </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>long writeDbgLevel(unsigned int priority, char format1[], char format2[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4980" column="39" declfile="CAPLPluginApi.h" declline="4980"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a93a79022fce7db6822dc8630eee99610" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>bool</type>
                <definition>bool capl::validatePlugin</definition>
                <argsstring>()</argsstring>
                <name>validatePlugin</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4982" column="34" declfile="CAPLPluginApi.h" declline="4982"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a66cc49183bb0af6a4f6a2406a1bb1e88" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>WORD</type>
                <definition>WORD capl::swapWord</definition>
                <argsstring>(WORD u16In)</argsstring>
                <name>swapWord</name>
                <param>
                    <type>WORD</type>
                    <declname>u16In</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Swaps bytes of parameters. CAPL arithmetics follows the &quot;little-endian-format&quot; (Intel). The swap-functions serve for swapping bytes for the transition to and from the &quot;big-endian-format&quot; (Motorola)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>whose bytes are to be swapped </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value with swapped bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>word swapWord(word x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4991" column="34" declfile="CAPLPluginApi.h" declline="4991"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac2733abde8b22c3d13490a46b113b3f1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>SHORT</type>
                <definition>SHORT capl::swapInt</definition>
                <argsstring>(SHORT i16In)</argsstring>
                <name>swapInt</name>
                <param>
                    <type>SHORT</type>
                    <declname>i16In</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Swaps bytes of parameters. CAPL arithmetics follows the &quot;little-endian-format&quot; (Intel). The swap-functions serve for swapping bytes for the transition to and from the &quot;big-endian-format&quot; (Motorola)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>whose bytes are to be swapped </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value with swapped bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int swapInt(int x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="4999" column="35" declfile="CAPLPluginApi.h" declline="4999"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ace4a27bee0ad52d792a0290dc4ca7b0d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::swapDWord</definition>
                <argsstring>(DWORD u32In)</argsstring>
                <name>swapDWord</name>
                <param>
                    <type>DWORD</type>
                    <declname>u32In</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Swaps bytes of parameters. CAPL arithmetics follows the &quot;little-endian-format&quot; (Intel). The swap-functions serve for swapping bytes for the transition to and from the &quot;big-endian-format&quot; (Motorola)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>whose bytes are to be swapped </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value with swapped bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword swapDWord(dword x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5007" column="35" declfile="CAPLPluginApi.h" declline="5007"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afc7d9f01e6dd20aa5221388237bd6244" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int64</type>
                <definition>unsigned __int64 capl::swapQWord</definition>
                <argsstring>(unsigned __int64 u64In)</argsstring>
                <name>swapQWord</name>
                <param>
                    <type>unsigned __int64</type>
                    <declname>u64In</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Swaps bytes of parameters. CAPL arithmetics follows the &quot;little-endian-format&quot; (Intel). The swap-functions serve for swapping bytes for the transition to and from the &quot;big-endian-format&quot; (Motorola)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>whose bytes are to be swapped </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value with swapped bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>qword swapQWord(qword x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5015" column="48" declfile="CAPLPluginApi.h" declline="5015"
                          declcolumn="48" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5a7bbd715eddce0b89c5e4986c4c4e2d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::swapLong</definition>
                <argsstring>(__int32 i32In)</argsstring>
                <name>swapLong</name>
                <param>
                    <type>__int32</type>
                    <declname>i32In</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Swaps bytes of parameters. CAPL arithmetics follows the &quot;little-endian-format&quot; (Intel). The swap-functions serve for swapping bytes for the transition to and from the &quot;big-endian-format&quot; (Motorola)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>whose bytes are to be swapped </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value with swapped bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long swapLong(long x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5023" column="39" declfile="CAPLPluginApi.h" declline="5023"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afd5b34df309bab5a6e8da7c83fea145f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::swapInt64</definition>
                <argsstring>(__int64 i64In)</argsstring>
                <name>swapInt64</name>
                <param>
                    <type>__int64</type>
                    <declname>i64In</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Swaps bytes of parameters. CAPL arithmetics follows the &quot;little-endian-format&quot; (Intel). The swap-functions serve for swapping bytes for the transition to and from the &quot;big-endian-format&quot; (Motorola)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>whose bytes are to be swapped </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Value with swapped bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int64 swapInt64(int64 x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5031" column="39" declfile="CAPLPluginApi.h" declline="5031"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa2f6a2bea0c7138b1e51635e3ab541ce" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::NMH_Init</definition>
                <argsstring>(const char *sBusRef, const char *sEcuName, NMHighFunction *pSleep, NMHighFunction *pWakeup, NMHighFunction *pPrepareSleep, NMHighRemoteFunction *pRemote, NMHighStateChangeFunction *pStateChange, NMHighFunction *pStartInd)</argsstring>
                <name>NMH_Init</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sEcuName</declname>
                </param>
                <param>
                    <type>NMHighFunction *</type>
                    <declname>pSleep</declname>
                </param>
                <param>
                    <type>NMHighFunction *</type>
                    <declname>pWakeup</declname>
                </param>
                <param>
                    <type>NMHighFunction *</type>
                    <declname>pPrepareSleep</declname>
                </param>
                <param>
                    <type>NMHighRemoteFunction *</type>
                    <declname>pRemote</declname>
                </param>
                <param>
                    <type>NMHighStateChangeFunction *</type>
                    <declname>pStateChange</declname>
                </param>
                <param>
                    <type>NMHighFunction *</type>
                    <declname>pStartInd</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5038" column="34" declfile="CAPLPluginApi.h" declline="5038"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa8ff979e3d78be8a68e150edf517fda3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::NMH_DeInit</definition>
                <argsstring>(const char *sBusRef, const char *sEcuName)</argsstring>
                <name>NMH_DeInit</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sEcuName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5039" column="34" declfile="CAPLPluginApi.h" declline="5039"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac22552d7cd11b503a5e9cf715839745c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::NMH_SetUserDataInternal</definition>
                <argsstring>(const char *sBusRef, const char *sEcuName, const BYTE *pData, BYTE length)</argsstring>
                <name>NMH_SetUserDataInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sEcuName</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>pData</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>length</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5041" column="34" declfile="CAPLPluginApi.h" declline="5041"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6e9bd4a457cc41eda3d9d40e5afcea89" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::NMH_RequestBusComInternal</definition>
                <argsstring>(const char *sBusRef, const char *sEcuName)</argsstring>
                <name>NMH_RequestBusComInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sEcuName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5042" column="34" declfile="CAPLPluginApi.h" declline="5042"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af9d033f0a74d323359ea94ec9c6c85e4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::NMH_ReleaseBusComInternal</definition>
                <argsstring>(const char *sBusRef, const char *sEcuName)</argsstring>
                <name>NMH_ReleaseBusComInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sEcuName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5043" column="34" declfile="CAPLPluginApi.h" declline="5043"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae79b5823eefc11a1970f9cd5304b0d30" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::NMH_PassiveStartUp</definition>
                <argsstring>(const char *sBusRef, const char *sEcuName)</argsstring>
                <name>NMH_PassiveStartUp</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sEcuName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5044" column="39" declfile="CAPLPluginApi.h" declline="5044"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af351ca278f6fed4274d864292b934f78" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::NMH_GetStationAddrInternal</definition>
                <argsstring>(const char *sBusRef, const char *sEcuName)</argsstring>
                <name>NMH_GetStationAddrInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>sEcuName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5046" column="39" declfile="CAPLPluginApi.h" declline="5046"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a93e57858b0b1dd67c19c4520d1b15fce" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKNM_Init</definition>
                <argsstring>()</argsstring>
                <name>OSEKNM_Init</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5048" column="34" declfile="CAPLPluginApi.h" declline="5048"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6657350889ea4c72d879051992e85556" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKNM_DeInit</definition>
                <argsstring>()</argsstring>
                <name>OSEKNM_DeInit</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5049" column="34" declfile="CAPLPluginApi.h" declline="5049"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a15d154660daa4a276937a985bc9a1674" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKNM_DNMPutCmd</definition>
                <argsstring>(const char *sBusStringIds, DWORD flag)</argsstring>
                <name>OSEKNM_DNMPutCmd</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>flag</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5050" column="34" declfile="CAPLPluginApi.h" declline="5050"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2f4c77f77970d6a88e73250ff8867c52" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKNM_TalkNM</definition>
                <argsstring>(const char *sBusStringIds)</argsstring>
                <name>OSEKNM_TalkNM</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Activates network management, enabling participation in the ring
                        <simplesect kind="note">
                            <para>void TalkNM(void); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5056" column="34" declfile="CAPLPluginApi.h" declline="5056"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a106b3808e93a2579325cb0d85a1d5b3c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKNM_SilentNM</definition>
                <argsstring>(const char *sBusStringIds)</argsstring>
                <name>OSEKNM_SilentNM</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This call results in network management no longer participating in the ring and no longer observing incoming messages
                        <simplesect kind="note">
                            <para>void SilentNM(void); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5062" column="34" declfile="CAPLPluginApi.h" declline="5062"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abd145707bf418fa692af30bc85cb35bd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKNM_GotoMode_BusSleep</definition>
                <argsstring>(const char *sBusStringIds)</argsstring>
                <name>OSEKNM_GotoMode_BusSleep</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function indicates to network management that the application is ready to sleep
                        <simplesect kind="note">
                            <para>void GotoMode_BusSleep(void); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5068" column="34" declfile="CAPLPluginApi.h" declline="5068"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a68817ba709310df14f5f541f204728bc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKNM_GotoMode_Awake</definition>
                <argsstring>(const char *sBusStringIds)</argsstring>
                <name>OSEKNM_GotoMode_Awake</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function can be used while network management is running to reverse the ready-to-sleep status of the application If the application is already asleep, this function should be called in order to initialize network management. The function is then generally called from the apCanWakeUp function
                        <simplesect kind="note">
                            <para>void GotoMode_Awake(void); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5075" column="34" declfile="CAPLPluginApi.h" declline="5075"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae1f3b197591992f66db2b016d7f7a992" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::linSendWakeupInternal</definition>
                <argsstring>(const char *sBusStringIds, __int32 ttobrk, __int32 count, unsigned __int32 length)</argsstring>
                <name>linSendWakeupInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>ttobrk</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>count</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>length</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This command is used to send Wakeup frames. Wakeup frames can only be sent while the LIN hardware is in Sleep mode. If no parameters are given, the default values of the parameters are used
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ttobrk</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>This parameter specifies the time difference between the transmissions of two consecutive Wakeup frames, i.e. the time between end of one wake-up frame and start of the next one Units of this parameter as well as default value depend on the hardware settings (see Hardware Configuration: LIN) Value range (for units expected in bit times): 20 .. 50000 Value range (for units expected in ms): 1 .. 65536 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>count</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Sets the number of Wakeup frame retransmissions Value range: 1�255 Default value depends on the hardware settings: see Hardware Configuration: LIN </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>This parameter sets the length of the wake-up frame to be sent in microseconds. The resolution is 50 �s This parameter is only used by LIN2.x slave nodes Value range: 250...5000 �s Default value depends on the hardware settings: see Hardware Configuration: LIN </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>On success, a value unequal to zero, otherwise zero </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long linSendWakeup() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5093" column="39" declfile="CAPLPluginApi.h" declline="5093"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9a467f117849446d00d3297c41cfec67" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::linChangeSchedTableInternal</definition>
                <argsstring>(const char *sBusStringIds, unsigned __int32 tableIndex, unsigned __int32 slotIndex, unsigned __int32 onSlotIndex)</argsstring>
                <name>linChangeSchedTableInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>tableIndex</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>slotIndex</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>onSlotIndex</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function switches from the current schedule table to another one
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tableIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Index of the schedule table to be changed to. Value range: 0..N-1, where N is a total number of defined schedule tables </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slotIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Index of slot to be started within the new schedule table. Default value: 0. Value range: 0..Y-1, where Y is a total number of slots in the new schedule table </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>onSlotIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Index of last slot in the current schedule table to be sent before changing to the new schedule table. Default value: -2 - makes change immediately Value range: -2..X-1, where X is a total number of slots in the current schedule table Value: -1 - makes change on reaching the end of current schedule table Value: -2 - makes change immediately </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Index of the current schedule table or -1 if no active schedule table exists and on failure </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long linChangeSchedTable(dword tableIndex) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5106" column="39" declfile="CAPLPluginApi.h" declline="5106"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a11e52407934fb8c72b63f95839e92687" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::linSendSleepModFrmInternal</definition>
                <argsstring>(const char *sBusStringIds, __int32 silent, __int32 restartScheduler, __int32 wakeupIdentifier)</argsstring>
                <name>linSendSleepModFrmInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sBusStringIds</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>silent</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>restartScheduler</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>wakeupIdentifier</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function leads to a transmission of a go-to-sleep-command
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>silent</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>When this flag is set the LIN hardware switches to Sleep mode without sending a go-to-sleep-command before </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>restartScheduler</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines if index of the slot to be started with after wake-up has to be reset, i.e. it becomes 0 </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>wakeupIdentifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>LIN frame identifier to be sent additionally directly after sending a wake-up signal </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>On success, a value unequal to zero, otherwise zero </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long linSendSleepModFrm (long silent, long restartScheduler, long wakeupIdentifier) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5116" column="39" declfile="CAPLPluginApi.h" declline="5116"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a79ea5db2e901c9bbe5c17b2579907db4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int32</type>
                <definition>unsigned __int32 capl::linGetProtectedID</definition>
                <argsstring>(__int32 frameID)</argsstring>
                <name>linGetProtectedID</name>
                <param>
                    <type>__int32</type>
                    <declname>frameID</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With this function it is possible to calculate protected ID for the corresponding LIN frame identifier (i.e. the frame identifier with parity bits)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>frameID</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>LIN frame identifier whose protected ID will be calculated. Value range: 0 .. 63 </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Returns the calculated protected identifier or -1 on failure </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword linGetProtectedID (long frameID) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5124" column="50" declfile="CAPLPluginApi.h" declline="5124"
                          declcolumn="50" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4c8ab8f2a7e15283ce75d6dbe19f2ab2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IsRunningOnRemoteKernel</definition>
                <argsstring>()</argsstring>
                <name>IsRunningOnRemoteKernel</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function is used to get the information whether the CAPL code is executed on the local PC or by a runtime kernel running on a remote device (VN8900/CANoe RT Server)
                        <simplesect kind="return">
                            <para>1 : True (execution on remote runtime kernel) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0 : False (execution on local PC) </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IsRunningOnRemoteKernel() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5132" column="39" declfile="CAPLPluginApi.h" declline="5132"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a44242ab0afed98fcd1aed0df63123ee1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strtoul</definition>
                <argsstring>(const char *s, unsigned __int32 &amp;result)</argsstring>
                <name>strtoul</name>
                <param>
                    <type>const char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>unsigned __int32 &amp;</type>
                    <declname>result</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts the string s to an unsigned 32bit integer. The number base is hexadecimal if the string starts with �0x�, octal if it starts with �0�, decimal otherwise. Whitespace (spaces or tabs) at the start of the string is ignored
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>result</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Contains the converted value after the call. The value is 0 if the string can�t be converted to a number. It is the largest possible positive/negative number in case of overflow </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: If s is empty or startIndex is larger than strlen(s) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: An overflow occurs </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Otherwise, returns the index of the first character after the number </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int strtoul(char s[], dword&amp; result); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5143" column="39" declfile="CAPLPluginApi.h" declline="5143"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1da07778a85192c0b7927b84a7753c98" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strtoul_index</definition>
                <argsstring>(const char *s, unsigned __int32 startIndex, unsigned __int32 &amp;result)</argsstring>
                <name>strtoul_index</name>
                <param>
                    <type>const char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>startIndex</declname>
                </param>
                <param>
                    <type>unsigned __int32 &amp;</type>
                    <declname>result</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts the string s to an unsigned 32bit integer. The number base is hexadecimal if the string starts with �0x�, octal if it starts with �0�, decimal otherwise. Whitespace (spaces or tabs) at the start of the string is ignored
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>result</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Contains the converted value after the call. The value is 0 if the string can�t be converted to a number. It is the largest possible positive/negative number in case of overflow </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>startIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Position in s where the conversion shall begin </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: If s is empty or startIndex is larger than strlen(s) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: An overflow occurs </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Otherwise, returns the index of the first character after the number </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int strtoul(char s[], dword startIndex, dword&amp; result); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5155" column="39" declfile="CAPLPluginApi.h" declline="5155"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae75e7b0e58797283316fa40fb61911ad" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strtoull</definition>
                <argsstring>(const char *s, unsigned __int64 &amp;result)</argsstring>
                <name>strtoull</name>
                <param>
                    <type>const char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>unsigned __int64 &amp;</type>
                    <declname>result</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts the string s to an unsigned 64bit integer. The number base is hexadecimal if the string starts with �0x�, octal if it starts with �0� , decimal otherwise. Whitespace (spaces or tabs) at the start of the string is ignored
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>result</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Contains the converted value after the call. The value is 0 if the string can�t be converted to a number. It is the largest possible positive/negative number in case of overflow </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: If s is empty or startIndex is larger than strlen(s) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: An overflow occurs </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Otherwise, returns the index of the first character after the number </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int strtoull(char s[], qword&amp; result); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5166" column="39" declfile="CAPLPluginApi.h" declline="5166"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abf21a3124b55233e903779dd94e5d681" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strtoull_index</definition>
                <argsstring>(const char *s, unsigned __int32 startIndex, unsigned __int64 &amp;result)</argsstring>
                <name>strtoull_index</name>
                <param>
                    <type>const char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>startIndex</declname>
                </param>
                <param>
                    <type>unsigned __int64 &amp;</type>
                    <declname>result</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts the string s to an unsigned 64bit integer. The number base is hexadecimal if the string starts with �0x�, octal if it starts with �0� , decimal otherwise. Whitespace (spaces or tabs) at the start of the string is ignored
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>result</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Contains the converted value after the call. The value is 0 if the string can�t be converted to a number. It is the largest possible positive/negative number in case of overflow </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>startIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Position in s where the conversion shall begin </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: If s is empty or startIndex is larger than strlen(s) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: An overflow occurs </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Otherwise, returns the index of the first character after the number </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>int strtoull(char s[], dword startIndex, qword&amp; result); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5178" column="39" declfile="CAPLPluginApi.h" declline="5178"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a452ef0ab34b1f98d8996599da6bc9ec0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strstr_regex</definition>
                <argsstring>(const char *s, const char *pattern)</argsstring>
                <name>strstr_regex</name>
                <param>
                    <type>const char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>pattern</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches for a regular expression pattern in a string
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be searched </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pattern</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Regular expression which is searched. For the regular expression, the same syntax is used as in the Perl programming language </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The position in s where the pattern was found, or -1 if it wasn�t found </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long strstr_regex(char s[], char pattern[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5187" column="39" declfile="CAPLPluginApi.h" declline="5187"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7b2dfda5be5353e575605c50214601be" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::strstr_regex_off</definition>
                <argsstring>(const char *s, long offset, const char *pattern)</argsstring>
                <name>strstr_regex_off</name>
                <param>
                    <type>const char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>offset</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>pattern</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Searches for a regular expression pattern in a string
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be searched </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>offset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Offset in s at which the search shall be started </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pattern</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Regular expression which is searched. For the regular expression, the same syntax is used as in the Perl programming language </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The position in s where the pattern was found, or -1 if it wasn�t found </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long strstr_regex_off(char s[], long offset, char pattern[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5197" column="39" declfile="CAPLPluginApi.h" declline="5197"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a95ddbd2031dc69115b41374de7a38dcc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::str_replace</definition>
                <argsstring>(char *s, const char *searched, const char *replacement)</argsstring>
                <name>str_replace</name>
                <param>
                    <type>char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>searched</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>replacement</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Replaces all occurrences of a text in a string with another string
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be modified </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>searched</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Text which shall be replaced </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>replacement</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Text which replaces the original characters </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if successful, 0 if the resulting string would be too long for the buffer s </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long str_replace(char s[], char searched[], char replacement[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5207" column="39" declfile="CAPLPluginApi.h" declline="5207"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a99d8b9e2314802278ba9dd5d0e1193c3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::str_replace_off</definition>
                <argsstring>(char *s, long startoffset, const char *replacement, long length)</argsstring>
                <name>str_replace_off</name>
                <param>
                    <type>char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>startoffset</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>replacement</declname>
                </param>
                <param>
                    <type>long</type>
                    <declname>length</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Replaces a part of a string with another string
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be modified </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>startoffset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Offset at which to start replacing characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>replacement</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Text which replaces the original characters </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum number of characters to replace </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if successful, 0 if the resulting string would be too long for the buffer s </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long str_replace(char s[], long startoffset, char replacement[], long length) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5218" column="39" declfile="CAPLPluginApi.h" declline="5218"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3d79eeb405a1049b3151346d26d67773" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::getConfigurationName</definition>
                <argsstring>(char buffer[], unsigned __int32 bufferLength)</argsstring>
                <name>getConfigurationName</name>
                <param>
                    <type>char</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>bufferLength</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the file name of the currently loaded configuration. It includes neither the file extension nor any path information, for example CANSystemDemo
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Space for the returned name </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferLength</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1 Buffer too small </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;= 0 Operation successful. The return value specifies the length of the configuration name </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long getConfigurationName(char buffer[], dword bufferLength); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5228" column="39" declfile="CAPLPluginApi.h" declline="5228"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a733277687c6ce657fc9a0c6e936f581d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::convertTimestamp</definition>
                <argsstring>(unsigned __int32 timestamp, unsigned __int32 &amp;days, unsigned __int8 &amp;hours, unsigned __int8 &amp;minutes, unsigned __int8 &amp;seconds, unsigned __int16 &amp;milliSeconds, unsigned __int16 &amp;microSeconds)</argsstring>
                <name>convertTimestamp</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>timestamp</declname>
                </param>
                <param>
                    <type>unsigned __int32 &amp;</type>
                    <declname>days</declname>
                </param>
                <param>
                    <type>unsigned __int8 &amp;</type>
                    <declname>hours</declname>
                </param>
                <param>
                    <type>unsigned __int8 &amp;</type>
                    <declname>minutes</declname>
                </param>
                <param>
                    <type>unsigned __int8 &amp;</type>
                    <declname>seconds</declname>
                </param>
                <param>
                    <type>unsigned __int16 &amp;</type>
                    <declname>milliSeconds</declname>
                </param>
                <param>
                    <type>unsigned __int16 &amp;</type>
                    <declname>microSeconds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts a time stamp to separate parts
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timestamp</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Time stamp in nanoseconds </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>days</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the days of the time stamp </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>hours</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the hours the time stamp (between 0 and 23) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>minutes</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the minutes of the time stamp (between 0 and 59) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>seconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the seconds of the time stamp (between 0 and 59) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>milliseconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the milliseconds of the time stamp (between 0 and 999) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>microseconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the microseconds of the time stamp (between 0 and 999) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void convertTimestamp(dword timestamp, dword&amp; days, byte&amp; hours, byte&amp; minutes, byte&amp; seconds, word&amp; milliSeconds, word&amp; microSeconds); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5241" column="39" declfile="CAPLPluginApi.h" declline="5241"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad40b782289a126c5106007ccfa4bd3cc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::convertTimestampNS</definition>
                <argsstring>(unsigned __int64 timestamp, unsigned __int32 &amp;days, unsigned __int8 &amp;hours, unsigned __int8 &amp;minutes, unsigned __int8 &amp;seconds, unsigned __int16 &amp;milliSeconds, unsigned __int16 &amp;microSeconds, unsigned __int16 &amp;nanoSeconds)</argsstring>
                <name>convertTimestampNS</name>
                <param>
                    <type>unsigned __int64</type>
                    <declname>timestamp</declname>
                </param>
                <param>
                    <type>unsigned __int32 &amp;</type>
                    <declname>days</declname>
                </param>
                <param>
                    <type>unsigned __int8 &amp;</type>
                    <declname>hours</declname>
                </param>
                <param>
                    <type>unsigned __int8 &amp;</type>
                    <declname>minutes</declname>
                </param>
                <param>
                    <type>unsigned __int8 &amp;</type>
                    <declname>seconds</declname>
                </param>
                <param>
                    <type>unsigned __int16 &amp;</type>
                    <declname>milliSeconds</declname>
                </param>
                <param>
                    <type>unsigned __int16 &amp;</type>
                    <declname>microSeconds</declname>
                </param>
                <param>
                    <type>unsigned __int16 &amp;</type>
                    <declname>nanoSeconds</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts a time stamp to separate parts
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timestamp</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Time stamp in 10 microseconds </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>days</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the days of the time stamp </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>hours</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the hours the time stamp (between 0 and 23) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>minutes</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the minutes of the time stamp (between 0 and 59) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>seconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the seconds of the time stamp (between 0 and 59) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>milliseconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the milliseconds of the time stamp (between 0 and 999) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>nanoseconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the nanoseconds of the time stamp (between 0 and 999) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>microseconds</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Receives the microseconds of the time stamp (between 0 and 999) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void convertTimestampNS(qword timestamp, dword&amp; days, byte&amp; hours, byte&amp; minutes, byte&amp; seconds, word&amp; milliSeconds, word&amp; microSeconds, word&amp; nanoSeconds); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5255" column="39" declfile="CAPLPluginApi.h" declline="5255"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1acef6458195e2fe401a16e953b258f385" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::str_match_regex</definition>
                <argsstring>(char s[], char pattern[])</argsstring>
                <name>str_match_regex</name>
                <param>
                    <type>char</type>
                    <declname>s</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>char</type>
                    <declname>pattern</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks whether a string completely matches a regular expression pattern
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>s</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be checked </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pattern</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Regular expression against which the string is matched. For the regular expression, the same syntax is used as in the Perl programming language </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if the string matches the pattern, 0 if it doesn�t match the pattern </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long str_match_regex(char s[], char pattern[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5264" column="39" declfile="CAPLPluginApi.h" declline="5264"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa279b4f7a2b602bcd7b7e9d96ef7f675" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::_gcvtInternal</definition>
                <argsstring>(double val, __int32 digits, char *s, __int32 length)</argsstring>
                <name>_gcvtInternal</name>
                <param>
                    <type>double</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>digits</declname>
                </param>
                <param>
                    <type>char *</type>
                    <declname>s</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5266" column="34" declfile="CAPLPluginApi.h" declline="5266"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a46da59a64409e3fc2a87247c0aef8e26" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>void</type>
                <definition>void capl::_gcvt</definition>
                <argsstring>(double val, __int32 digits, T &amp;s)</argsstring>
                <name>_gcvt</name>
                <param>
                    <type>double</type>
                    <declname>val</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>digits</declname>
                </param>
                <param>
                    <type>T &amp;</type>
                    <declname>s</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5268" column="10" bodyfile="CAPLPluginApi.h" bodystart="5268"
                          bodyend="5271" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a98aa7d22a7267ff96aabcabe80189b8e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int8</type>
                <definition>__int8 capl::toUpperChar</definition>
                <argsstring>(__int8 c)</argsstring>
                <name>toUpperChar</name>
                <param>
                    <type>__int8</type>
                    <declname>c</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Transforms a character or string to upper case. Only characters a-z and A-Z are supported
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>c</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Character to be transformed </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Character to be transformed </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>char toUpper(char c); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5279" column="38" declfile="CAPLPluginApi.h" declline="5279"
                          declcolumn="38" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a549cd14cc1a1986f169f4327066fe07a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int32</type>
                <definition>unsigned __int32 capl::toUpperInternal</definition>
                <argsstring>(__int8 dest[], __int8 source[], unsigned __int32 bufferSize, unsigned __int32 sourceSize)</argsstring>
                <name>toUpperInternal</name>
                <param>
                    <type>__int8</type>
                    <declname>dest</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int8</type>
                    <declname>source</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>bufferSize</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>sourceSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Transforms a character or string to upper case. Only characters a-z and A-Z are supported
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>source</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>String to be transformed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination buffer for the transformed string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferSize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of the destination buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void toUpper(char dest[], char source[], dword bufferSize); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5288" column="50" declfile="CAPLPluginApi.h" declline="5288"
                          declcolumn="50" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af701aca8046a0ffd523744cea2e73a98" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>unsigned __int32</type>
                <definition>unsigned __int32 capl::toUpper</definition>
                <argsstring>(__int8 dest[], T source, unsigned __int32 bufferSize)</argsstring>
                <name>toUpper</name>
                <param>
                    <type>__int8</type>
                    <declname>dest</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>T</type>
                    <declname>source</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>bufferSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5290" column="26" bodyfile="CAPLPluginApi.h" bodystart="5290"
                          bodyend="5293" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6401f12c91332e050168b1223d0066a0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int32</type>
                <definition>unsigned __int32 capl::interpretAsDword</definition>
                <argsstring>(float x)</argsstring>
                <name>interpretAsDword</name>
                <param>
                    <type>float</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        These functions interpret the actual bytes of a value as if the value was of another data type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number which shall be interpreted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The interpreted value </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword interpretAsDword(float x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5301" column="50" declfile="CAPLPluginApi.h" declline="5301"
                          declcolumn="50" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aae1490c960360376e896de17a31ef010" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>float</type>
                <definition>float capl::interpretAsFloat</definition>
                <argsstring>(unsigned __int32 x)</argsstring>
                <name>interpretAsFloat</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        These functions interpret the actual bytes of a value as if the value was of another data type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number which shall be interpreted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The interpreted value </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>float interpretAsFloat(dword x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5309" column="35" declfile="CAPLPluginApi.h" declline="5309"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a480c6ee067ec8c274344e2649b0161b5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int64</type>
                <definition>unsigned __int64 capl::interpretAsQword</definition>
                <argsstring>(double x)</argsstring>
                <name>interpretAsQword</name>
                <param>
                    <type>double</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        These functions interpret the actual bytes of a value as if the value was of another data type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number which shall be interpreted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The interpreted value </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>qword interpretAsQword(double x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5317" column="48" declfile="CAPLPluginApi.h" declline="5317"
                          declcolumn="48" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7e6a1a1bc1f20a73d940bfdccdf800b3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::interpretAsDouble</definition>
                <argsstring>(unsigned __int64 x)</argsstring>
                <name>interpretAsDouble</name>
                <param>
                    <type>unsigned __int64</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        These functions interpret the actual bytes of a value as if the value was of another data type
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>x</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number which shall be interpreted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The interpreted value </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>double interpretAsDouble(qword x); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5325" column="36" declfile="CAPLPluginApi.h" declline="5325"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a79d90dc8d00895015bcd45054b70d728" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int32</type>
                <definition>unsigned __int32 capl::interpretAsDwordByObj</definition>
                <argsstring>(IEnvVar &amp;x)</argsstring>
                <name>interpretAsDwordByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5327" column="50" declfile="CAPLPluginApi.h" declline="5327"
                          declcolumn="50" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a63999774a860fc5bff7b206ed02f6962" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>float</type>
                <definition>float capl::interpretAsFloatByObj</definition>
                <argsstring>(IEnvVar &amp;x)</argsstring>
                <name>interpretAsFloatByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5328" column="35" declfile="CAPLPluginApi.h" declline="5328"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab1e25cb4783e75420b6b6c825f9e2f10" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int64</type>
                <definition>unsigned __int64 capl::interpretAsQwordByObj</definition>
                <argsstring>(IEnvVar &amp;x)</argsstring>
                <name>interpretAsQwordByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5329" column="48" declfile="CAPLPluginApi.h" declline="5329"
                          declcolumn="48" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa0870a834378f84a48ff13ee89fb58f6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::interpretAsDoubleByObj</definition>
                <argsstring>(IEnvVar &amp;x)</argsstring>
                <name>interpretAsDoubleByObj</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>x</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5330" column="36" declfile="CAPLPluginApi.h" declline="5330"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a14b9cba57642378536de0a1b195e58f9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::ReplayState</definition>
                <argsstring>(const char *pName)</argsstring>
                <name>ReplayState</name>
                <param>
                    <type>const char *</type>
                    <declname>pName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the state of the Replay Block with the name pName
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Replay Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Replay Block is stopped (state: stopped) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Execution of the Replay file was started (state: running) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>2: Execution of the Replay file was stopped (state: suspended) </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>(dword)-1: when the Replay Block does not exist </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword ReplayState (char pName[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5353" column="35" declfile="CAPLPluginApi.h" declline="5353"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a18f058c17928871a065eb03e628839c7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::ReplayStart</definition>
                <argsstring>(const char *pName)</argsstring>
                <name>ReplayStart</name>
                <param>
                    <type>const char *</type>
                    <declname>pName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts the Replay Block with the name pName
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Replay Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1: If successful </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: If the Replay Block does not exist or cannot be restarted </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword ReplayStart (char pName[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5369" column="35" declfile="CAPLPluginApi.h" declline="5369"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a842599a3b3a8c7f366e8feeadcc6d419" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::ReplayStop</definition>
                <argsstring>(const char *pName)</argsstring>
                <name>ReplayStop</name>
                <param>
                    <type>const char *</type>
                    <declname>pName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops the Replay Block with the name pName
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Replay Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1: If successful </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: If the Replay Block does not exist or cannot be restarted </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword ReplayStop (char pName[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5387" column="35" declfile="CAPLPluginApi.h" declline="5387"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1acd8e8580f79f6af4d12452302e989e3f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::ReplaySuspend</definition>
                <argsstring>(const char *pName)</argsstring>
                <name>ReplaySuspend</name>
                <param>
                    <type>const char *</type>
                    <declname>pName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Suspends the Replay Block with the name pName
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Replay Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1: If successful </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: If the Replay Block does not exist or cannot be restarted </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword ReplaySuspend (char pName[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5403" column="35" declfile="CAPLPluginApi.h" declline="5403"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae23c93148f3bcd697f69728b5d21af3b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::ReplayResume</definition>
                <argsstring>(const char *pName)</argsstring>
                <name>ReplayResume</name>
                <param>
                    <type>const char *</type>
                    <declname>pName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts the Replay Block with the name pName after it is suspended by ReplaySuspend
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the Replay Block </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1: If successful </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: If the Replay Block does not exist or cannot be restarted </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword ReplayResume (char pName[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5419" column="35" declfile="CAPLPluginApi.h" declline="5419"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad26cedf4ddba32af49d09432457ab9a1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILControlInitInternal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILControlInitInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Initialization of CANoe IL. This function may only be used in on preStart to prevent the IL autostart function
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this query </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-50: Node layer is inactive � possibly deactivated in the node�s configuration dialog </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILControlInit () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5434" column="39" declfile="CAPLPluginApi.h" declline="5434"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a720e1d4107ca701529fd4a8015aadab8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILControlStartInternal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILControlStartInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Cyclical sending starts; setting signals is now possible. Signal changes that occurred while the interaction layer was switched off (by ILControlStop or ILControlSimulationOff) are not considered on its activation
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this query </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-50: Node layer is inactive � possibly deactivated in the node�s configuration dialog </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILControlStart () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5443" column="39" declfile="CAPLPluginApi.h" declline="5443"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a90c3cee271c9edd5eb8db4859a2f1c7f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILControlStopInternal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILControlStopInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sending is completely stopped. In this state the interaction layer is inoperative. Neither function calls, nor signal changes are considered during its inactivity and on its activation (by ILControlStart)
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this query </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-50: Node layer is inactive � possibly deactivated in the node�s configuration dialog </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILControlStop() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5453" column="39" declfile="CAPLPluginApi.h" declline="5453"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae4c634daa6bac16a26e00c1f76de8b8b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILControlWaitInternal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILControlWaitInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Cyclical sending is stopped; setting signals is possible. Cyclical sending is continued only after an ILControlResume
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this query </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-50: Node layer is inactive � possibly deactivated in the node�s configuration dialog </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILControlWait() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5463" column="39" declfile="CAPLPluginApi.h" declline="5463"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aee3b732d12315e3e7dcc89c810440db1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILActivateClamp15Internal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILActivateClamp15Internal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Forwards the appropriate state (active/deactive) of clamp 15 to the NM simulation (if present)
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: The IL is not initialized properly. The function is ignored </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILActivateClamp15(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5472" column="39" declfile="CAPLPluginApi.h" declline="5472"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7cc82d068ea308106891bab3dbb13e90" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILDeactivateClamp15Internal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILDeactivateClamp15Internal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Forwards the appropriate state (active/deactive) of clamp 15 to the NM simulation (if present)
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: The IL is not initialized properly. The function is ignored </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILDeactivateClamp15(); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5481" column="39" declfile="CAPLPluginApi.h" declline="5481"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a47b64982088603a2240c235051d8004b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILControlSimulationOnInternal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILControlSimulationOnInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Start the simulation of the IL. The IL is in the same state as it was before stopping it by the function ILControlSimulationOff
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this query </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILControlSimulationOn() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5489" column="39" declfile="CAPLPluginApi.h" declline="5489"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abcba89a906e40f20d7f289d76ba436c8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILControlSimulationOffInternal</definition>
                <argsstring>(LPCSTR sEcuRef)</argsstring>
                <name>ILControlSimulationOffInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sEcuRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The simulation of the IL is stopped. After that no other function to control the IL has an effect to the IL. To restart the simulation of the IL use ILControlSimulationOn
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILControlSimulationOff() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5496" column="39" declfile="CAPLPluginApi.h" declline="5496"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5ca7056d1ebf27aff9cd80a893936855" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILSetMsgEventInternal</definition>
                <argsstring>(LPCSTR sMsgRef)</argsstring>
                <name>ILSetMsgEventInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends the transferred message directly to the bus if the network is active. The send model is ignored
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>msg</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message that should be sent </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this query </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-50: Nodelayer is inactive � possibly deactivated in the node�s configuration dialog </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-100: Signal or message was not found in the database or is not mapped to this node </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-104: General error for invalid calls </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILSetMsgEvent (dbMessage msg) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5508" column="39" declfile="CAPLPluginApi.h" declline="5508"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9c4d793406c51a9a34c6c751913b857d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILFaultInjectionEnableMsg</definition>
                <argsstring>(LPCSTR sMsgRef)</argsstring>
                <name>ILFaultInjectionEnableMsg</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Enables the sending of the message
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>msg</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message that should be re-enabled after having disabled it with ILFaultInjectionDisableMsg </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this function </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this function </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-100: Signal or message was not found in the database or is not mapped to this node </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILFaultInjectionEnableMsg (dbMessage msg) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5519" column="39" declfile="CAPLPluginApi.h" declline="5519"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0abcd3d03c53031aea084bf8104bcc79" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILFaultInjectionDisableMsg</definition>
                <argsstring>(LPCSTR sMsgRef)</argsstring>
                <name>ILFaultInjectionDisableMsg</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Disables the sending of the message except by calling the function ILSetMsgEvent
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>msg</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message that should be disabled </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: No error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Momentary state of the IL does not permit this function </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-50: Nodelayer is inactive � possibly deactivated in the node�s configuration dialog </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-100: Signal or message was not found in the database or is not mapped to this node </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long ILFaultInjectionDisableMsg (dbMessage msg) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5530" column="39" declfile="CAPLPluginApi.h" declline="5530"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af063238b0671b39028ea7b1987dccb7b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILSetPDUTimingCyclic</definition>
                <argsstring>(LPCSTR sMsgRef, __int32 timing, __int32 offset, __int32 period, __int32 disturbanceCount, __int32 flags)</argsstring>
                <name>ILSetPDUTimingCyclic</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>timing</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>period</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>disturbanceCount</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>flags</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5531" column="39" declfile="CAPLPluginApi.h" declline="5531"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a09496548e9f783354079b05bf2c89dc5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILResetPDUTimingCyclic</definition>
                <argsstring>(LPCSTR sMsgRef, __int32 timing)</argsstring>
                <name>ILResetPDUTimingCyclic</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>timing</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5532" column="39" declfile="CAPLPluginApi.h" declline="5532"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af8f1c959509182880a15fdafdf81e967" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILResetPDUTimingEvent</definition>
                <argsstring>(LPCSTR sMsgRef, __int32 timing)</argsstring>
                <name>ILResetPDUTimingEvent</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>timing</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5533" column="39" declfile="CAPLPluginApi.h" declline="5533"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a47517a2081112851e9847f4f5115a2b7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILSetPDUAsrTXMode</definition>
                <argsstring>(LPCSTR sMsgRef, __int32 mode, __int32 disturbanceCount, __int32 flags)</argsstring>
                <name>ILSetPDUAsrTXMode</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>mode</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>disturbanceCount</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>flags</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5534" column="39" declfile="CAPLPluginApi.h" declline="5534"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a71e8fcf9ae380844ea7cbb1fb20c12cd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILSetPDUTimingEvent</definition>
                <argsstring>(LPCSTR sMsgRef, __int32 timing, __int32 enabled, __int32 repetitionCount, __int32 repetitionPeriod, __int32 debounceDelay, __int32 disturbanceCount, __int32 flags)</argsstring>
                <name>ILSetPDUTimingEvent</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>timing</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>enabled</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>repetitionCount</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>repetitionPeriod</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>debounceDelay</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>disturbanceCount</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>flags</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5535" column="39" declfile="CAPLPluginApi.h" declline="5535"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abcd8954ba23a160d66d5fab06af8ffbe" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ILSetPDUEvent</definition>
                <argsstring>(LPCSTR sMsgRef)</argsstring>
                <name>ILSetPDUEvent</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sMsgRef</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5539" column="39" declfile="CAPLPluginApi.h" declline="5539"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab68d10bd24754c0a1b6f81d8d7a8085c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagInitialize</definition>
                <argsstring>(capl::IDiagBase &amp;request)</argsstring>
                <name>diagInitialize</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                    <declname>request</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5546" column="39" declfile="CAPLPluginApi.h" declline="5546"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a53bb8297a9c88e3886493284699d96b7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagInitializeQualivier</definition>
                <argsstring>(capl::IDiagBase &amp;request, char serviceQualifier[])</argsstring>
                <name>diagInitializeQualivier</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                    <declname>request</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>serviceQualifier</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Reinitializes the object for the given service or primitive. Diagnostics request will be initialized with the default request parameters of the service, while diagnostic responses will be initialized with the default parameters of the first or specified primitive of the service. If the service is not defined, or the primitive is not defined at the given service, nothing happens and an error code is returned
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>object</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object to re-initialize </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>serviceQualifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Qualifier of the service that should be used for reinterpretation </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: No error, OK </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&lt;0: Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagInitialize( diagRequest object, char serviceQualifier[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5556" column="39" declfile="CAPLPluginApi.h" declline="5556"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a597c5f73325e8b52bcb9d98bf52dfeb3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagInitializePrimitive</definition>
                <argsstring>(capl::IDiagResponse &amp;request, char serviceQualifier[], char primitiveQualifier[])</argsstring>
                <name>diagInitializePrimitive</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">capl::IDiagResponse</ref> &amp;</type>
                    <declname>request</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>serviceQualifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>char</type>
                    <declname>primitiveQualifier</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Reinitializes the object for the given service or primitive. Diagnostics request will be initialized with the default request parameters of the service, while diagnostic responses will be initialized with the default parameters of the first or specified primitive of the service. If the service is not defined, or the primitive is not defined at the given service, nothing happens and an error code is returned
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>object</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object to re-initialize </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>serviceQualifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Qualifier of the service that should be used for reinterpretation </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>primitiveQualifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Qualifier of the service primitive that should be used for reinterpretation </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: No error, OK </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&lt;0: Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagInitialize( diagReponse object, char serviceQualifier[], char primitiveQualifier[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5567" column="39" declfile="CAPLPluginApi.h" declline="5567"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae346b302fd418f5d8c016d68a58589f3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSetParameterDouble</definition>
                <argsstring>(capl::IDiagBase &amp;, char parameterName[], double newValue)</argsstring>
                <name>diagSetParameterDouble</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>double</type>
                    <declname>newValue</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the numeric parameter to the specified value
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier (NOT the language-dependent name of the parameter!) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>newValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Numeric value to which the parameter should be set </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagSetParameter (diagResponse obj, char parameterName[], double newValue) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5577" column="39" declfile="CAPLPluginApi.h" declline="5577"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5b62178f9bd20c0fee28612e3f81c30b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSetParameterDoubleMode</definition>
                <argsstring>(capl::IDiagBase &amp;, __int32 mode, char parameterName[], double newValue)</argsstring>
                <name>diagSetParameterDoubleMode</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>mode</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>double</type>
                    <declname>newValue</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the numeric parameter to the specified value
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mode</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Access </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier (NOT the language-dependent name of the parameter!) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>newValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Numeric value to which the parameter should be set </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagSetParameter (diagResponse obj, long mode, char parameterName[], double newValue) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5588" column="39" declfile="CAPLPluginApi.h" declline="5588"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a690729d499430b8c38735d7bfd3546a4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSetParameterString</definition>
                <argsstring>(capl::IDiagBase &amp;, char parameterName[], char newValue[])</argsstring>
                <name>diagSetParameterString</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>char</type>
                    <declname>newValue</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets a parameter to the symbolically-specified value. This is possible for all parameters, also numeric ones
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>newValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Symbolic value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagSetParameter (diagResponse obj, char parameterName[], char newValue[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5598" column="39" declfile="CAPLPluginApi.h" declline="5598"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3d4cfa5b519a74e212139b4381f64921" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetParameterDoubleParam</definition>
                <argsstring>(capl::IDiagBase &amp;, char parameterName[], double output[1])</argsstring>
                <name>diagGetParameterDoubleParam</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>double</type>
                    <declname>output</declname>
                    <array>[1]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of the numeric parameter, either in an output field or as return value (without the possibility of checking the correct function)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>output</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Output field </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code or value of the parameter or 0.0 if this could not be acquired </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetParameter (diagResponse obj, char parameterName[], double output[1]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5608" column="39" declfile="CAPLPluginApi.h" declline="5608"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa6f340984defe4d7562d939f4b94d221" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::diagGetParameterDouble</definition>
                <argsstring>(capl::IDiagBase &amp;, char parameterName[])</argsstring>
                <name>diagGetParameterDouble</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of the numeric parameter, either in an output field or as return value (without the possibility of checking the correct function)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code or value of the parameter or 0.0 if this could not be acquired </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>double diagGetParameter (diagResponse obj, char parameterName[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5616" column="36" declfile="CAPLPluginApi.h" declline="5616"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6972ec47443afddb7ec76b00a296534d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetParameterDoubleParamMode</definition>
                <argsstring>(capl::IDiagBase &amp;, __int32 mode, char parameterName[], double output[1])</argsstring>
                <name>diagGetParameterDoubleParamMode</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>mode</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>double</type>
                    <declname>output</declname>
                    <array>[1]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of the numeric parameter, either in an output field or as return value (without the possibility of checking the correct function)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Output</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Output field </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mode</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Access mode </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code or value of the parameter or 0.0 if this could not be acquired </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetParameter (diagResponse obj, long mode, char parameterName[], double output[1]) </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetParameter (diagResponse obj, long mode, char parameterName[], double output[1]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5627" column="39" declfile="CAPLPluginApi.h" declline="5627"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a77ebe631e453fec013b6c4efa8f2b8ce" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>double</type>
                <definition>double capl::diagGetParameterDoubleMode</definition>
                <argsstring>(capl::IDiagBase &amp;, __int32 mode, char parameterName[])</argsstring>
                <name>diagGetParameterDoubleMode</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>mode</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of the numeric parameter, either in an output field or as return value (without the possibility of checking the correct function)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mode</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Access mode </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code or value of the parameter or 0.0 if this could not be acquired </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetParameter (diagResponse obj, long mode, char parameterName[], double output[1]) </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>double diagGetParameter (diagResponse obj, long mode, char parameterName[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5637" column="36" declfile="CAPLPluginApi.h" declline="5637"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2e0a560e641c106176d5c44875fd311d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetParameterString</definition>
                <argsstring>(capl::IDiagBase &amp;, char parameterName[], char buffer[], unsigned __int32 buffersize)</argsstring>
                <name>diagGetParameterString</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameterName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>char</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>buffersize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the value of the numeric parameter, either in an output field or as return value (without the possibility of checking the correct function)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Output field </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffersize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of the buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of chars written to buffer or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetParameter (diagResponse obj, char parameterName[], char buffer[], dword buffersize) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5647" column="39" declfile="CAPLPluginApi.h" declline="5647"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7515f122fb997aabb93356c4a8fc1cad" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSendRequest</definition>
                <argsstring>(capl::IDiagRequest &amp;)</argsstring>
                <name>diagSendRequest</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_request" kindref="compound">capl::IDiagRequest</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends the request object to the ECU
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagSendRequest (diagRequest obj) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5655" column="39" declfile="CAPLPluginApi.h" declline="5655"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5809227ada52e8ad4f23d3584acc21b8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSendResponse</definition>
                <argsstring>(capl::IDiagResponse &amp;)</argsstring>
                <name>diagSendResponse</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">capl::IDiagResponse</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends the response object back to the tester. Can only be called in the ECU simulation
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagSendResponse (diagResponse obj) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5663" column="39" declfile="CAPLPluginApi.h" declline="5663"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2473e01cc43cfcc77860424477f75cd2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetPrimitiveData</definition>
                <argsstring>(capl::IDiagBase &amp;, BYTE buffer[], unsigned __int32 buffersize)</argsstring>
                <name>diagGetPrimitiveData</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>buffersize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Reads the raw data of the complete service primitive (all data that is transmitted via the transport protocol). When setting the data the length of the primitive is not changed
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>objxt</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Input/output buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffersize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer size </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of bytes copied into the buffer or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetPrimitiveData (diagResponse obj, byte* buffer, DWORD buffersize) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5673" column="39" declfile="CAPLPluginApi.h" declline="5673"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8eb2f27fbbb7eb2ed13f0e47ccda4c23" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSetPrimitiveData</definition>
                <argsstring>(capl::IDiagBase &amp;, BYTE buffer[], unsigned __int32 buffersize)</argsstring>
                <name>diagSetPrimitiveData</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>buffersize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the raw data of the complete service primitive (all data that is transmitted via the transport protocol). When setting the data the length of the primitive is not changed
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>objxt</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Input/output buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffersize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer size </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of bytes copied into the buffer or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagSetPrimitiveData (diagResponse obj, byte* buffer, DWORD buffersize) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5683" column="39" declfile="CAPLPluginApi.h" declline="5683"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a982700e6a6186b71ed55a683d5dd6227" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetPrimitiveSize</definition>
                <argsstring>(capl::IDiagBase &amp;)</argsstring>
                <name>diagGetPrimitiveSize</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the byte length of the object
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>request</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Request </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>response</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Response </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>&gt;0: Number of bytes </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&lt;0: Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long DiagGetPrimitiveSize( diagRequest request); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5693" column="39" declfile="CAPLPluginApi.h" declline="5693"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa5d7e8520c2688b0cae218f125a09d8d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagIsNegativeResponse</definition>
                <argsstring>(capl::IDiagResponse &amp;)</argsstring>
                <name>diagIsNegativeResponse</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">capl::IDiagResponse</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns value &lt;&gt; 0 if the object is a negative response to a request
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or &lt;&gt;0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagIsNegativeResponse (diagResponse obj) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5701" column="39" declfile="CAPLPluginApi.h" declline="5701"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a64f0ed4831e49616d07873ba197a9fb6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagIsPositiveResponse</definition>
                <argsstring>(capl::IDiagResponse &amp;)</argsstring>
                <name>diagIsPositiveResponse</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">capl::IDiagResponse</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns value &lt;&gt; 0 if the object is a positive response to a request
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>obj</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Diagnostics object </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or &lt;&gt;0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagIsPositiveResponse (diagResponse obj) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5709" column="39" declfile="CAPLPluginApi.h" declline="5709"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a32917ad1394efc3af88fb69d260ae9bb" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetResponseCode</definition>
                <argsstring>(capl::IDiagResponse &amp;)</argsstring>
                <name>diagGetResponseCode</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">capl::IDiagResponse</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the code of the specified response or last received response (for the specified request)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>resp</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Response </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: The response was positive, i.e. there is no error code. </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: No response has been received yet. </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Error code of the negative response. </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetResponseCode (diagResponse resp); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5720" column="39" declfile="CAPLPluginApi.h" declline="5720"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad0c86446b56b35ede8bce1d020794b06" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetLastResponseCode</definition>
                <argsstring>(capl::IDiagRequest &amp;)</argsstring>
                <name>diagGetLastResponseCode</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_request" kindref="compound">capl::IDiagRequest</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the code of the specified response or last received response (for the specified request)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>req</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Request </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: The response was positive, i.e. there is no error code. </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: No response has been received yet. </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Error code of the negative response. </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetLastResponseCode (diagRequest req); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5731" column="39" declfile="CAPLPluginApi.h" declline="5731"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2365e2f473967f5b1bbb5c84dbef58bb" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetLastResponse</definition>
                <argsstring>(capl::IDiagResponse &amp;)</argsstring>
                <name>diagGetLastResponse</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_response" kindref="compound">capl::IDiagResponse</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Saves the last response received (for the specified request) in the output object
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>respOut</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Output object for the received response </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetLastResponse (diagResponse respOut); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5739" column="39" declfile="CAPLPluginApi.h" declline="5739"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6e5757cd2c19f3d2fafbd50f7f58548a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagGetParameterRaw</definition>
                <argsstring>(capl::IDiagBase &amp;, char parameter[], BYTE buffer[], unsigned __int32 buffersize)</argsstring>
                <name>diagGetParameterRaw</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameter</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>buffersize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets or specifies the value of a (complex) parameter directly via uncoded data bytes
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Sets</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>or specifies the value of a (complex) parameter directly via uncoded data bytes </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Input/output buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffersize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer size </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 if bytes were copied, otherwise &lt;0 for an error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagGetParameterRaw (diagResponse obj, char parameterName[], byte* buffer, DWORD buffersize) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5750" column="39" declfile="CAPLPluginApi.h" declline="5750"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a40f536e1b168b5ff9f15cc7849de34bc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSetParameterRaw</definition>
                <argsstring>(capl::IDiagBase &amp;, char parameter[], BYTE buffer[], unsigned __int32 buffersize)</argsstring>
                <name>diagSetParameterRaw</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_base" kindref="compound">capl::IDiagBase</ref> &amp;</type>
                </param>
                <param>
                    <type>char</type>
                    <declname>parameter</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>buffersize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets or specifies the value of a (complex) parameter directly via uncoded data bytes
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Sets</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>or specifies the value of a (complex) parameter directly via uncoded data bytes </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parameterName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter qualifier </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Input/output buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffersize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer size </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 if bytes were copied, otherwise &lt;0 for an error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagSetParameterRaw (diagResponse obj, char parameter[], byte* buffer, DWORD buffersize) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5761" column="39" declfile="CAPLPluginApi.h" declline="5761"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a26c47d38f74fe6f032e069e63e281d43" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::testWaitForDiagResponse</definition>
                <argsstring>(capl::IDiagRequest &amp;, unsigned __int32 timeout)</argsstring>
                <name>testWaitForDiagResponse</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_request" kindref="compound">capl::IDiagRequest</ref> &amp;</type>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>timeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the arrival of the response to the given request
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>request</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Sent request </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>[ms] Maximum wait time </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>&lt;0: An internal error occurred, e.g. a protocol error or a faulty configuration of the diagnostic layer </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: The timeout was reached, i.e. the event of interest did not occur within the specified time </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: The event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForDiagResponse (diagRequest request, dword timeout); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5772" column="39" declfile="CAPLPluginApi.h" declline="5772"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af57d872bdbf6a654a68d5f422574168f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSetTimeoutHandlerInternal</definition>
                <argsstring>(OnDiagTiemoutFunction *pCallback, char stackName[])</argsstring>
                <name>diagSetTimeoutHandlerInternal</name>
                <param>
                    <type>OnDiagTiemoutFunction *</type>
                    <declname>pCallback</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>stackName</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5776" column="39" declfile="CAPLPluginApi.h" declline="5776"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa90f62b4b1b701cd30a382575aa0b137" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagSetTimeoutHandlerObjInternal</definition>
                <argsstring>(OnDiagTiemoutFunction *pCallback, capl::IDiagRequest &amp;)</argsstring>
                <name>diagSetTimeoutHandlerObjInternal</name>
                <param>
                    <type>OnDiagTiemoutFunction *</type>
                    <declname>pCallback</declname>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_diag_request" kindref="compound">capl::IDiagRequest</ref> &amp;</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5777" column="39" declfile="CAPLPluginApi.h" declline="5777"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a900ff2a9a3e43b52cd19b1541ad1ae21" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagStartTesterPresentObj</definition>
                <argsstring>(char ecuQualifier[])</argsstring>
                <name>diagStartTesterPresentObj</name>
                <param>
                    <type>char</type>
                    <declname>ecuQualifier</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts sending autonomous/cyclical Tester Present requests from CANoe to the specified or current ECU
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ecuQualifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Qualifier of the ECU as specified in the diagnostic configuration dialog, for which the Tester Present service shall be started </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long diagStartTesterPresent(char ecuQualifier[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5785" column="39" declfile="CAPLPluginApi.h" declline="5785"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a603ac4129c8f328c2ab654c56821c024" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::diagTestStack</definition>
                <argsstring>(char stackvar[], char stackattr[])</argsstring>
                <name>diagTestStack</name>
                <param>
                    <type>char</type>
                    <declname>stackvar</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>char</type>
                    <declname>stackattr</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5787" column="39" declfile="CAPLPluginApi.h" declline="5787"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afd6c8d7128525b1918242d6312e260e2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepLOD</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepLOD</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStep reports a test step without influence on the result. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStep (dword LevelOfDetail, char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5800" column="39" declfile="CAPLPluginApi.h" declline="5800"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac9c9d25f3788044a144b74c4d5ee75b7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepHandle</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], long handle)</argsstring>
                <name>TestStepHandle</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>long</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStep reports a test step without influence on the result. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the table to be displayed within the step content, created by the function TestInfoTable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStep (dword LevelOfDetail, char[] Identifier, long handle) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5809" column="39" declfile="CAPLPluginApi.h" declline="5809"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9a4326235bf68e2ca2ec96c419bc6efd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStep</definition>
                <argsstring>(const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStep</name>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStep reports a test step without influence on the result. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStep (char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5817" column="39" declfile="CAPLPluginApi.h" declline="5817"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a67be7c0d4aa97fcf7f45350a41592f2f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepPassLOD</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepPassLOD</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepPass (dword LevelOfDetail, char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5826" column="39" declfile="CAPLPluginApi.h" declline="5826"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab6e09c1e29cdf4ddd117e3be9bf5544e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepPassHandle</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], long handle)</argsstring>
                <name>TestStepPassHandle</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>long</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the table to be displayed within the step content, created by the function TestInfoTable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepPass (dword LevelOfDetail, char[] Identifier, long handle) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5835" column="39" declfile="CAPLPluginApi.h" declline="5835"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6e516dbb5db02c68c45d9d97ec65c995" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepPassIdentifier</definition>
                <argsstring>(const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepPassIdentifier</name>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepPass (char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5843" column="39" declfile="CAPLPluginApi.h" declline="5843"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a74305b9ba236f490f37f7f762e318e02" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepPassDescription</definition>
                <argsstring>(const char Description[],...)</argsstring>
                <name>TestStepPassDescription</name>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepPass (char Description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5850" column="39" declfile="CAPLPluginApi.h" declline="5850"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa5a4d4c571885f8ac8623eb8e82f7e1b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepPass</definition>
                <argsstring>()</argsstring>
                <name>TestStepPass</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepPass reports a test step that was executed as expected. This is displayed accordingly in the test report
                        <simplesect kind="note">
                            <para>TestStepPass () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5856" column="39" declfile="CAPLPluginApi.h" declline="5856"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab7291d3d3d22796a891499aac46b969b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepFailLOD</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepFailLOD</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepFail describes a test step that causes an error. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to fail
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepFail (dword LevelOfDetail, char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5865" column="39" declfile="CAPLPluginApi.h" declline="5865"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1add80fc04477cdcf9d261b01f471b9e1d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepFailHandle</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], long handle)</argsstring>
                <name>TestStepFailHandle</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>long</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepFail describes a test step that causes an error. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to fail
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the table to be displayed within the step content, created by the function TestInfoTable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepFail (dword LevelOfDetail, char[] Identifier, long handle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5874" column="39" declfile="CAPLPluginApi.h" declline="5874"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a740e576d21469c2987e321b2e7ef4e07" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepFailIdentifier</definition>
                <argsstring>(const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepFailIdentifier</name>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepFail describes a test step that causes an error. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to fail
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepFail (char Identifier[], char Description[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5882" column="39" declfile="CAPLPluginApi.h" declline="5882"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a27b3805c439bb09d3e6a536f75a21104" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepFailDescription</definition>
                <argsstring>(const char Description[],...)</argsstring>
                <name>TestStepFailDescription</name>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepFail describes a test step that causes an error. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to fail
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepFail (char Description[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5889" column="39" declfile="CAPLPluginApi.h" declline="5889"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac15d4e02411f2b52820cac137aa22e35" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepFail</definition>
                <argsstring>()</argsstring>
                <name>TestStepFail</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepFail describes a test step that causes an error. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to fail
                        <simplesect kind="note">
                            <para>TestStepFail () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5895" column="39" declfile="CAPLPluginApi.h" declline="5895"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a42341dd8d1bef3c697505b1d302d32c5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepWarningLOD</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepWarningLOD</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepWarning describes a test case that was executed without errors but whose result could contribute to a problem later on. This is represented appropriately in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepWarning (dword LevelOfDetail, char Identifier[], char Description[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5904" column="39" declfile="CAPLPluginApi.h" declline="5904"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a51ac271febb280c79d51b0a73e08a066" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepWarningHandle</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], long handle)</argsstring>
                <name>TestStepWarningHandle</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>long</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepWarning describes a test case that was executed without errors but whose result could contribute to a problem later on. This is represented appropriately in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the table to be displayed within the step content, created by the function TestInfoTable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepWarning (dword LevelOfDetail, char[] Identifier, long handle); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5913" column="39" declfile="CAPLPluginApi.h" declline="5913"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a066bfbafa3a256801852f34d61bd849a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepWarningIdentifier</definition>
                <argsstring>(const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepWarningIdentifier</name>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepWarning describes a test case that was executed without errors but whose result could contribute to a problem later on. This is represented appropriately in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepWarning (char Identifier[], char Description[], ...); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5921" column="39" declfile="CAPLPluginApi.h" declline="5921"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a567530ca702f4ee7fd7e7987a7ce6faf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepWarningDescription</definition>
                <argsstring>(const char Description[],...)</argsstring>
                <name>TestStepWarningDescription</name>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepWarning describes a test case that was executed without errors but whose result could contribute to a problem later on. This is represented appropriately in the test report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepWarning (char Description[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5928" column="39" declfile="CAPLPluginApi.h" declline="5928"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3efe83d990995eff43c18f96e98e54e2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepWarning</definition>
                <argsstring>()</argsstring>
                <name>TestStepWarning</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepWarning describes a test case that was executed without errors but whose result could contribute to a problem later on. This is represented appropriately in the test report
                        <simplesect kind="note">
                            <para>TestStepWarning (); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5934" column="39" declfile="CAPLPluginApi.h" declline="5934"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a454efc1e6d19eefe7605c607bd95df95" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepInconclusiveLOD</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepInconclusiveLOD</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepInconclusive describes a test step which can not clearly marked as passed or failed . Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to inconclusive
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepInconclusive (dword LevelOfDetail, char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5943" column="39" declfile="CAPLPluginApi.h" declline="5943"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a78f001510fecbfcfb38b75b12c9e6350" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepInconclusiveHandle</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], long handle)</argsstring>
                <name>TestStepInconclusiveHandle</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>long</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepInconclusive describes a test step which can not clearly marked as passed or failed . Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to inconclusive
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the table to be displayed within the step content, created by the function TestInfoTable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepInconclusive (dword LevelOfDetail, char[] Identifier, long handle) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5952" column="39" declfile="CAPLPluginApi.h" declline="5952"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a80bb66b53c615c1b9e69647001827f31" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepInconclusiveIdentifier</definition>
                <argsstring>(const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepInconclusiveIdentifier</name>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepInconclusive describes a test step which can not clearly marked as passed or failed . Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to inconclusive
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Discription</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepInconclusive (char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5960" column="39" declfile="CAPLPluginApi.h" declline="5960"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a37fea5c02d268d2a1523d215187e4831" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepInconclusiveDescription</definition>
                <argsstring>(const char Description[],...)</argsstring>
                <name>TestStepInconclusiveDescription</name>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepInconclusive describes a test step which can not clearly marked as passed or failed . Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to inconclusive
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Discription</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepInconclusive (char Description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5967" column="39" declfile="CAPLPluginApi.h" declline="5967"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1c756b5b6b5d8d5fc3974d4aab441074" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepInconclusive</definition>
                <argsstring>()</argsstring>
                <name>TestStepInconclusive</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case
                        <simplesect kind="note">
                            <para>TestStepInconclusive () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5973" column="39" declfile="CAPLPluginApi.h" declline="5973"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac96687133ac14a63164016fc80a6a985" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepErrorInTestSystemLOD</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepErrorInTestSystemLOD</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepErrorInTestSystem describes a test step that causes an error in test system. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to error in test system
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepErrorInTestSystem (dword LevelOfDetail, char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5982" column="39" declfile="CAPLPluginApi.h" declline="5982"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a93082ce87402fbe2ef29eaca02e3cdde" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepErrorInTestSystemHandle</definition>
                <argsstring>(unsigned __int32 LevelOfDetail, const char Identifier[], long handle)</argsstring>
                <name>TestStepErrorInTestSystemHandle</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>LevelOfDetail</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>long</type>
                    <declname>handle</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepErrorInTestSystem describes a test step that causes an error in test system. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to error in test system
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>LevelOfDetail</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is. In the test report, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance. Without an explicit specification, a LevelOfDetail of 0 is assumed </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handle</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle to the table to be displayed within the step content, created by the function TestInfoTable </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepErrorInTestSystem (dword LevelOfDetail, char[] Identifier, long handle) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5991" column="39" declfile="CAPLPluginApi.h" declline="5991"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0ad4ec0e9a0e66166ea9acdfae8cf935" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepErrorInTestSystemIdentifier</definition>
                <argsstring>(const char Identifier[], const char Description[],...)</argsstring>
                <name>TestStepErrorInTestSystemIdentifier</name>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepErrorInTestSystem describes a test step that causes an error in test system. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to error in test system
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Discription</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepErrorInTestSystem (char Identifier[], char Description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="5999" column="39" declfile="CAPLPluginApi.h" declline="5999"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a795a89db7a345f713107b75b3f7a02e7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepErrorInTestSystemDescription</definition>
                <argsstring>(const char Description[],...)</argsstring>
                <name>TestStepErrorInTestSystemDescription</name>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be reported within a test case. TestStepErrorInTestSystem describes a test step that causes an error in test system. Also this is displayed accordingly in the test report. The verdict of the test case is hereby set automatically to error in test system
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Discription</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepErrorInTestSystem (char Description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6006" column="39" declfile="CAPLPluginApi.h" declline="6006"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab3e9b1336f2126e20b272c6e7f12683b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepErrorInTestSystem</definition>
                <argsstring>()</argsstring>
                <name>TestStepErrorInTestSystem</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6007" column="39" declfile="CAPLPluginApi.h" declline="6007"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a14b4dca358637f1a305c78f9adc754af" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForTimeout</definition>
                <argsstring>(unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForTimeout</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits until the expiration of the specified timeout time
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms]. (Transmission of 0: no timeout controlling. In this function this results in a hang up of the test module) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForTimeout(dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6017" column="39" declfile="CAPLPluginApi.h" declline="6017"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a78a57e4727832bec6fdcbcb665d60a14" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForTesterConfirmation</definition>
                <argsstring>(const char text[])</argsstring>
                <name>TestWaitForTesterConfirmation</name>
                <param>
                    <type>const char</type>
                    <declname>text</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Creates a popup window that presents the given string to the tester. The tester can acknowledge the window with Yes or No. Wait function has no timeout so it waits for the confirmation of the tester
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>text</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>This is shown in the popup window. The maximum length of the string is limited (4096 characters) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Timeout occurred </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: The tester clicked Yes </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>2: The tester clicked No </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, e.g. due to a call outside of a test sequence </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Constraint occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForTesterConfirmation(char text[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6029" column="39" declfile="CAPLPluginApi.h" declline="6029"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab90abb85a1cb58f814ce2e914692ac75" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForTesterConfirmationTimeout</definition>
                <argsstring>(const char text[], unsigned __int32 timeout)</argsstring>
                <name>TestWaitForTesterConfirmationTimeout</name>
                <param>
                    <type>const char</type>
                    <declname>text</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>timeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Creates a popup window that presents the given string to the tester. The tester can acknowledge the window with Yes or No. Wait function has a timeout, i.e. the dialog is automatically terminated after the timeout expires
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Time in milliseconds after which the dialog is automatically ended </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>text</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>This is shown in the popup window. The maximum length of the string is limited (4096 characters) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Timeout occurred </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: The tester clicked Yes </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>2: The tester clicked No </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, e.g. due to a call outside of a test sequence </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Constraint occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForTesterConfirmation(char[] text, unsigned long timeout); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6042" column="39" declfile="CAPLPluginApi.h" declline="6042"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad99d5e1ae7a701ff773daf2cda4721b9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForTesterConfirmationHeading</definition>
                <argsstring>(const char text[], unsigned __int32 timeout, const char heading[], const char resource[], const char resourceCaption[])</argsstring>
                <name>TestWaitForTesterConfirmationHeading</name>
                <param>
                    <type>const char</type>
                    <declname>text</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>timeout</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>heading</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>resource</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>resourceCaption</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Creates a popup window that presents the given string to the tester. The tester can acknowledge the window with Yes or No. Wait function has a timeout and can show a resource, i.e. the dialog can show additional information
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Time in milliseconds after which the dialog is automatically ended </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>text</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>This is shown in the popup window. The maximum length of the string is limited (4096 characters) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>heading</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A heading above the dialog text. The maximum length of the string is limited (256 characters) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>resource</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A URL or file path </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>resourceCaption</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A caption respectively a description for the resource. The maximum length of the string is limited (256 characters) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Timeout occurred </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: The tester clicked Yes </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>2: The tester clicked No </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, e.g. due to a call outside of a test sequence </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Constraint occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForTesterConfirmation(char[] text, unsigned long timeout, char[] heading, char[] resource, char[] resourceCaption) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6058" column="39" declfile="CAPLPluginApi.h" declline="6058"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af5ccd8713d6c50801c2c912e91522161" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepBeginImportance</definition>
                <argsstring>(unsigned __int32 Importance, const char Identifier[], const char Description[])</argsstring>
                <name>TestStepBeginImportance</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>Importance</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be logged within a test case. Such a test step is introduced with TestStepBegin, which is then completed with TestStepPass, TestStepFail or TestStepWarning. A test step is noted in the test report only with this conclusion
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Importance</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>It is possible to identify with a number how important this test step is, it is possible that only test steps up to a certain importance will be displayed. 0 means &quot;very important&quot;, higher numbers indicate lower degrees of importance </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepBegin (dword Importance, char Identifier[], char Description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6067" column="39" declfile="CAPLPluginApi.h" declline="6067"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a742893c42da45dfda9e7471f7d0d02d4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestStepBegin</definition>
                <argsstring>(const char Identifier[], const char Description[])</argsstring>
                <name>TestStepBegin</name>
                <param>
                    <type>const char</type>
                    <declname>Identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>Description</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, test steps can be logged within a test case. Such a test step is introduced with TestStepBegin, which is then completed with TestStepPass, TestStepFail or TestStepWarning. A test step is noted in the test report only with this conclusion
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A test step number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>Description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para></para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestStepBegin (char Identifier[], char Description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6075" column="39" declfile="CAPLPluginApi.h" declline="6075"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3b717452bee0e3050d9f4c0ca25d1f6f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSignalMatchSig</definition>
                <argsstring>(const ISignalVal &amp;aSignal, float aCompareValue, unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForSignalMatchSig</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> &amp;</type>
                    <declname>aSignal</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>aCompareValue</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks the given value against the value of the signal, the system variable or the environment variable. The resolution of the signal is considered
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aCompareValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value which is compared to the signal value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: General error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Signal is not valid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Wait state is exited due to a timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Wait state is exited due to condition fulfillment </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForSignalMatch (Signal aSignal, float aCompareValue, dword aTimeout); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6088" column="39" declfile="CAPLPluginApi.h" declline="6088"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1ed662d8f8efbe7047f2a5aaa337beb5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSignalMatchEnv</definition>
                <argsstring>(const IEnvVar &amp;aEnvVar, float aCompareValue, unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForSignalMatchEnv</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>aEnvVar</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>aCompareValue</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks the given value against the value of the signal, the system variable or the environment variable. The resolution of the signal is considered
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aEnvVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Environment variable to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aCompareValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value which is compared to the signal value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: General error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Signal is not valid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Wait state is exited due to a timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Wait state is exited due to condition fulfillment </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForSignalMatch (dbEnvVar aEnvVar, float aCompareValue, dword aTimeout); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6101" column="39" declfile="CAPLPluginApi.h" declline="6101"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa3d2d01449c214af491025bb9ef482c9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSignalMatchEnvI64</definition>
                <argsstring>(const IEnvVar &amp;aEnvVar, __int64 aCompareValue, unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForSignalMatchEnvI64</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>aEnvVar</declname>
                </param>
                <param>
                    <type>__int64</type>
                    <declname>aCompareValue</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks the given value against the value of the signal, the system variable or the environment variable
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aEnvVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Environment variable to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSysVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>System variable to be queried. May also be a specific element of a variable of type struct or generic array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aCompareValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Value which is compared to the signal value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: General error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Signal is not valid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Wait state is exited due to a timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Wait state is exited due to condition fulfillment </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForSignalMatch (sysvar aSysVar, int64 aCompareValue, dword aTimeout); // (4) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6116" column="39" declfile="CAPLPluginApi.h" declline="6116"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa6ba7f1e0437113a028ae1602db419fe" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSignalInRangeSig</definition>
                <argsstring>(const ISignalVal &amp;aSignal, float aLowLimit, float aHighLimit, unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForSignalInRangeSig</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> &amp;</type>
                    <declname>aSignal</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>aLowLimit</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>aHighLimit</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks the value of the signal, the system or the environment variable against the condition: aLowLimit &lt;= Value &lt;= aHighLimit. If this condition is already met when this function is called, it returns immediately without waiting. The test step is evaluated as either passed or failed depending on the results
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aLowLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Lower limit of the value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aHighLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Upper limit of the value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: General error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Type of the system / environment variable is not valid � only float or integer are valid � or signal is not valid or invalid limits of the given range </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Wait state is exited due to a timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Wait state is exited due to condition fulfilment </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForSignalInRange (Signal aSignal, float aLowLimit, float aHighLimit, dword aTimeout); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6130" column="39" declfile="CAPLPluginApi.h" declline="6130"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a11b631ee4a7ae979351d403f6563bffa" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSignalInRangeEnv</definition>
                <argsstring>(const IEnvVar &amp;aEnvVar, float aLowLimit, float aHighLimit, unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForSignalInRangeEnv</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>aEnvVar</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>aLowLimit</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>aHighLimit</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks the value of the signal, the system or the environment variable against the condition: aLowLimit &lt;= Value &lt;= aHighLimit. If this condition is already met when this function is called, it returns immediately without waiting. The test step is evaluated as either passed or failed depending on the results
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aEnvVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Environment variable to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aLowLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Lower limit of the value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aHighLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Upper limit of the value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: General error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Type of the system / environment variable is not valid � only float or integer are valid � or signal is not valid or invalid limits of the given range </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Wait state is exited due to a timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Wait state is exited due to condition fulfilment </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForSignalInRange (dbEnvVar aEnvVar float aLowLimit, float aHighLimit, dword aTimeout); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6144" column="39" declfile="CAPLPluginApi.h" declline="6144"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae24dd983233d01f41a168ac40eed584d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSignalInRangeEnvI64</definition>
                <argsstring>(const IEnvVar &amp;aEnvVar, __int64 aLowLimit, __int64 aHighLimit, unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForSignalInRangeEnvI64</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>aEnvVar</declname>
                </param>
                <param>
                    <type>__int64</type>
                    <declname>aLowLimit</declname>
                </param>
                <param>
                    <type>__int64</type>
                    <declname>aHighLimit</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Checks the value of the signal, the system or the environment variable against the condition: aLowLimit &lt;= Value &lt;= aHighLimit
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSysVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>System variable to be queried. May also be a specific element of a variable of type struct or generic array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aEnvVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Environment variable to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSignal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal to be queried </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aLowLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Lower limit of the value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aHighLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Upper limit of the value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-1: General error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Type of the system / environment variable is not valid � only float or integer are valid � or signal is not valid or invalid limits of the given range </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Wait state is exited due to a timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Wait state is exited due to condition fulfilment </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForSignalInRange (sysvar aSysVar, int64 aLowLimit, int64 aHighLimit, dword aTimeout); // (4) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6160" column="39" declfile="CAPLPluginApi.h" declline="6160"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab951cecb1354e054c80e8f9344246857" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestReportAddEngineerInfo</definition>
                <argsstring>(const char name[], const char description[],...)</argsstring>
                <name>TestReportAddEngineerInfo</name>
                <param>
                    <type>const char</type>
                    <declname>name</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, information pairs of name and description (e.g. &quot;serial number&quot; and &quot;S012345AB&quot;) can be taken up into the report in the areas TestEngineer, TestSetUp, and device (SUT) to be tested. The three areas named must not be created; they are automatically available in the report. In the course of the test execution, any number of information pairs can be written Information pair of name and description The format string has the same meaning as with the write function and is described there
                        <simplesect kind="note">
                            <para>TestReportAddEngineerInfo (char name[], char description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6168" column="39" declfile="CAPLPluginApi.h" declline="6168"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a86c996dda0af473a65906983600264f0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestReportAddSetupInfo</definition>
                <argsstring>(const char name[], const char description[],...)</argsstring>
                <name>TestReportAddSetupInfo</name>
                <param>
                    <type>const char</type>
                    <declname>name</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, information pairs of name and description (e.g. &quot;serial number&quot; and &quot;S012345AB&quot;) can be taken up into the report in the areas TestEngineer, TestSetUp, and device (SUT) to be tested. The three areas named must not be created; they are automatically available in the report. In the course of the test execution, any number of information pairs can be written Information pair of name and description The format string has the same meaning as with the write function and is described there
                        <simplesect kind="note">
                            <para>TestReportAddSetupInfo (char name[], char description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6176" column="39" declfile="CAPLPluginApi.h" declline="6176"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ade958ca58b435dfa8bd6f1b5d72b04ee" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestReportAddSUTInfo</definition>
                <argsstring>(const char name[], const char description[],...)</argsstring>
                <name>TestReportAddSUTInfo</name>
                <param>
                    <type>const char</type>
                    <declname>name</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, information pairs of name and description (e.g. &quot;serial number&quot; and &quot;S012345AB&quot;) can be taken up into the report in the areas TestEngineer, TestSetUp, and device (SUT) to be tested. The three areas named must not be created; they are automatically available in the report. In the course of the test execution, any number of information pairs can be written Information pair of name and description The format string has the same meaning as with the write function and is described there
                        <simplesect kind="note">
                            <para>TestReportAddSUTInfo (char name[], char description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6184" column="39" declfile="CAPLPluginApi.h" declline="6184"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aaae2e225a8e6441b2153569aea9ab8ee" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestReportAddMiscInfo</definition>
                <argsstring>(const char name[], const char description[],...)</argsstring>
                <name>TestReportAddMiscInfo</name>
                <param>
                    <type>const char</type>
                    <declname>name</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>description</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>...</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With these functions, information pairs of name and description (e.g. &quot;parameter value V0&quot; and &quot;3.7 V&quot;) can be taken up into an additional information area in the report Information pair of name and description The format string has the same meaning as with the write function and is described there
                        <simplesect kind="note">
                            <para>TestReportAddMiscInfo (char name[], char description[], ...) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6191" column="39" declfile="CAPLPluginApi.h" declline="6191"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4f96c313ffabd6df2eeb439e7ea30911" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestModuleTitle</definition>
                <argsstring>(const char title[])</argsstring>
                <name>TestModuleTitle</name>
                <param>
                    <type>const char</type>
                    <declname>title</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The title of the test module is acquired automatically from the name of the test node in the simulation structure. It can also be set explicitly with this function
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>title</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Title of the test module </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestModuleTitle (char title[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6198" column="39" declfile="CAPLPluginApi.h" declline="6198"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad2d88dd7505cbc626127d9fed19e76a6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestModuleDescription</definition>
                <argsstring>(const char description[])</argsstring>
                <name>TestModuleDescription</name>
                <param>
                    <type>const char</type>
                    <declname>description</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With this function, a description text for the test module can be written into the report. The function can be called several times in a row, the transmitted texts are then added to one another without additional separation
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>description</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Description text for the test module </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestModuleDescription (char description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6205" column="39" declfile="CAPLPluginApi.h" declline="6205"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac8111f4f6cdb4672c8c83941908cd37f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestSupplyTextEvent</definition>
                <argsstring>(const char aText[])</argsstring>
                <name>TestSupplyTextEvent</name>
                <param>
                    <type>const char</type>
                    <declname>aText</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Signals the specified event. Consequently resolves a possibly-active wait condition on this event
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aText</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the event to be signaled </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Event was signaled successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Event could not be signaled </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestSupplyTextEvent(char aText[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6214" column="39" declfile="CAPLPluginApi.h" declline="6214"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac58391dfb6286a67da67fc192bdca3ba" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForTextEvent</definition>
                <argsstring>(const char aText[], unsigned __int32 aTimeout)</argsstring>
                <name>TestWaitForTextEvent</name>
                <param>
                    <type>const char</type>
                    <declname>aText</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the signaling of the specified textual event from the individual test module. A signaling from another test module does not effect this wait instruction
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aText</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Any (meaningful) textual event name </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms](Transmission of 0: no timeout controlling) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Resume due to event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForTextEvent(char aText[], dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6226" column="39" declfile="CAPLPluginApi.h" declline="6226"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a716b238c6779a0ac164a714e003c3178" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForEnvVar</definition>
                <argsstring>(const IEnvVar &amp;aEnvVar, DWORD aTimeout)</argsstring>
                <name>TestWaitForEnvVar</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>aEnvVar</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the description of the specified environment variable (aEnvVar or with the name aEnvVarName). Should the event not occur before the expiration of the time aTimeout, the wait condition is resolved nevertheless
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aEnvVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Environment variable that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] (Transmission of 0: no timeout controlling) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available or environment variable with name aEnvVarName cannot be found </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Resume due to event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForEnvVar(dbEnvVar aEnvVar, dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6238" column="39" declfile="CAPLPluginApi.h" declline="6238"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aab4934ab7aafc4ef0e9eb6e784edc85e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForEnvVarName</definition>
                <argsstring>(const char aEnvVarName[], DWORD aTimeout)</argsstring>
                <name>TestWaitForEnvVarName</name>
                <param>
                    <type>const char</type>
                    <declname>aEnvVarName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the description of the specified environment variable (aEnvVar or with the name aEnvVarName). Should the event not occur before the expiration of the time aTimeout, the wait condition is resolved nevertheless
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aEnvVarName</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of environment variable that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] (Transmission of 0: no timeout controlling) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available or environment variable with name aEnvVarName cannot be found </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Resume due to event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForEnvVar(char aEnvVarName[], dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6250" column="39" declfile="CAPLPluginApi.h" declline="6250"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a396453ce282b15cf17d579de54806ef6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSysVar</definition>
                <argsstring>(const IEnvVar &amp;aEnvVar, DWORD aTimeout)</argsstring>
                <name>TestWaitForSysVar</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>aEnvVar</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the next system variable aSysVar. Should the event not occur before the expiration of the time aTimeout, the wait condition is resolved nevertheless
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aSysVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>System variable that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available or environment variable with name aEnvVarName cannot be found </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Resume due to event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForSysVar(sysvar aSysVar, dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6262" column="39" declfile="CAPLPluginApi.h" declline="6262"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5063c2e312d08130410e8b3922347bbb" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForSysVarName</definition>
                <argsstring>(const char aEnvVarName[], DWORD aTimeout)</argsstring>
                <name>TestWaitForSysVarName</name>
                <param>
                    <type>const char</type>
                    <declname>aEnvVarName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6263" column="39" declfile="CAPLPluginApi.h" declline="6263"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a75e44092344aab67cedaf7c9ba141c4f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForMessage</definition>
                <argsstring>(const char sRef[], DWORD aTimeout)</argsstring>
                <name>TestWaitForMessage</name>
                <param>
                    <type>const char</type>
                    <declname>sRef</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the occurrence of the specified message aMessage. Should the message not occur before the expiration of the time aTimeout, the wait condition is resolved nevertheless
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Resume due to event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForMessage(dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6274" column="39" declfile="CAPLPluginApi.h" declline="6274"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a281cd1d055180dd257725424a1644f4c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForMessageIdInternal</definition>
                <argsstring>(const char channelName[], DWORD aMessageId, DWORD aTimeout)</argsstring>
                <name>TestWaitForMessageIdInternal</name>
                <param>
                    <type>const char</type>
                    <declname>channelName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aMessageId</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the occurrence of the specified message aMessage. Should the message not occur before the expiration of the time aTimeout, the wait condition is resolved nevertheless
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aMessageId</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Numeric ID of the message that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Resume due to event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForMessage(dword aMessageId, dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6286" column="39" declfile="CAPLPluginApi.h" declline="6286"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2795cdddcdd01576b3a5699a20a601af" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForMessageAllInternal</definition>
                <argsstring>(const char channelName[], DWORD aTimeout)</argsstring>
                <name>TestWaitForMessageAllInternal</name>
                <param>
                    <type>const char</type>
                    <declname>channelName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the occurrence of the specified message aMessage. Should the message not occur before the expiration of the time aTimeout, the wait condition is resolved nevertheless
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aMessage</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: Resume due to event occurred </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForMessage(dbMessage aMessage, dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6298" column="39" declfile="CAPLPluginApi.h" declline="6298"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a178e5027c5e722fe474f95be83a6452d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestCaseTitle</definition>
                <argsstring>(const char identifier[], const char title[])</argsstring>
                <name>TestCaseTitle</name>
                <param>
                    <type>const char</type>
                    <declname>identifier</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>title</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The title of a test case is acquired automatically from the test case name in the CAPL program
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>title</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Title of the test case </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Test case number </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestCaseTitle (char identifier[], char title[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6306" column="39" declfile="CAPLPluginApi.h" declline="6306"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa5fc4e5f554135a83978425780f2b3dc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestCaseDescription</definition>
                <argsstring>(const char desc[])</argsstring>
                <name>TestCaseDescription</name>
                <param>
                    <type>const char</type>
                    <declname>desc</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With this function, a description test for a test case can be written into the report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>discription</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Description test for the test case </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestCaseDescription (char description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6313" column="39" declfile="CAPLPluginApi.h" declline="6313"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab66023d5f3c963d1cee1514dac3febdf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestCaseComment</definition>
                <argsstring>(const char aComment[])</argsstring>
                <name>TestCaseComment</name>
                <param>
                    <type>const char</type>
                    <declname>aComment</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With this function within a test case a commentary can be taken over into the report. This comment can relate to a message that can also be output in the report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aComment</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Commentary to be taken over into the report </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestCaseComment (char aComment[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6320" column="39" declfile="CAPLPluginApi.h" declline="6320"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2537abdb10f0fb1593168db2e0d13d7b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestCaseCommentMessage</definition>
                <argsstring>(const char aComment[], const IMessage &amp;aMsg)</argsstring>
                <name>TestCaseCommentMessage</name>
                <param>
                    <type>const char</type>
                    <declname>aComment</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_message" kindref="compound">IMessage</ref> &amp;</type>
                    <declname>aMsg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With this function within a test case a commentary can be taken over into the report. This comment can relate to a message that can also be output in the report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aMsg</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAN-, GMLAN-, LIN-, MOST-, MOST-AMS- or MOST system message to be taken over into the report </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aComment</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Commentary to be taken over into the report </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestCaseComment (char aComment[], message aMsg) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6328" column="39" declfile="CAPLPluginApi.h" declline="6328"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab59df50c0d5fca0ef92bf24e18abe144" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestCaseCommentStr</definition>
                <argsstring>(const char aComment[], const char aRawString[])</argsstring>
                <name>TestCaseCommentStr</name>
                <param>
                    <type>const char</type>
                    <declname>aComment</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>aRawString</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        With this function within a test case a commentary can be taken over into the report. This comment can relate to a message that can also be output in the report
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aComment</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Commentary to be taken over into the report </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aRawString</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Here you may enter any ASCII characters. They will be added to the comment in the following way: &lt;Hex value of the given character&gt;(&lt;ASCII display of the given charcter&gt;). In ASCII display special characters will be replaced by &apos;.&apos; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestCaseComment (char aComment[], char aRawString[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6336" column="39" declfile="CAPLPluginApi.h" declline="6336"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac2f798ce7a86c4d69d983d954635de85" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestReportFileName</definition>
                <argsstring>(const char name[])</argsstring>
                <name>TestReportFileName</name>
                <param>
                    <type>const char</type>
                    <declname>name</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets the name and path of a report file
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>name Name and path of the report file. Without path specification, the directory of the CANoe configuration file is used. The extension .XML or. .html is added automatically </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestReportFileName (char data name[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6343" column="39" declfile="CAPLPluginApi.h" declline="6343"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae83e2dd2179a9402d109c262c853e639" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestJoinMessageEvent</definition>
                <argsstring>(const char messageStringRef[])</argsstring>
                <name>TestJoinMessageEvent</name>
                <param>
                    <type>const char</type>
                    <declname>messageStringRef</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Completes the current set of &quot;joined events&quot; with the transmitted event. This function does not wait
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aMessage</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-3: Join error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Number of the joined event </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestJoinMessageEvent (dbMessage aMessage) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6353" column="41" declfile="CAPLPluginApi.h" declline="6353"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a888f72a6fac35ad8d1fc0274fee9f364" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestJoinMessageEventIdInternal</definition>
                <argsstring>(const char channelName[], DWORD aMessageId)</argsstring>
                <name>TestJoinMessageEventIdInternal</name>
                <param>
                    <type>const char</type>
                    <declname>channelName</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>aMessageId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Completes the current set of &quot;joined events&quot; with the transmitted event. This function does not wait
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aMessageId</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Numeric ID of the message for which should be waited </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-3: Join error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Number of the joined event </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestJoinMessageEvent (dword aMessageId) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6363" column="41" declfile="CAPLPluginApi.h" declline="6363"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1309ca1cc65dcb19e1aa197774fb1599" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestJoinEnvVarEvent</definition>
                <argsstring>(const IEnvVar &amp;aEnvVar)</argsstring>
                <name>TestJoinEnvVarEvent</name>
                <param>
                    <type>const <ref refid="classcapl_1_1_i_env_var" kindref="compound">IEnvVar</ref> &amp;</type>
                    <declname>aEnvVar</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Completes the current set of &quot;joined events&quot; with the transmitted event. This function does not wait
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aEnvVar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Environment variable that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-3: Join error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Number of the joined event </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestJoinEnvVarEvent(dbEnvVar aEnvVar) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6373" column="41" declfile="CAPLPluginApi.h" declline="6373"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a03fe8f191a4d3904108741161cc4dd77" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestJoinTextEvent</definition>
                <argsstring>(const char aText[])</argsstring>
                <name>TestJoinTextEvent</name>
                <param>
                    <type>const char</type>
                    <declname>aText</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Completes the current set of &quot;joined events&quot; with the transmitted event. This function does not wait
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aText</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Textual event that should be awaited </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-3: Join error </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Number of the joined event </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestJoinTextEvent(char[]aText) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6383" column="41" declfile="CAPLPluginApi.h" declline="6383"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1afad91dc06e7462f30ca0f77ea72bb89d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForAnyJoinedEvent</definition>
                <argsstring>(DWORD aTimeout)</argsstring>
                <name>TestWaitForAnyJoinedEvent</name>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the current set of &quot;joined events.&quot; Each individual of these events can resolve the wait state
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] (Transmission of 0: no timeout controlling) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Resume due to event occurred The return value returns the number of the joined event that triggered the resolution </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForAnyJoinedEvent(dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6394" column="41" declfile="CAPLPluginApi.h" declline="6394"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a05a740d26b805e036e46c2abf7a3815e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestWaitForAllJoinedEvents</definition>
                <argsstring>(DWORD aTimeout)</argsstring>
                <name>TestWaitForAllJoinedEvents</name>
                <param>
                    <type>DWORD</type>
                    <declname>aTimeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Waits for the current set of &quot;joined events.&quot; The wait condition is resolved if all of the joined events were signaled
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aTimeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum time that should be waited [ms] (Transmission of 0: no timeout controlling) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>-2: Resume due to constraint violation </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: General error, for example, functionality is not available </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: Resume due to timeout </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>&gt;0: Resume due to event occurred The return value returns the number of the joined event that triggered the resolution </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestWaitForAllJoinedEvents(dword aTimeout) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6405" column="41" declfile="CAPLPluginApi.h" declline="6405"
                          declcolumn="41" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aee8158bfc865df6495a003fe7e2d0640" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestGroupBegin</definition>
                <argsstring>(const char title[], const char description[])</argsstring>
                <name>TestGroupBegin</name>
                <param>
                    <type>const char</type>
                    <declname>title</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>description</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        A test group is opened with this function. It may only be called in a test module, but not in a test case. All test cases and test groups that are executed before call of the corresponding function TestGroupEnd are part of this test group. If a test group is not closed with TestGroupEnd, then at the end of the test module, a warning is written in the Write Window and the test group is closed automatically
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>title</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Title for the test group </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>discription</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Description text for the test group </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestGroupBegin (char title[], char description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6413" column="39" declfile="CAPLPluginApi.h" declline="6413"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aeae63ec25ff3709fb2ddb6800d639279" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestGroupBeginIdent</definition>
                <argsstring>(const char ident[], const char title[], const char description[])</argsstring>
                <name>TestGroupBeginIdent</name>
                <param>
                    <type>const char</type>
                    <declname>ident</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>title</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>description</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        A test group is opened with this function. It may only be called in a test module, but not in a test case. All test cases and test groups that are executed before call of the corresponding function TestGroupEnd are part of this test group. If a test group is not closed with TestGroupEnd, then at the end of the test module, a warning is written in the Write Window and the test group is closed automatically
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>identifier</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A test group number </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>title</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Title for the test group </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>discription</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Description text for the test group </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>TestGroupBegin (char ident[], char title[], char description[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6422" column="39" declfile="CAPLPluginApi.h" declline="6422"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2a6c675ae304fd186c314961ceef4352" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestGroupEnd</definition>
                <argsstring>()</argsstring>
                <name>TestGroupEnd</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function closes a test group opened with TestGroupBegin. If several test groups were opened, then the last-opened and not yet closed test group is closed
                        <simplesect kind="note">
                            <para>TestGroupEnd () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6428" column="39" declfile="CAPLPluginApi.h" declline="6428"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a264e7448a75c150e61a2e1f70e6c9201" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestGetWaitEventMsgData</definition>
                <argsstring>(IMessage &amp;aMsg)</argsstring>
                <name>TestGetWaitEventMsgData</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">IMessage</ref> &amp;</type>
                    <declname>aMsg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        If a message event is the last event that triggers a wait instruction, the message content can be called up with the first function
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aMessage</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message variable that should be filled in with this function </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Data access successful </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Data access could not be executed, the last event was not a message event </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestGetWaitEventMsgData (message aMessage) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6437" column="39" declfile="CAPLPluginApi.h" declline="6437"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a603e11eb41e9740e3f5ed3af618b1828" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TestGetWaitEventMsgDataIndex</definition>
                <argsstring>(DWORD index, IMessage &amp;aMsg)</argsstring>
                <name>TestGetWaitEventMsgDataIndex</name>
                <param>
                    <type>DWORD</type>
                    <declname>index</declname>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">IMessage</ref> &amp;</type>
                    <declname>aMsg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function can only be used for &quot;joined events&quot;. The number of the &quot;joined event&quot; (return value of &quot;testJoin...&quot;) is here being used as an index
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>aMessage</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Message variable that should be filled in with this function </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>index</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of the &quot;joined event&quot; corresponds with the return value of &quot;testJoin...&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Data access successful </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Data access could not be executed, the last event was not a message event </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TestGetWaitEventMsgData (dword index, message aMessage) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6447" column="39" declfile="CAPLPluginApi.h" declline="6447"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac296cc2f89c821cef6c1658fbd0e31e1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::DeferStopInternal</definition>
                <argsstring>(LPCSTR busContext, DWORD maxDeferTime)</argsstring>
                <name>DeferStopInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>busContext</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>maxDeferTime</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Defers measurement stop
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>maxDeferTime</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Indicates the time interval in milliseconds after which completion of pre-stop activities is indicated automatically if it has not yet been done explicitly via CompleteStop </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>void DeferStop(dword maxDeferTime) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6454" column="39" declfile="CAPLPluginApi.h" declline="6454"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac5ad9111a59f6ebccddd4c5857b05afd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::CompleteStopInternal</definition>
                <argsstring>(LPCSTR busContext)</argsstring>
                <name>CompleteStopInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>busContext</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Indicates completion of pre-stop actions carried out in a certain node after a measurement stop has been deferred by DeferStop.
                        <simplesect kind="note">
                            <para>void CompleteStop () </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6460" column="34" declfile="CAPLPluginApi.h" declline="6460"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a77aa9281c3f4f619d54e7b35d2714f66" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::CanTpCreateConnectionInternal</definition>
                <argsstring>(LPCSTR sBusRef, __int32 mode, Transmission_Function *pSendConf, Transmission_Function *pReceptionInd)</argsstring>
                <name>CanTpCreateConnectionInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>mode</declname>
                </param>
                <param>
                    <type>Transmission_Function *</type>
                    <declname>pSendConf</declname>
                </param>
                <param>
                    <type>Transmission_Function *</type>
                    <declname>pReceptionInd</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Create a new connection using the given address mode
                        <simplesect kind="return">
                            <para>0: Normal 1: Extended (based) 2: NormalFixed 3: Mixed 4: Mixed /11 bit) 5: Extended (free) </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long CanTpCreateConnection(dword addrMode) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6475" column="36" declfile="CAPLPluginApi.h" declline="6475"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa6d59a55c839827f460fe1d9c31a7c71" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::CanTpCloseConnection</definition>
                <argsstring>(__int32 hConnection)</argsstring>
                <name>CanTpCloseConnection</name>
                <param>
                    <type>__int32</type>
                    <declname>hConnection</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Close an existing connection. No further events will be reported for the connection, and CAPL function calls indicating this connection will fail
                        <simplesect kind="note">
                            <para>long CanTpCloseConnection(long connHandle) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6481" column="39" declfile="CAPLPluginApi.h" declline="6481"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab8f5c64f54b8fee1ebe725c3f8553a6d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::CanTpSetTxIdentifier</definition>
                <argsstring>(__int32 connection, unsigned __int32 txId)</argsstring>
                <name>CanTpSetTxIdentifier</name>
                <param>
                    <type>__int32</type>
                    <declname>connection</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>txId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Get or set the CAN ID of the message the connection uses to send (Tx) or receive (Rx) protocol data in
                        <simplesect kind="note">
                            <para>long CanTpSetTxIdentifier(long connHandle, dword txID); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6487" column="39" declfile="CAPLPluginApi.h" declline="6487"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a01c121d31a5fb2875f36bf19fef64db0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::CanTpSetRxIdentifier</definition>
                <argsstring>(__int32 connection, unsigned __int32 rxId)</argsstring>
                <name>CanTpSetRxIdentifier</name>
                <param>
                    <type>__int32</type>
                    <declname>connection</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>rxId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Get or set the CAN ID of the message the connection uses to send (Tx) or receive (Rx) protocol data in
                        <simplesect kind="note">
                            <para>long CanTpSetRxIdentifier(long connHandle, dword rxID); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6493" column="39" declfile="CAPLPluginApi.h" declline="6493"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abeac490143b95c0e8e60cc707c68553b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::CanTpSendData</definition>
                <argsstring>(__int32 connection, const unsigned __int8 *pBuffer, unsigned __int32 nBytes)</argsstring>
                <name>CanTpSendData</name>
                <param>
                    <type>__int32</type>
                    <declname>connection</declname>
                </param>
                <param>
                    <type>const unsigned __int8 *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>nBytes</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Request the sending of the first txSize bytes from the byte array txData
                        <simplesect kind="note">
                            <para>long CanTpSendData(long connHandle, byte txData[], dword txSize) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6499" column="39" declfile="CAPLPluginApi.h" declline="6499"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae71d0e727b03c18a814095bcce35d18f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::ShowToManyConnectionsMessageBox</definition>
                <argsstring>(LPCSTR nodeName, LPCSTR fileName)</argsstring>
                <name>ShowToManyConnectionsMessageBox</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>nodeName</declname>
                </param>
                <param>
                    <type>LPCSTR</type>
                    <declname>fileName</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6500" column="39" declfile="CAPLPluginApi.h" declline="6500"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6facee160fbb5cd9990382289a7c8d5c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void *</type>
                <definition>void * capl::AIDA_InitInternal</definition>
                <argsstring>(LPCSTR sBusRef, LPCSTR sConfig)</argsstring>
                <name>AIDA_InitInternal</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>sBusRef</declname>
                </param>
                <param>
                    <type>LPCSTR</type>
                    <declname>sConfig</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6503" column="36" declfile="CAPLPluginApi.h" declline="6503"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1acfb7144e557e3e98d7d2a5e34825c1da" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::AIDA_DeInitInternal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>AIDA_DeInitInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6507" column="34" declfile="CAPLPluginApi.h" declline="6507"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a35c71472961f8fef1233ecbf4897a906" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::AIDA_DataReqInternal</definition>
                <argsstring>(void *hStack, const BYTE *pData, __int32 lBufferSize)</argsstring>
                <name>AIDA_DataReqInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>pData</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>lBufferSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6511" column="34" declfile="CAPLPluginApi.h" declline="6511"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae8d6d770636c5d4f32413aad4cef0ec8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::AIDA_GetRxDataInternal</definition>
                <argsstring>(void *hStack, BYTE *pData, __int32 lBufferSize)</argsstring>
                <name>AIDA_GetRxDataInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pData</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>lBufferSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6514" column="34" declfile="CAPLPluginApi.h" declline="6514"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a27494bd7f42c5e5e62e69c696f3f53f3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetTxIdInternal</definition>
                <argsstring>(void *hStack, DWORD txId)</argsstring>
                <name>OSEKTL_SetTxIdInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>txId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6517" column="34" declfile="CAPLPluginApi.h" declline="6517"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aac1107317db06fbc976bef3a30bdb018" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetRxIdInternal</definition>
                <argsstring>(void *hStack, DWORD rxId)</argsstring>
                <name>OSEKTL_SetRxIdInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>rxId</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6520" column="34" declfile="CAPLPluginApi.h" declline="6520"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa5e03e7c737bb5d71d9b3706798fd3b6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::OSEKTL_GetTxIdInternal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>OSEKTL_GetTxIdInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6523" column="39" declfile="CAPLPluginApi.h" declline="6523"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a09545aa4897c88a303717ba9643e4e4a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::OSEKTL_GetRxIdInternal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>OSEKTL_GetRxIdInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6526" column="39" declfile="CAPLPluginApi.h" declline="6526"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a165f0d743c951d86334ccffd9cf93aaf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetNrmlModeInternal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>OSEKTL_SetNrmlModeInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6529" column="34" declfile="CAPLPluginApi.h" declline="6529"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a172584d2317d8fc82fd86cadb750cdb1" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetMixedModeInternal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>OSEKTL_SetMixedModeInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6532" column="34" declfile="CAPLPluginApi.h" declline="6532"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad1b9ff7eaf9a387a9014234cabe8c243" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetExtModeInternal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>OSEKTL_SetExtModeInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6535" column="34" declfile="CAPLPluginApi.h" declline="6535"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0778fe569fe5c9c1978a95e05b3ef403" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_UseExtIdInternal</definition>
                <argsstring>(void *hStack, BYTE val)</argsstring>
                <name>OSEKTL_UseExtIdInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6537" column="34" declfile="CAPLPluginApi.h" declline="6537"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8194e32e79a269f0f03e312069365275" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetEcuNumberInternal</definition>
                <argsstring>(void *hStack, BYTE val)</argsstring>
                <name>OSEKTL_SetEcuNumberInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6538" column="34" declfile="CAPLPluginApi.h" declline="6538"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4890c76de911bc00a7dc673527124b01" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetBSInternal</definition>
                <argsstring>(void *hStack, BYTE val)</argsstring>
                <name>OSEKTL_SetBSInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6539" column="34" declfile="CAPLPluginApi.h" declline="6539"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a240f2486af22f620acf4141b1bc514a8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetSTMINInternal</definition>
                <argsstring>(void *hStack, BYTE val)</argsstring>
                <name>OSEKTL_SetSTMINInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6540" column="34" declfile="CAPLPluginApi.h" declline="6540"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a810606443290f7e797fb84eeebe87927" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetTgtAdrInternal</definition>
                <argsstring>(void *hStack, __int32 val)</argsstring>
                <name>OSEKTL_SetTgtAdrInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6541" column="34" declfile="CAPLPluginApi.h" declline="6541"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aaa8d234702bfa5a6ec3226cd592ed09a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetUseFCInternal</definition>
                <argsstring>(void *hStackm, BYTE val)</argsstring>
                <name>OSEKTL_SetUseFCInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStackm</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>val</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6542" column="34" declfile="CAPLPluginApi.h" declline="6542"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab146fc3c3e78a72f9288f8f8249b6e31" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetDLC8Internal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>OSEKTL_SetDLC8Internal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6543" column="34" declfile="CAPLPluginApi.h" declline="6543"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad7995b91821e7342e85776a39767130e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetEvalAllFCInternal</definition>
                <argsstring>(void *hStack)</argsstring>
                <name>OSEKTL_SetEvalAllFCInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6544" column="34" declfile="CAPLPluginApi.h" declline="6544"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0a71cb8148bbb84b69c5ab31f1f21265" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetTimeoutArInternal</definition>
                <argsstring>(void *hStack, WORD timeout)</argsstring>
                <name>OSEKTL_SetTimeoutArInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>WORD</type>
                    <declname>timeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6545" column="34" declfile="CAPLPluginApi.h" declline="6545"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1add6747b4c9562d03b4fa954f04397b1b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetTimeoutAsInternal</definition>
                <argsstring>(void *hStack, WORD timeout)</argsstring>
                <name>OSEKTL_SetTimeoutAsInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>WORD</type>
                    <declname>timeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6546" column="34" declfile="CAPLPluginApi.h" declline="6546"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7b459a4a3d8faca90ecb6e06fe9ef6ba" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetTimeoutBsInternal</definition>
                <argsstring>(void *hStack, WORD timeout)</argsstring>
                <name>OSEKTL_SetTimeoutBsInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>WORD</type>
                    <declname>timeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6547" column="34" declfile="CAPLPluginApi.h" declline="6547"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a235327f01065354c4782f273e8b9861d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::OSEKTL_SetTimeoutCrInternal</definition>
                <argsstring>(void *hStack, WORD timeout)</argsstring>
                <name>OSEKTL_SetTimeoutCrInternal</name>
                <param>
                    <type>void *</type>
                    <declname>hStack</declname>
                </param>
                <param>
                    <type>WORD</type>
                    <declname>timeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6548" column="34" declfile="CAPLPluginApi.h" declline="6548"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae19024ce914192fd83af13c1639139ca" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232OpenInternal</definition>
                <argsstring>(DWORD port, RS232OnSendFunc *pRRS232OnSendFunc, R232ByteCallbackFunc *pByteCallbackFunc, RS232OnErrorFunc *pOnErrorFunc)</argsstring>
                <name>RS232OpenInternal</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>RS232OnSendFunc *</type>
                    <declname>pRRS232OnSendFunc</declname>
                </param>
                <param>
                    <type>R232ByteCallbackFunc *</type>
                    <declname>pByteCallbackFunc</declname>
                </param>
                <param>
                    <type>RS232OnErrorFunc *</type>
                    <declname>pOnErrorFunc</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Opens a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232Open( dword port ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6565" column="35" declfile="CAPLPluginApi.h" declline="6565"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a254c0bccb8ef7c6e437fdabe8b736023" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232OpenInternalInt</definition>
                <argsstring>(DWORD port, RS232OnSendFunc *pRRS232OnSendFunc, R232ByteCallbackFuncInt *pByteCallbackFunc, RS232OnErrorFunc *pOnErrorFunc)</argsstring>
                <name>RS232OpenInternalInt</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>RS232OnSendFunc *</type>
                    <declname>pRRS232OnSendFunc</declname>
                </param>
                <param>
                    <type>R232ByteCallbackFuncInt *</type>
                    <declname>pByteCallbackFunc</declname>
                </param>
                <param>
                    <type>RS232OnErrorFunc *</type>
                    <declname>pOnErrorFunc</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Opens a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232Open( dword port ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6572" column="35" declfile="CAPLPluginApi.h" declline="6572"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae7236ac15d475a5f46055775c53d08e0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232Send</definition>
                <argsstring>(DWORD port, const BYTE *pBuffer, DWORD number)</argsstring>
                <name>RS232Send</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>number</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends a block of bytes to a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>An array of bytes of which number will be sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>number</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of bytes to send </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232Send( dword port, byte buffer[], dword number ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6581" column="35" declfile="CAPLPluginApi.h" declline="6581"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a92e97cf5f5bb6bdae074f88c1d1692a9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232WriteByte</definition>
                <argsstring>(DWORD port, DWORD datum)</argsstring>
                <name>RS232WriteByte</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>datum</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends one bytes to a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>datum</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Byte to be sent (lowest 8 bits) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232WriteByte( dword port, dword datum ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6589" column="35" declfile="CAPLPluginApi.h" declline="6589"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a829b4c2390b5a031fc9d6ca4982eaa97" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232WriteBlock</definition>
                <argsstring>(DWORD port, const BYTE *pBuffer, DWORD number)</argsstring>
                <name>RS232WriteBlock</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>const BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>number</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sends a block of bytes to a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>An array of bytes of which number will be sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>number</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of bytes to send </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232WriteBlock( dword port, byte buffer[], dword number ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6599" column="35" declfile="CAPLPluginApi.h" declline="6599"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5f140d20563949edbf690216246f4e04" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232Close</definition>
                <argsstring>(DWORD port)</argsstring>
                <name>RS232Close</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Closes a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: success </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232Close( dword port ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6608" column="35" declfile="CAPLPluginApi.h" declline="6608"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a503a720d80804ccf8cf5f24510db62b3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232CloseHandle</definition>
                <argsstring>(DWORD port)</argsstring>
                <name>RS232CloseHandle</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Closes a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>1: success </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232CloseHandle( dword port ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6617" column="35" declfile="CAPLPluginApi.h" declline="6617"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aae7bc995eb02e82519be05096ccca908" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232ReceiveInternal</definition>
                <argsstring>(DWORD port, BYTE *pBuffer, DWORD size, R232ReceivedFunc *pReceiveFunc)</argsstring>
                <name>RS232ReceiveInternal</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>BYTE *</type>
                    <declname>pBuffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>size</declname>
                </param>
                <param>
                    <type>R232ReceivedFunc *</type>
                    <declname>pReceiveFunc</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Receive blocks of bytes from a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>An array of bytes </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Maximum number of bytes which can be received </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system the port has not been opened </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232Receive( dword port, byte buffer[], dword size ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6627" column="35" declfile="CAPLPluginApi.h" declline="6627"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1bc7c759d4ec91052c97b2885ba18066" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232Configure</definition>
                <argsstring>(DWORD port, DWORD baudrate, DWORD numberOfDataBits, DWORD numberOfStopBits, DWORD parity)</argsstring>
                <name>RS232Configure</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>baudrate</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>numberOfDataBits</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>numberOfStopBits</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>parity</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Configures a serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>baudrate</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The symbol rate to use for reception and transmission </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>numberOfDataBits</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number of data bits within a transmission frame </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>numberOfStopBits</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A code which sets the number of stop bits within a transmission frame </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parity</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A code which identifies the parity mode to use </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system and the port has not been opened </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232Configure( dword port,  dword baudrate, dword numberOfDataBits, dword numberOfStopBits, dword parity ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6639" column="35" declfile="CAPLPluginApi.h" declline="6639"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a58fbb9610411432876a8b4bd53998bbb" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232SetSignalLine</definition>
                <argsstring>(DWORD port, DWORD line, DWORD state)</argsstring>
                <name>RS232SetSignalLine</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>line</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>state</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets signal lines on serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>line</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Specifies signal line of which the state shall be set </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>state</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>0 - disabled; 1 - enabled </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system and the port has not been opened </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232SetSignalLine( dword port, dword line, dword state ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6649" column="35" declfile="CAPLPluginApi.h" declline="6649"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab0440b249e99ca15910ffe1d604c455c" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232EscapeCommExt</definition>
                <argsstring>(DWORD modemControl, DWORD port)</argsstring>
                <name>RS232EscapeCommExt</name>
                <param>
                    <type>DWORD</type>
                    <declname>modemControl</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets signal line on a specific serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>modemControl</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal lines and levels to bet set on all open ports (opened by CANoe/CANalyzer) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system and the port has not been opened </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232EscapeCommExt( dword modemControl, dword port ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6658" column="35" declfile="CAPLPluginApi.h" declline="6658"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af48ce5ad48b1efe24265d837c944d3c6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232EscapeCommFunc</definition>
                <argsstring>(DWORD modemControl)</argsstring>
                <name>RS232EscapeCommFunc</name>
                <param>
                    <type>DWORD</type>
                    <declname>modemControl</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets signal lines on all open serial ports (opened by CANoe/CANalyzer)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>modemControl</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal lines and levels to bet set on all open ports (opened by CANoe/CANalyzer) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system and the port has not been opened </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232EscapeCommFunc( dword modemControl ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6666" column="35" declfile="CAPLPluginApi.h" declline="6666"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad38e71792b147bb0f375cbca4ded0ef7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::RS232SetHandshakeInternal</definition>
                <argsstring>(DWORD port, DWORD handshake, DWORD XonLimit, DWORD XoffLimit, DWORD XonChar, DWORD XoffChar, DWORD timeout)</argsstring>
                <name>RS232SetHandshakeInternal</name>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>handshake</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>XonLimit</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>XoffLimit</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>XonChar</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>XoffChar</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>timeout</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Sets handshake parameters on serial port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A number between 1 and 255 identifying a serial port </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>handshake</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Sets variant of handshake to use </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>XonLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter for software flow control. Specifies the minimum number of bytes allowed in the input buffer before the XonChar is sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>XoffLimit</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter for software flow control. Specifies the maximum number of bytes in the input buffer before the XoffChar is sent. The maximum number of bytes allowed is calculated by subtracting this value from the size, in bytes, of the input buffer </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>XonChar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter for software flow control. It specifies the value of the XON character to start an operation (transmission as well as reception) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>XoffChar</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameter for software flow control. It specifies the value of the XOFF character to suspend an operation (transmission as well as reception) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Timeout in milliseconds for all send and receive operations: -1 - infinite; &lt;10 - not allowed </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: error The error occurs if the serial port with the given number does not exist on the system and the port has not been opened </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword RS232SetHandshake( dword port, dword handshake, dword XonLimit, dword XoffLimit, dword XonChar, dword XoffChar, dword timeout ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6680" column="35" declfile="CAPLPluginApi.h" declline="6680"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7a552d33548d7c6ef3cf586fb3ea23b2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void capl::NofityEcuStateChange</definition>
                <argsstring>(LPCSTR ecuRef, bool boState)</argsstring>
                <name>NofityEcuStateChange</name>
                <param>
                    <type>LPCSTR</type>
                    <declname>ecuRef</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>boState</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6683" column="34" declfile="CAPLPluginApi.h" declline="6683"
                          declcolumn="34" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa0a9ae854f1a4ed9cab1df0517169abd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::sysExec</definition>
                <argsstring>(const char *cmd, const char *params)</argsstring>
                <name>sysExec</name>
                <param>
                    <type>const char *</type>
                    <declname>cmd</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>params</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Executes an external command. Does not wait until the command has completed its execution. SysExec must be given an executable; sysExecCmd calls cmd.EXE /K with the first parameter, which opens a command window where the command is executed as if it was entered directly
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmd</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The command to be executed. Either the full absolute path or a path relative to the current working directory must be given or the command must be in the system path </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>params</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameters to the command. A parameter which contains spaces must be enclosed in &quot; &quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if the command was successfully started, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysExec(char cmd[], char params[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6692" column="39" declfile="CAPLPluginApi.h" declline="6692"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7208fc63bfba0a38b73a8247ee74688e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::sysExecDir</definition>
                <argsstring>(const char *cmd, const char *params, const char *directory)</argsstring>
                <name>sysExecDir</name>
                <param>
                    <type>const char *</type>
                    <declname>cmd</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>params</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>directory</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Executes an external command. Does not wait until the command has completed its execution. SysExec must be given an executable; sysExecCmd calls cmd.EXE /K with the first parameter, which opens a command window where the command is executed as if it was entered directly
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmd</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The command to be executed. Either the full absolute path or a path relative to the current working directory must be given or the command must be in the system path </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>params</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameters to the command. A parameter which contains spaces must be enclosed in &quot; &quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>directory</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Working directory for the command. Either an absolute path or a path relative to the current working directory must be given </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if the command was successfully started, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysExec(char cmd[], char params[], char directory[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6702" column="39" declfile="CAPLPluginApi.h" declline="6702"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a66271bd7e722932c89d7694e9da3f957" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::sysExecCmd</definition>
                <argsstring>(const char *cmd, const char *params)</argsstring>
                <name>sysExecCmd</name>
                <param>
                    <type>const char *</type>
                    <declname>cmd</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>params</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Executes an external command. Does not wait until the command has completed its execution. SysExec must be given an executable; sysExecCmd calls cmd.EXE /K with the first parameter, which opens a command window where the command is executed as if it was entered directly
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmd</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The command to be executed. Either the full absolute path or a path relative to the current working directory must be given or the command must be in the system path </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>params</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameters to the command. A parameter which contains spaces must be enclosed in &quot; &quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if the command was successfully started, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysExecCmd(char cmd[], char params[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6711" column="39" declfile="CAPLPluginApi.h" declline="6711"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3b7cfcee3aa1b7e5db5c4d9972444f29" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::sysExecCmdDir</definition>
                <argsstring>(const char *cmd, const char *params, const char *directory)</argsstring>
                <name>sysExecCmdDir</name>
                <param>
                    <type>const char *</type>
                    <declname>cmd</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>params</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>directory</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Executes an external command. Does not wait until the command has completed its execution. SysExec must be given an executable; sysExecCmd calls cmd.EXE /K with the first parameter, which opens a command window where the command is executed as if it was entered directly
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>cmd</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The command to be executed. Either the full absolute path or a path relative to the current working directory must be given or the command must be in the system path </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>params</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Parameters to the command. A parameter which contains spaces must be enclosed in &quot; &quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>directory</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Working directory for the command. Either an absolute path or a path relative to the current working directory must be given </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>1 if the command was successfully started, else 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long sysExecCmd(char cmd[], char params[], char directory[]); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6721" column="39" declfile="CAPLPluginApi.h" declline="6721"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad190f69269b2ce9aa9b08f4e7efccef3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::IpGetAddressAsArray</definition>
                <argsstring>(const char address[], BYTE ipv6Address[])</argsstring>
                <name>IpGetAddressAsArray</name>
                <param>
                    <type>const char</type>
                    <declname>address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>ipv6Address</declname>
                    <array>[]</array>
                    <briefdescription>
                        <para>ddd df s sf </para>
                    </briefdescription>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function converts an address string in colon notation to a 16 byte array with the address bytes in network order
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The array used to store the converted IPv6 address as 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0xFFFFFF: The specified address string was invalid </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword IpGetAddressAsArray( char address[], byte ipv6Address[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6732" column="35" declfile="CAPLPluginApi.h" declline="6732"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a37c46f32225474b13c71f01abdd10270" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::IpGetAddressAsNumber</definition>
                <argsstring>(const char address[])</argsstring>
                <name>IpGetAddressAsNumber</name>
                <param>
                    <type>const char</type>
                    <declname>address</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function converts an IPv4 address string in dot notation to it&apos;s numerical value in network-byte order
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>addressn</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>4294967295 (0xFFFFFFF, the equivalent of &quot;255.255.255.255&quot;): The specified address string was invalid </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword IpGetAddressAsNumber( char address[]) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6740" column="35" declfile="CAPLPluginApi.h" declline="6740"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a18efb511f9744eba5771d3ad7763f336" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetAddressAsString</definition>
                <argsstring>(DWORD numericAddress, char address[], DWORD count)</argsstring>
                <name>IpGetAddressAsString</name>
                <param>
                    <type>DWORD</type>
                    <declname>numericAddress</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>count</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function converts a numeric address in host-byte order (little endian) to an address string in dot notation as in &quot;192.168.0.10&quot;. For IPv6 the address string has to contain a string in colon notation as in &quot;1234:5678:9ABC:DEF1:2345:6789:ABCD:EF12&quot;
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>numericAddress</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address to be converted </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer used to store the converted IPv4 address </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>count</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the address buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetAddressAsString( dword numericAddress, char address[], dword count) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6750" column="39" declfile="CAPLPluginApi.h" declline="6750"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a56a774cd34b624ed21236b095415cac4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetAddressAsStringIP6</definition>
                <argsstring>(byte ipv6Address[], char address[], DWORD count)</argsstring>
                <name>IpGetAddressAsStringIP6</name>
                <param>
                    <type>byte</type>
                    <declname>ipv6Address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>char</type>
                    <declname>address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>count</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function converts a numeric address in host-byte order (little endian) to an address string in dot notation as in &quot;192.168.0.10&quot;. For IPv6 the address string has to contain a string in colon notation as in &quot;1234:5678:9ABC:DEF1:2345:6789:ABCD:EF12&quot;
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The local IPv6 address in a 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer used to store the converted IPv4 address </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>count</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the address buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetAddressAsString( byte ipv6Address[], char address[], dword count) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6760" column="39" declfile="CAPLPluginApi.h" declline="6760"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae47d3cbbbecfc94c1218cd6df2b633d2" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetLastError</definition>
                <argsstring>()</argsstring>
                <name>IpGetLastError</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function returns the Winsock 2 error code of the last operation that failed
                        <simplesect kind="return">
                            <para>The error code as provided by the Winsock 2 WSAGetLastError function </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetLastError() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6767" column="39" declfile="CAPLPluginApi.h" declline="6767"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a69bb2fef1340a6572f68df6c42017568" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetLastSocketError</definition>
                <argsstring>(DWORD socket)</argsstring>
                <name>IpGetLastSocketError</name>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function returns the Winsock 2 error code of the last operation that failed on the specified socket
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetLastSocketError( dword socket) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6775" column="39" declfile="CAPLPluginApi.h" declline="6775"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac2ce5d1f41ebd00b9bd7c38cc69e7d2e" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetLastSocketErrorAsString</definition>
                <argsstring>(DWORD socket, char text[], DWORD count)</argsstring>
                <name>IpGetLastSocketErrorAsString</name>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>text</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>count</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function retrieves the error message of the last operation that failed on the specified socket (see Winsock 2 error code)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>text</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer used to store the error message </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>count</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the text buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The error message was written into the text buffer. In case of an invalid error code, the error message has the format &quot;Unknown error: x&quot; assuming the last error code x for the specified socket </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetLastSocketErrorAsString( dword socket,  char text[], dword count) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6786" column="39" declfile="CAPLPluginApi.h" declline="6786"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1e3dd970fcade3e3aadc34f4817d2085" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>DWORD</type>
                <definition>DWORD capl::IpGetAdapterCountInternal</definition>
                <argsstring>(const char sNode[])</argsstring>
                <name>IpGetAdapterCountInternal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function returns the number of network interfaces for the local computer, not including the loopback interface
                        <simplesect kind="return">
                            <para>The number of network interfaces </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword IpGetAdapterCount() </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6793" column="35" declfile="CAPLPluginApi.h" declline="6793"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9cdac49accdae6de2bf4661ef228ec32" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetAdapterAddressCountInternal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, DWORD addressFamily)</argsstring>
                <name>IpGetAdapterAddressCountInternal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>addressFamily</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function returns the count of addresses belonging to the given address family which are assigned to the adapter with the given index
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>addressFamily</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The address family of the addresses, the address count will be returned Possible values are: AF_INET (2): IPv4 address family AF_INET6 (28): IPv6 address family </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The count of addresses of the given address family will be returned </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetAdapterAddressCount( dword ifIndex, dword addressFamily) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6805" column="39" declfile="CAPLPluginApi.h" declline="6805"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a59eef82af54adf14f9cbc561adef50a8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetAdapterAddressIPv4Internal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, DWORD address[], DWORD count)</argsstring>
                <name>IpGetAdapterAddressIPv4Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>count</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function retrieves the addresses associated with a network interface. The interface is specified by it&apos;s 1-based index in the list of network interfaces, i.e. the first interface has index 1
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The array used to store the numerical IPv4 addresses </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>count</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the address array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully. </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>ERROR_NOT_ENOUGH_MEMORY (8): The address array was insufficient </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSAEADDRNOTAVAIL (10049): No adapter address available </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetAdapterAddress( dword ifIndex, dword address[],dword count) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6818" column="39" declfile="CAPLPluginApi.h" declline="6818"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3d7fbba437e23d26563fb58a824039f0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetAdapterAddressIPv6Internal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, byte ipv6Addresses[][16], DWORD count)</argsstring>
                <name>IpGetAdapterAddressIPv6Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>byte</type>
                    <declname>ipv6Addresses</declname>
                    <array>[][16]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>count</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function retrieves the addresses associated with a network interface. The interface is specified by it&apos;s 1-based index in the list of network interfaces, i.e. the first interface has index 1
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Addresses</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The array used to store the IPv6 addresses as 16 byte arrays </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>count</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the address array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>ERROR_NOT_ENOUGH_MEMORY (8): The address array was insufficient </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSAEADDRNOTAVAIL (10049): No adapter address available </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetAdapterAddress( dword ifIndex, byte ipv6Addresses[][], dword count) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6831" column="39" declfile="CAPLPluginApi.h" declline="6831"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac47c062e4c1dff9c04eae3c734cdbece" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpAddAdapterAddressIPv4Internal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, DWORD address, DWORD mask)</argsstring>
                <name>IpAddAdapterAddressIPv4Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>address</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>mask</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function adds an address to the network interface with the given index
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address to add to the interface </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mask</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The IPv4 network mask in network byte order </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpAddAdapterAddress(dword ifIndex, dword address, dword mask) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6843" column="39" declfile="CAPLPluginApi.h" declline="6843"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5ec26ec011db6200e18b54f46f21613b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpAddAdapterAddressIPv6Internal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, byte ipv6Addresses[], DWORD prefix)</argsstring>
                <name>IpAddAdapterAddressIPv6Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>byte</type>
                    <declname>ipv6Addresses</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>prefix</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function adds an address to the network interface with the given index
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The IPv6 address in 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>prefix</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The IPv6 prefix for the given IPv6 address </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpAddAdapterAddress(dword ifIndex, byte ipv6Address[], dword prefix) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6855" column="39" declfile="CAPLPluginApi.h" declline="6855"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3e21d4238f975da72e80a6f38e03c6b4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpRemoveAdapterAddressIPv4Internal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, DWORD address, DWORD mask)</argsstring>
                <name>IpRemoveAdapterAddressIPv4Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>address</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>mask</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function removes an address from the network interface with the given index.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address to remove from the interface </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mask</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The IPv4 network mask in network byte order </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para></para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6867" column="39" declfile="CAPLPluginApi.h" declline="6867"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abc0c5dcf19780e8f295ead1cf35efd92" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpRemoveAdapterAddressIPv6Internal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, byte ipv6Addresses[], DWORD prefix)</argsstring>
                <name>IpRemoveAdapterAddressIPv6Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>byte</type>
                    <declname>ipv6Addresses</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>prefix</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function removes an address from the network interface with the given index
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The IPv6 address to remove from the interface in a 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>prefix</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The IPv6 prefix for the given IPv6 address </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpRemoveAdapterAddress (dword ifIndex, byte ipv6Address[], dword prefix) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6879" column="39" declfile="CAPLPluginApi.h" declline="6879"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3281835b9c61fc735956e10ea39dad03" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpGetAdapterDescriptionInternal</definition>
                <argsstring>(const char sNode[], DWORD ifIndex, char name[], DWORD count)</argsstring>
                <name>IpGetAdapterDescriptionInternal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>name</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>count</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function retrieves the description of the specified network interface
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer used to store the description </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>count</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the name buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>ERROR_NOT_ENOUGH_MEMORY (8): The name buffer was insufficient </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpGetAdapterDescription( dword ifIndex, char name[],  dword count) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6891" column="39" declfile="CAPLPluginApi.h" declline="6891"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a696037fb3fa54faaf353b952f5fdee7b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpSetMulticastInterfaceInternal</definition>
                <argsstring>(const char sNode[], DWORD socket, DWORD ifIndex)</argsstring>
                <name>IpSetMulticastInterfaceInternal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Set the interface for outgoing multicast messages. Without calling this no multicast messages can be sent on the given socket
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpSetMulticastInterface ( dword socket, dword ifIndex ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6902" column="39" declfile="CAPLPluginApi.h" declline="6902"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1adaafd46e79ee14e16474c1f1b2f66aa3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpJoinMulticastGroupIP4Internal</definition>
                <argsstring>(const char sNode[], DWORD socket, DWORD ifIndex, DWORD address)</argsstring>
                <name>IpJoinMulticastGroupIP4Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>address</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Joins the multicast group on the given socket, to be able to receive multicast messages
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address of the destination </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpJoinMulticastGroup( dword socket, dword ifIndex, dword address ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6914" column="39" declfile="CAPLPluginApi.h" declline="6914"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af920629d717f6d493e575228c27c3947" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpJoinMulticastGroupIP6Internal</definition>
                <argsstring>(const char sNode[], DWORD socket, DWORD ifIndex, byte ipv6Address[])</argsstring>
                <name>IpJoinMulticastGroupIP6Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>ifIndex</declname>
                </param>
                <param>
                    <type>byte</type>
                    <declname>ipv6Address</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Joins the multicast group on the given socket,. to be able to receive multicast messages
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ifIndex</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The 1-based network interface index </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The local IPv6 address in a 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified network interface index was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long IpJoinMulticastGroup( dword socket, dword ifIndex, byte ipv6Address[] ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6926" column="39" declfile="CAPLPluginApi.h" declline="6926"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7817ae0ffb89ba33a575b40ea8c54d80" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitPacket</definition>
                <argsstring>()</argsstring>
                <name>EthInitPacket</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function creates a new Ethernet packet. Other functions can access to the newly created packet with the returned handle
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>srcMacAddressStruct</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source MAC address as struct </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dstMacAddressStruct</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination MAC address as struct </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>srcMacAddress</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source MAC address </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dstMacAddress</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination MAC address </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ethernetType</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Ethernet type (16 Bit) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Designator of the protocol, which should be used for initialization </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packetTypeDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Designator of the packet type </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packetToCopy</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet which was created with EthInitPacket before or handle of a packet which has been received within a callback function (&lt;OnEthPacket&gt;) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>rawDataLength</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of rawData in byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>rawData</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Raw data of an Ethernet packet that is used to initialized the new packet </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>handle of the created packet or 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitPacket( ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6943" column="39" declfile="CAPLPluginApi.h" declline="6943"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a43064cc88ae5fae9c69e1f8a68529006" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitPacketProt</definition>
                <argsstring>(const char protocolDesignator[])</argsstring>
                <name>EthInitPacketProt</name>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function creates a new Ethernet packet. Other functions can access to the newly created packet with the returned handle. Protocol fields that are marked as InitProtocol in the protocol description are initialized
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Designator of the protocol, which should be used for initialization </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Handle of the created packet or 0. With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitPacket( char protocolDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6951" column="39" declfile="CAPLPluginApi.h" declline="6951"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a19826a360d10d971f59d389ad083b312" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitPacketPacket</definition>
                <argsstring>(const char protocolDesignator[], const char packetTypeDesignator[])</argsstring>
                <name>EthInitPacketPacket</name>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>packetTypeDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function creates a new Ethernet packet. Other functions can access to the newly created packet with the returned handle. Protocol fields that are marked as InitProtocol in the protocol description are initialized
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Designator of the protocol, which should be used for initialization </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packetTypeDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Designator of the packet type </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Handle of the created packet or 0. With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitPacket( char protocolDesignator[], char packetTypeDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6960" column="39" declfile="CAPLPluginApi.h" declline="6960"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5f3a2558e0276ef0d2814952d50198c3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitPacketArray</definition>
                <argsstring>(BYTE srcMacAddress[6], BYTE dstMacAddress[6], __int32 ethernetType)</argsstring>
                <name>EthInitPacketArray</name>
                <param>
                    <type>BYTE</type>
                    <declname>srcMacAddress</declname>
                    <array>[6]</array>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>dstMacAddress</declname>
                    <array>[6]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>ethernetType</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function creates a new Ethernet packet. Other functions can access to the newly created packet with the returned handle. Protocol fields that are marked as InitProtocol in the protocol description are initialized
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>srcMacAddressStruct</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source MAC address as struct </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dstMacAddressStruct</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination MAC address as struct </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ethernetType</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Ethernet type (16 Bit) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Handle of the created packet or 0. With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitPacket( byte srcMacAddress[6], byte dstMacAddress[6], long ethernetType ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6971" column="39" declfile="CAPLPluginApi.h" declline="6971"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7847e2245c224b29632e1e47767fc240" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitPacketCopy</definition>
                <argsstring>(__int32 packetToCopy)</argsstring>
                <name>EthInitPacketCopy</name>
                <param>
                    <type>__int32</type>
                    <declname>packetToCopy</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function creates a new Ethernet packet. Other functions can access to the newly created packet with the returned handle. Protocol fields that are marked as InitProtocol in the protocol description are initialized
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packetToCopy</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet which was created with EthInitPacket before or handle of a packet which has been received within a callback function (&lt;OnEthPacket&gt;). The header and the data of this packet are copied to the new created packet </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Handle of the created packet or 0 With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitPacket( long packetToCopy ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6979" column="39" declfile="CAPLPluginApi.h" declline="6979"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9c92a5eceacf6a5c11697d4dc0949a75" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitPacketData</definition>
                <argsstring>(__int32 rawDataLength, BYTE rawData[])</argsstring>
                <name>EthInitPacketData</name>
                <param>
                    <type>__int32</type>
                    <declname>rawDataLength</declname>
                </param>
                <param>
                    <type>BYTE</type>
                    <declname>rawData</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function creates a new Ethernet packet. Other functions can access to the newly created packet with the returned handle. Protocol fields that are marked as InitProtocol in the protocol description are initialized
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>rawDataLength</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of rawData in byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>rawData</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Raw data of an Ethernet packet that is used to initialized the new packet </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Handle of the created packet or 0 With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitPacket( long rawDataLength, byte rawData[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6988" column="39" declfile="CAPLPluginApi.h" declline="6988"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ada0f44c091c03d7fc433282574c81649" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitProtocol</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[])</argsstring>
                <name>EthInitProtocol</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function initializes the protocol for a packet. If necessary further needed lower protocols are initialized, e.g. IPv4. Already initialized higher protocols are deleted. Protocol fields that are marked as InitProtocol in the protocol overview are initialized
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, taken from the protocol overview </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitProtocol( long packet, char protocolDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="6997" column="39" declfile="CAPLPluginApi.h" declline="6997"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1acdd44e44752e79f88fdf12f45565afd5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthInitProtocolType</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char packetTypeDesignator[])</argsstring>
                <name>EthInitProtocolType</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>packetTypeDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function initializes the protocol for a packet. If necessary further needed lower protocols are initialized, e.g. IPv4. Already initialized higher protocols are deleted. Protocol fields that are marked as InitProtocol in the protocol overview are initialized
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, taken from the protocol overview </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packetTypeDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Type of the packet, taken from the protocol overview </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthInitProtocol( long packet, char protocolDesignator[], char packetTypeDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7007" column="39" declfile="CAPLPluginApi.h" declline="7007"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abacc147083f984dfa1a798aa25c63940" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetLastError</definition>
                <argsstring>(void)</argsstring>
                <name>EthGetLastError</name>
                <param>
                    <type>void</type>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Returns the error code of the last called Eth... function
                        <simplesect kind="return">
                            <para>Error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthGetLastError( void ) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7014" column="39" declfile="CAPLPluginApi.h" declline="7014"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aaf409ddade59876ffdc914bb98aef5c3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetLastErrorText</definition>
                <argsstring>(DWORD bufferSize, char buffer[])</argsstring>
                <name>EthGetLastErrorText</name>
                <param>
                    <type>DWORD</type>
                    <declname>bufferSize</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Gets the error code description of the last called Eth... function
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferSize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Size of buffer in which the description text is copied </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer in which the description text is copied </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of copied bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthGetLastErrorText( dword bufferSize, char[] buffer ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7023" column="39" declfile="CAPLPluginApi.h" declline="7023"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af549be2603dd96cfb0b5bc3fe5f9972d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthAddToken</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[])</argsstring>
                <name>EthAddToken</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function adds an additional token at the end of a protocol header or at a specific position (for details see protocol help)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;dhcpv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;option1&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthAddToken( long packet, char protocolDesignator[], char tokenDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7033" column="39" declfile="CAPLPluginApi.h" declline="7033"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5ea327bd6fa9d7aa2ec0defdef39b2c9" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthRemoveToken</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[])</argsstring>
                <name>EthRemoveToken</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function removes a token from a protocol header
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;dhcpv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;option1&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthRemoveToken( long packet, char protocolDesignator[], char tokenDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7043" column="39" declfile="CAPLPluginApi.h" declline="7043"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5babcf2d7a92401c7f8c5fc2fafc23d7" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetTokenLengthBit</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[])</argsstring>
                <name>EthGetTokenLengthBit</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function returns the length of a token in bit
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Length of the token in bit With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthGetTokenLengthBit( long packet, char protocolDesignator[], char tokenDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7053" column="39" declfile="CAPLPluginApi.h" declline="7053"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a54afa7997c8ab40d03138aaaf06b03a4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetTokenInt</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[])</argsstring>
                <name>EthGetTokenInt</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function requests the integer value of a token
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>integer value of the token or 0 With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthGetTokenInt( long packet, char protocolDesignator[], char tokenDesignator[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7063" column="39" declfile="CAPLPluginApi.h" declline="7063"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9e1f793da6392a018e0bf76de28d5f6b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetTokenData</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[], __int32 length, void *buffer)</argsstring>
                <name>EthGetTokenData</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>buffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function requests the integer value of a token
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>byteOffset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Offset from the beginning of the token in byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the integer value, must be 1, 2, 3 or 4 byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>networkByteOrder</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>0: INTEL (little-endian) 1: MOTOROLA (big-endian) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>integer value of the token or 0 With EthGetLastError you can check if the function has been processed successfully </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthGetTokenInt( long packet, char protocolDesignatorl[], char tokenDesignator[], long byteOffset, long length, long networkByteOrder ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7077" column="39" declfile="CAPLPluginApi.h" declline="7077"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8a55c68e1e14b2bc65a320e8f5c42616" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenData</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[], __int32 length, const void *data)</argsstring>
                <name>EthSetTokenData</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>const void *</type>
                    <declname>data</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function sets the data or a part of data of a token. It does not resize the token. Use EthResizeToken to change the length
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of bytes to be copied </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Data that are copied to the token </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthSetTokenData( long packet, char protocolDesignator[], char tokenDesignator[], long length, char data[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7089" column="39" declfile="CAPLPluginApi.h" declline="7089"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a359512de6d4018cbcfd5dc5afc38fb65" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenDataOffset</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[], __int32 byteOffset, __int32 length, const void *data)</argsstring>
                <name>EthSetTokenDataOffset</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>byteOffset</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>const void *</type>
                    <declname>data</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function sets the data or a part of data of a token. It does not resize the token. Use EthResizeToken to change the length
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; \pram byteOffset Offset from the beginning of the token in byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of bytes to be copied </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Data that are copied to the token </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthSetTokenData( long packet, char protocolDesignator[], char tokenDesignator[], long byteOffset, long length, char data[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7102" column="39" declfile="CAPLPluginApi.h" declline="7102"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab51cee3b01a71729924314e27f0e3b5d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenInt</definition>
                <argsstring>(__int32 packet, const char protocolDesignatorl[], const char tokenDesignator[], __int32 value)</argsstring>
                <name>EthSetTokenInt</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignatorl</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function sets the integer value of a token
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New integer value </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthSetTokenInt( long packet, char protocolDesignatorl[], char tokenDesignator[], long value ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7113" column="39" declfile="CAPLPluginApi.h" declline="7113"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a227a5c52a8dfa805722e35f46d237af6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenIntOffset</definition>
                <argsstring>(__int32 packet, const char protocolDesignatorl[], const char tokenDesignator[], __int32 byteOffset, __int32 length, __int32 networkByteOrder, __int32 value)</argsstring>
                <name>EthSetTokenIntOffset</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignatorl</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>byteOffset</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>networkByteOrder</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function with byte offset sets a part of the token data as integer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; \pram byteOffset Offset from the beginning of the token in byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>length</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the integer value, must be 1, 2, 3 or 4 byte </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>networkByteOrder</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>0: INTEL (little-endian) 1: MOTOROLA (big-endian) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>value</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New integer value </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthSetTokenInt( long packet, char protocolDesignatorl[], char tokenDesignator[], long byteOffset, long length, long networkByteOrder, long value ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7128" column="39" declfile="CAPLPluginApi.h" declline="7128"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af702d9a1b1225e842e57892c826ca03f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetTokenIntOffset</definition>
                <argsstring>(__int32 packet, const char protocolDesignatorl[], const char tokenDesignator[], __int32 byteOffset, __int32 length, __int32 networkByteOrder)</argsstring>
                <name>EthGetTokenIntOffset</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignatorl</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>byteOffset</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>networkByteOrder</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7130" column="39" declfile="CAPLPluginApi.h" declline="7130"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1dce3e3a66590d96dffecd929faa713b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenInt64Offset</definition>
                <argsstring>(__int32 packet, const char protocolDesignatorl[], const char tokenDesignator[], __int32 byteOffset, __int32 length, __int32 networkByteOrder, __int64 value)</argsstring>
                <name>EthSetTokenInt64Offset</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignatorl</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>byteOffset</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>networkByteOrder</declname>
                </param>
                <param>
                    <type>__int64</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7132" column="39" declfile="CAPLPluginApi.h" declline="7132"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a49e54ed76b897dddadbbf6b0b8e534ea" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenInt64</definition>
                <argsstring>(__int32 packet, const char protocolDesignatorl[], const char tokenDesignator[], __int64 value)</argsstring>
                <name>EthSetTokenInt64</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignatorl</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int64</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7133" column="39" declfile="CAPLPluginApi.h" declline="7133"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae6b2903be3a2d43371de1aea32f7c094" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpSetSocketOption</definition>
                <argsstring>(unsigned __int32 socket, __int32 level, __int32 name, __int32 value)</argsstring>
                <name>IpSetSocketOption</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>level</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>name</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7134" column="39" declfile="CAPLPluginApi.h" declline="7134"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a4ce00069bb5ceef6d6bb8119b92817de" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::IpSetSocketOptionName</definition>
                <argsstring>(unsigned __int32 socket, const char level[], const char name[], __int32 value)</argsstring>
                <name>IpSetSocketOptionName</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>level</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>name</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>value</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7135" column="39" declfile="CAPLPluginApi.h" declline="7135"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a06903f4fef7a95e11aa45f1609a25696" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::EthGetTokenInt64</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[])</argsstring>
                <name>EthGetTokenInt64</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7136" column="39" declfile="CAPLPluginApi.h" declline="7136"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a3d8057deb156ee9b70ebcbe2ffe132a6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int64</type>
                <definition>__int64 capl::EthGetTokenInt64Offset</definition>
                <argsstring>(__int32 packet, const char protocolDesignatorl[], const char tokenDesignator[], __int32 byteOffset, __int32 length, __int32 networkByteOrder)</argsstring>
                <name>EthGetTokenInt64Offset</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignatorl</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>byteOffset</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>length</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>networkByteOrder</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7137" column="39" declfile="CAPLPluginApi.h" declline="7137"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac900a395faa53c96602f37ce55ae1764" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>unsigned __int64</type>
                <definition>unsigned __int64 capl::EthGetThisTimeNS</definition>
                <argsstring>()</argsstring>
                <name>EthGetThisTimeNS</name>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7138" column="48" declfile="CAPLPluginApi.h" declline="7138"
                          declcolumn="48" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae3f512cea21a4335ee1d1f636207559b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthResizeToken</definition>
                <argsstring>(__int32 packet, const char protocolDesignator[], const char tokenDesignator[], __int32 newBitLength)</argsstring>
                <name>EthResizeToken</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>const char</type>
                    <declname>protocolDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const char</type>
                    <declname>tokenDesignator</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>newBitLength</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function can only be used with resizable tokens. These are i.g. the &quot;header&quot; and &quot;data&quot; tokens. If a token is not resizable the error code 46-0125 is returned
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>protocolDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the protocol, e.g. &quot;ipv4&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>tokenDesignator</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of the token, e.g. &quot;source&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>newBitLength</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>New length of the token in bits </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthResizeToken( long packet, char protocolDesignator[], char tokenDesignator[], long newBitLength ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7149" column="39" declfile="CAPLPluginApi.h" declline="7149"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5a9066d24cdecb73c69a8c8a087b388a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenSignalValue</definition>
                <argsstring>(__int32 packet, ISignalVal &amp;signal, double physValue)</argsstring>
                <name>EthSetTokenSignalValue</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> &amp;</type>
                    <declname>signal</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>physValue</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Functions assume that the packet�s payload is described in the database. It writes the signal�s value into the packet�s payload
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>signal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal name from database. The signal must be assigned to the node as Tx signal </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>physValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Physical value </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthSetTokenSignalValue( long packet, dbSignal signal, double physValue ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7159" column="39" declfile="CAPLPluginApi.h" declline="7159"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a02a0b8bb2880c3ac4b6744c974acc3cf" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthSetTokenSignalValueIndex</definition>
                <argsstring>(__int32 packet, ISignalVal &amp;signal, double physValue, DWORD index)</argsstring>
                <name>EthSetTokenSignalValueIndex</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal_val" kindref="compound">ISignalVal</ref> &amp;</type>
                    <declname>signal</declname>
                </param>
                <param>
                    <type>double</type>
                    <declname>physValue</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>index</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Functions assume that the packet�s payload is described in the database. It writes the signal�s value into the packet�s payload. Assumes the passed signal is the first element of an array. The value will be written to the element�s position
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of a packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>signal</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Signal name from database. The signal must be assigned to the node as Tx signal </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>physValue</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Physical value </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>index</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Zero based index of element </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthSetTokenSignalValue( long packet, dbSignal signal, double physValue, dword index); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7170" column="39" declfile="CAPLPluginApi.h" declline="7170"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a459942dc8246ad6323762befc7c4da28" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthCompletePacket</definition>
                <argsstring>(__int32 packet)</argsstring>
                <name>EthCompletePacket</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function completes a packet before sending it with EthOutputPacket. It calculates the fields that are marked with CompleteProtocol in the protocol overview, e.g. checksum, lengths, etc
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of the packet that has been created with EthInitPacket </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthCompletePacket( long packet ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7178" column="39" declfile="CAPLPluginApi.h" declline="7178"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0db2e5145f105b2ac1f9752566b1d181" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthOutputPacketInternal</definition>
                <argsstring>(const char *sChannelRef, __int32 packet)</argsstring>
                <name>EthOutputPacketInternal</name>
                <param>
                    <type>const char *</type>
                    <declname>sChannelRef</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function sends an Ethernet packet
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of the packet to send </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthOutputPacket( long packet ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7186" column="39" declfile="CAPLPluginApi.h" declline="7186"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7379afe6784ed5eba6a1e0f4ec490ad8" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthOutputPacketFcs</definition>
                <argsstring>(__int32 packet, DWORD fcs)</argsstring>
                <name>EthOutputPacketFcs</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>fcs</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        This function sends an Ethernet packet
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of the packet to send </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>fcs</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>user-defined frame check sequence </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthOutputPacket(long packet, dword fcs); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7195" column="39" declfile="CAPLPluginApi.h" declline="7195"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a5e15a63c55d4c82d498de48a4156bc17" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthReleasePacket</definition>
                <argsstring>(__int32 packet)</argsstring>
                <name>EthReleasePacket</name>
                <param>
                    <type>__int32</type>
                    <declname>packet</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function deletes a packet created with EthInitPacket. The handle can not be used any longer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>packet</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Handle of the packet to delete </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthReleasePacket( long packet ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7203" column="39" declfile="CAPLPluginApi.h" declline="7203"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9df447792e82c213b0d60feb28ba444f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>QWORD</type>
                <definition>QWORD capl::EthGetMacAddressAsNumber</definition>
                <argsstring>(const char macAddrStr[])</argsstring>
                <name>EthGetMacAddressAsNumber</name>
                <param>
                    <type>const char</type>
                    <declname>macAddrStr</declname>
                    <array>[]</array>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts a MAC address string, i.e. &quot;02:00:00:00:00:01&quot;, to a qword-number, which can be used with ethernetPacket.source and ethernetPacket.destination.
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>MAC</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>address as string, i.e. &quot;02:00:00:00:00:01&quot; </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The MAC address as qword or 0, if failed </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>qword EthGetMacAddressAsNumber( char macAddrStr[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7211" column="35" declfile="CAPLPluginApi.h" declline="7211"
                          declcolumn="35" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ae9464db9ef2180397c59189fdce828d6" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetMacAddressAsString</definition>
                <argsstring>(QWORD macAddr, char buffer[], DWORD bufferLength)</argsstring>
                <name>EthGetMacAddressAsString</name>
                <param>
                    <type>QWORD</type>
                    <declname>macAddr</declname>
                </param>
                <param>
                    <type>char</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>bufferLength</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Converts a MAC address from qword to string. The function is helpful with ethernetPacket.source and ethernetPacket.destination
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>macAddr</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>MAC address as qword, i.e. from ethernetPacket.source </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer where the MAC address string is copied to </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferLength</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>8: The address buffer was insufficient </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthGetMacAddressAsString( qword macAddr, char buffer[], dword bufferLength ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7222" column="39" declfile="CAPLPluginApi.h" declline="7222"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7ad32b2960b4e875a91df07d4a88894b" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthStartPacketGenerator</definition>
                <argsstring>(IEthernetPacket &amp;txPacket, DWORD transmissionRate)</argsstring>
                <name>EthStartPacketGenerator</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_ethernet_packet" kindref="compound">IEthernetPacket</ref> &amp;</type>
                    <declname>txPacket</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>transmissionRate</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts the Ethernet packet generator that sends continuously the configured packets
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>txPacket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The Ethernet packet which was used to start the generator </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>transmissionRate</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The rate in frames per second the packet should be transmitted. Range: [1 ... 1000000] </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Success </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Output on specified Ethernet channel not allowed </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Packet generator not supported in simulation mode </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-3: Packet generator is only available with Vector Ethernet network hardware </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-4: Configuration of packet generator failed </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-5: Starting of packet generator failed </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthStartPacketGenerator( ethernetPacket txPacket, dword transmissionRate ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7236" column="39" declfile="CAPLPluginApi.h" declline="7236"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a10b0fb5e7f385777cc4ab011d959927a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthStartPacketGeneratorNumberOfFrames</definition>
                <argsstring>(IEthernetPacket &amp;txPacket, DWORD transmissionRate, DWORD numberOfFrames)</argsstring>
                <name>EthStartPacketGeneratorNumberOfFrames</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_ethernet_packet" kindref="compound">IEthernetPacket</ref> &amp;</type>
                    <declname>txPacket</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>transmissionRate</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>numberOfFrames</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts the Ethernet packet generator that sends continuously the configured packets
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>txPacket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The Ethernet packet which was used to start the generator </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>transmissionRate</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The rate in frames per second the packet should be transmitted. Range: [1 ... 1000000] </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>numberOfFrames</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number of Frames that should be transmitted overall. Range: [0x1 ... 0xFFFFFFFE], 0xFFFFFFFF to send until EthStopPacketGenerator </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Success </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Output on specified Ethernet channel not allowed </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Packet generator not supported in simulation mode </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-3: Packet generator is only available with Vector Ethernet network hardware </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-4: Configuration of packet generator failed </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-5: Starting of packet generator failed </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthStartPacketGenerator( ethernetPacket txPacket, dword transmissionRate, dword numberOfFrames ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7251" column="39" declfile="CAPLPluginApi.h" declline="7251"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a94b0bb66bc22a1b09f1607b22f772c39" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthStartPacketGeneratorCounterByteOffset</definition>
                <argsstring>(IEthernetPacket &amp;txPacket, DWORD transmissionRate, DWORD numberOfFrames, DWORD counterByteOffset)</argsstring>
                <name>EthStartPacketGeneratorCounterByteOffset</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_ethernet_packet" kindref="compound">IEthernetPacket</ref> &amp;</type>
                    <declname>txPacket</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>transmissionRate</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>numberOfFrames</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>counterByteOffset</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Starts the Ethernet packet generator that sends continuously the configured packets
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>txPacket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The Ethernet packet which was used to start the generator </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>transmissionRate</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The rate in frames per second the packet should be transmitted. Range: [1 ... 1000000] </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>numberOfFrames</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number of Frames that should be transmitted overall. Range: [0x1 ... 0xFFFFFFFE], 0xFFFFFFFF to send until EthStopPacketGenerator </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>counterByteOffset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The position a 4 byte counter is placed inside the Ethernet-payload on a zero based index. Index 0 is the first byte after the source MAC Address. Take care that the counter has to fit completely into the payload </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Success </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Output on specified Ethernet channel not allowed </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Packet generator not supported in simulation mode </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-3: Packet generator is only available with Vector Ethernet network hardware </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-4: Configuration of packet generator failed </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-5: Starting of packet generator failed </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthStartPacketGenerator( ethernetPacket txPacket, dword transmissionRate, dword numberOfFrames, dword counterByteOffset ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7267" column="39" declfile="CAPLPluginApi.h" declline="7267"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a49fef0c5bc29fa250520c24190145981" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthStopPacketGenerator</definition>
                <argsstring>(IEthernetPacket &amp;txPacket)</argsstring>
                <name>EthStopPacketGenerator</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_ethernet_packet" kindref="compound">IEthernetPacket</ref> &amp;</type>
                    <declname>txPacket</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Stops the Ethernet packet generator, which was started with EthStartPacketGenerator
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>txPacket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The Ethernet packet which was used to start the generator </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: Success </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-1: Output on specified Ethernet channel not allowed </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-2: Packet generator not supported in simulation mode </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-3: Packet generator is only available with Vector Ethernet network hardware </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>-5: Starting of packet generator failed </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthStopPacketGenerator( ethernetPacket txPacket ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7279" column="39" declfile="CAPLPluginApi.h" declline="7279"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac3c049f447aba3cf6bb7151bc231ae31" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>SOCKET</type>
                <definition>SOCKET capl::TcpOpenIP4Internal</definition>
                <argsstring>(const char sNode[], DWORD address, DWORD port)</argsstring>
                <name>TcpOpenIP4Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>address</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function creates a TCP socket for use in connection-based, message-oriented communications. All parameters may be zero. If the port parameter is non-zero the socket is implicitly bound to the given port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical local IPv4 address to be used with the socket If set to 0, then the socket is address unspecific (address wildcard). It then can be used for all adapters on any address. It can be bound later on with IpBind or TcpConnect </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port in host-byte order to be used with the socket. If set to 0, then the socket is port unspecific (port wildcard). It then can be used for all ports on given address. It can be bound later on with IpBind or TcpConnect </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>INVALID_SOCKET (~0): The function failed. Call IpGetLastError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Any other value: A valid socket handle identifying the created socket </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword TcpOpen( dword address, dword port) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7289" column="36" declfile="CAPLPluginApi.h" declline="7289"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8651a96e35106dd9899e92150b598c18" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>SOCKET</type>
                <definition>SOCKET capl::TcpOpenIP6Internal</definition>
                <argsstring>(const char sNode[], const byte ipv6Address[], DWORD port)</argsstring>
                <name>TcpOpenIP6Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const byte</type>
                    <declname>ipv6Address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function creates a TCP socket for use in connection-based, message-oriented communications. All parameters may be zero. If the port parameter is non-zero the socket is implicitly bound to the given port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The local IPv6 address in a 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port in host-byte order to be used with the socket. If set to 0, then the socket is port unspecific (port wildcard). It then can be used for all ports on given address. It can be bound later on with IpBind or TcpConnect </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>INVALID_SOCKET (~0): The function failed. Call IpGetLastError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Any other value: A valid socket handle identifying the created socket </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword TcpOpen( byte ipv6Address[], dword port) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7299" column="36" declfile="CAPLPluginApi.h" declline="7299"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac22ac5d020375434e51efa84b5190811" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TcpConnectIP4</definition>
                <argsstring>(unsigned __int32 socket, unsigned __int32 address, unsigned __int32 port)</argsstring>
                <name>TcpConnectIP4</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>address</declname>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function establishes a connection with the specified location
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address of the destination </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port of the destination in host-byte order </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): Call IpGetLastSocketError to get a more specific error code. If the error code is different from 10035 this indicates a connection error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TcpConnect( dword socket, dword address, dword port) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7310" column="39" declfile="CAPLPluginApi.h" declline="7310"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9602ebff49173e2324b4cb6bbacbe3ac" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TcpConnectIP6</definition>
                <argsstring>(unsigned __int32 socket, unsigned __int8 address[], unsigned __int32 port)</argsstring>
                <name>TcpConnectIP6</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>unsigned __int8</type>
                    <declname>address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int32</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function establishes a connection with the specified location
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The local IPv6 address in a 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port of the destination in host-byte order </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): Call IpGetLastSocketError to get a more specific error code. If the error code is different from 10035 this indicates a connection error </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TcpConnect( dword socket, byte ipv6Address[], dword port) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7321" column="39" declfile="CAPLPluginApi.h" declline="7321"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af856ad74e5cd3b58decbf1fca1c552ae" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TcpClose</definition>
                <argsstring>(unsigned __int32 socket)</argsstring>
                <name>TcpClose</name>
                <param>
                    <type>unsigned __int32</type>
                    <declname>socket</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function closes the TCP socket. Upon successful completion the passed socket is no longer valid
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket to be closed </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TcpClose( dword socket); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7331" column="39" declfile="CAPLPluginApi.h" declline="7331"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa1910f6a33ca58aabb16400bd7018483" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>SOCKET</type>
                <definition>SOCKET capl::TcpAccept</definition>
                <argsstring>(SOCKET socket)</argsstring>
                <name>TcpAccept</name>
                <param>
                    <type>SOCKET</type>
                    <declname>socket</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7332" column="36" declfile="CAPLPluginApi.h" declline="7332"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1aa7aa20a6713bd9792d6b991a55f902a3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>SOCKET</type>
                <definition>SOCKET capl::TcpListen</definition>
                <argsstring>(SOCKET socket)</argsstring>
                <name>TcpListen</name>
                <param>
                    <type>SOCKET</type>
                    <declname>socket</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7333" column="36" declfile="CAPLPluginApi.h" declline="7333"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a8ab9c4f8e5656a7121f350fd63ed3909" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>SOCKET</type>
                <definition>SOCKET capl::UdpOpenIP4Internal</definition>
                <argsstring>(const char sNode[], DWORD address, DWORD port)</argsstring>
                <name>UdpOpenIP4Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>address</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function creates an UDP socket for use in connectionless, datagramm-oriented communications. All parameters may be zero. If the port parameter is non-zero the socket is implicitly bound to the given port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical local IPv4 address to be used with the socket. If set to 0, then the socket is address unspecific (address wildcard). It then can be used for all adapters on any address. It can be bound later on with IpBind or UdpSendTo </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port in host-byte order to be used with the socket. If set to 0, then the socket is port unspecific (port wildcard). It then can be used for all ports on given address. It can be bound later on with IpBind or UdpSendTo </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>INVALID_SOCKET (~0): The function failed. Call IpGetLastError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Any other value: A valid socket handle identifying the created socket </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword UdpOpen( dword address, dword port) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7343" column="36" declfile="CAPLPluginApi.h" declline="7343"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af232fc5af0cc6da60f6a71a1cf2d090a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>SOCKET</type>
                <definition>SOCKET capl::UdpOpenIP6Internal</definition>
                <argsstring>(const char sNode[], const byte ipv6Address[], DWORD port)</argsstring>
                <name>UdpOpenIP6Internal</name>
                <param>
                    <type>const char</type>
                    <declname>sNode</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>const byte</type>
                    <declname>ipv6Address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function creates an UDP socket for use in connectionless, datagramm-oriented communications. All parameters may be zero. If the port parameter is non-zero the socket is implicitly bound to the given port
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The local IPv6 address in a 16 byte array. Like in the IPv4 address an address wildcard can be retrieved using IpGetAddressAsArray(�::�, ipv6AddrArray) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port in host-byte order to be used with the socket. If set to 0, then the socket is port unspecific (port wildcard). It then can be used for all ports on given address. It can be bound later on with IpBind or UdpSendTo </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>INVALID_SOCKET (~0): The function failed. Call IpGetLastError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>Any other value: A valid socket handle identifying the created socket </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>dword UdpOpen( byte ipv6Address[], dword port) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7353" column="36" declfile="CAPLPluginApi.h" declline="7353"
                          declcolumn="36" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ac7d71414dfcc01b118a380c3e965aa8d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::UdpClose</definition>
                <argsstring>(SOCKET socket)</argsstring>
                <name>UdpClose</name>
                <param>
                    <type>SOCKET</type>
                    <declname>socket</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function closes the UDP socket. Upon successful completion the passed socket is no longer valid
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket to be closed </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long UdpClose( dword socket); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7363" column="39" declfile="CAPLPluginApi.h" declline="7363"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9cc048e3a9a1ba362a190530ebd0b677" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthReceivePacketInternal</definition>
                <argsstring>(OnEthernetFunction *pCallback)</argsstring>
                <name>EthReceivePacketInternal</name>
                <param>
                    <type>OnEthernetFunction *</type>
                    <declname>pCallback</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Use this function to register a CAPL callback function to receive Ethernet packets. The callback has a packet handle as parameter and the functions to access the tokens can be used. The EthGetThis-functions can be used to access the payload of the highest interpretable protocol
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>onPacketCallback</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Name of CAPL callback function </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 or error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthReceivePacket( char *onPacketCallback ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7380" column="39" declfile="CAPLPluginApi.h" declline="7380"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af97b0d577ae2566fa1599fc30826d521" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthReceiveRawPacketInternal</definition>
                <argsstring>(OnEthernetFunction *pCallback, __int32 flags, unsigned __int8 srcMacAddress[], unsigned __int8 dstMacAddress[6], __int32 ethernetType)</argsstring>
                <name>EthReceiveRawPacketInternal</name>
                <param>
                    <type>OnEthernetFunction *</type>
                    <declname>pCallback</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>flags</declname>
                </param>
                <param>
                    <type>unsigned __int8</type>
                    <declname>srcMacAddress</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>unsigned __int8</type>
                    <declname>dstMacAddress</declname>
                    <array>[6]</array>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>ethernetType</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Use this function to register a CAPL function to receive Ethernet packets. The callback function is called, if a packet with the specified MAC addresses and Ethernet type is received. Use the flags to ignore the Ethernet type or the MAC address, e.g. flag = 7 receives all packets
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>srcMacAddress</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Source MAC address </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dstMacAddress</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Destination MAC address </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ethernetType</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Ethernet type (16 Bit) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>callback</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>CAPL callback function name </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="note">
                            <para>long EthReceiveRawPacket( long flags, byte srcMacAddress[6], byte dstMacAddress[6], long ethernetType, char *callback ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7390" column="39" declfile="CAPLPluginApi.h" declline="7390"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad155437301e68d111c596cb76aa5290a" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::EthGetThisData</definition>
                <argsstring>(__int32 offset, __int32 bufferSize, void *pBuffer)</argsstring>
                <name>EthGetThisData</name>
                <param>
                    <type>__int32</type>
                    <declname>offset</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>bufferSize</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>pBuffer</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function gets the returned data. It is only usable in a CAPL callback function that had been registered with EthReceiveRawPacket or EthReceivePacket
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>offset</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Byte offset relative to the beginning of a data packet or the payload (see description above) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Buffer in which the requested data are copied </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferSize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of requested bytes </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Number of copied data bytes </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long EthGetThisData( long offset, long bufferSize, byte buffer[] ); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7400" column="39" declfile="CAPLPluginApi.h" declline="7400"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ab3e8aa86f7023fedaf8d8b2040f86f69" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TcpSendInternal</definition>
                <argsstring>(OnSendFunction *pCallback, DWORD socket, const void *buffer, DWORD size)</argsstring>
                <name>TcpSendInternal</name>
                <param>
                    <type>OnSendFunction *</type>
                    <declname>pCallback</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>const void *</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function sends data on the specified socket. If the send operation does not complete immediately the operation is performed asynchronously and the function will return SOCKET_ERROR (-1)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer containing the data to be sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the data to be sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The struct containing the data to be sent </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code. If the specific error code is 997 this just indicates asynchronous sending. All other results are sending errors </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TcpSend( dword socket, char buffer[], dword size); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7413" column="39" declfile="CAPLPluginApi.h" declline="7413"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a88b06806e1a035b98ba95be028355911" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::UdpSendToIP4Internal</definition>
                <argsstring>(OnSendFunction *pCallback, DWORD socket, DWORD address, DWORD port, const void *buffer, DWORD size)</argsstring>
                <name>UdpSendToIP4Internal</name>
                <param>
                    <type>OnSendFunction *</type>
                    <declname>pCallback</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>address</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>const void *</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function sends data to the specified location
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The numerical IPv4 address of the destination in network-byte order </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port of the destination in host-byte order </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer containing the data to be sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the data to be sent </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code. If the specific error code is 997 this just indicates asynchronous sending. All other results are sending errors </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long UdpSendTo( dword socket, dword address, dword port, char buffer[], dword size) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7427" column="39" declfile="CAPLPluginApi.h" declline="7427"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a457381c10cbaa7cc1b518a886a7a1f2d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::UdpSendToIP6Internal</definition>
                <argsstring>(OnSendFunction *pCallback, DWORD socket, const byte ipv6Address[], DWORD port, const void *buffer, DWORD size)</argsstring>
                <name>UdpSendToIP6Internal</name>
                <param>
                    <type>OnSendFunction *</type>
                    <declname>pCallback</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>const byte</type>
                    <declname>ipv6Address</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>port</declname>
                </param>
                <param>
                    <type>const void *</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function sends data to the specified location
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>ipv6Address</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The local IPv6 address in a 16 byte array </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>port</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The port of the destination in host-byte order </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer containing the data to be sent </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the data to be sent </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code. If the specific error code is 997 this just indicates asynchronous sending. All other results are sending errors </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long UdpSendTo( dword socket, byte ipv6Address[], dword port, char buffer[], dword size) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7441" column="39" declfile="CAPLPluginApi.h" declline="7441"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a9c01c9478eead311f507cb57df13f105" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::UdpReceiveFromInternal</definition>
                <argsstring>(OnUdpReceiveFromFunctionIPv4 *pCallbackIPv4, OnUdpReceiveFromFunctionIPv6 *pCallbackIPv6, DWORD socket, void *buffer, DWORD size)</argsstring>
                <name>UdpReceiveFromInternal</name>
                <param>
                    <type>OnUdpReceiveFromFunctionIPv4 *</type>
                    <declname>pCallbackIPv4</declname>
                </param>
                <param>
                    <type>OnUdpReceiveFromFunctionIPv6 *</type>
                    <declname>pCallbackIPv6</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function receives data into the specified buffer. If the receive operation does not complete immediately the operation is performed asynchronously and the function will return SOCKET_ERROR (-1)
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer used to store the incoming data </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the data buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed. Call IpGetLastSocketError to get a more specific error code </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long UdpReceiveFrom( dword socket, char buffer[], dword size); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7453" column="39" declfile="CAPLPluginApi.h" declline="7453"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a0704ba48f0a2d37882d45b8e5e4e06ca" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::TcpReceiveInternal</definition>
                <argsstring>(OnTcpReceiveFunctionIPv4 *pCallbackIPv4, OnTcpReceiveFunctionIPv6 *pCallbackIPv6, DWORD socket, void *buffer, DWORD size)</argsstring>
                <name>TcpReceiveInternal</name>
                <param>
                    <type>OnTcpReceiveFunctionIPv4 *</type>
                    <declname>pCallbackIPv4</declname>
                </param>
                <param>
                    <type>OnTcpReceiveFunctionIPv6 *</type>
                    <declname>pCallbackIPv6</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>socket</declname>
                </param>
                <param>
                    <type>void *</type>
                    <declname>buffer</declname>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>size</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        The function receives data into the specified buffer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>socket</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The socket handle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The buffer used to store the incoming data </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>size</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The size of the data buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0: The function completed successfully </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>WSA_INVALID_PARAMETER (87): The specified socket was invalid </para>
                        </simplesect>
                        <simplesect kind="return">
                            <para>SOCKET_ERROR (-1): The function failed, if IpGetLastSocketError returns an error code different of 997 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long TcpReceive( dword socket, char buffer[], dword size); </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7465" column="39" declfile="CAPLPluginApi.h" declline="7465"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a64261738d249381b6980bd537f9d60fc" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::GetComputerNameInternal</definition>
                <argsstring>(char buffer[], DWORD bufferSize)</argsstring>
                <name>GetComputerNameInternal</name>
                <param>
                    <type>char</type>
                    <declname>buffer</declname>
                    <array>[]</array>
                </param>
                <param>
                    <type>DWORD</type>
                    <declname>bufferSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                    <para>
                        Retrieves the fully qualified name of the computer
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>buffer</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Space for the returned name </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>bufferSize</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Length of the buffer </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 if the function completed successfully, else unequal 0 </para>
                        </simplesect>
                        <simplesect kind="note">
                            <para>long GetComputerName(char buffer[], dword bufferSize) </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7474" column="39" declfile="CAPLPluginApi.h" declline="7474"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1abbb67259ff3d4d35ec75134c443761ce" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="structcapl_1_1_d_b_lookup_sig_ret" kindref="compound">DBLookupSigRet</ref> &amp;</type>
                <definition>DBLookupSigRet &amp; capl::DBLookupSig</definition>
                <argsstring>(capl::ISignal &amp;sig)</argsstring>
                <name>DBLookupSig</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_signal" kindref="compound">capl::ISignal</ref> &amp;</type>
                    <declname>sig</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7496" column="44" declfile="CAPLPluginApi.h" declline="7496"
                          declcolumn="44" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ada4fa2506ec4e66ee6b493b8c320eadd" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type><ref refid="structcapl_1_1_d_b_lookup_msg_ret" kindref="compound">DBLookupMsgRet</ref> &amp;</type>
                <definition>DBLookupMsgRet &amp; capl::DBLookupMsg</definition>
                <argsstring>(capl::IMessage &amp;msg)</argsstring>
                <name>DBLookupMsg</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                    <declname>msg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7509" column="44" declfile="CAPLPluginApi.h" declline="7509"
                          declcolumn="44" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a46b55245e7d1d027830cf8f052290be3" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::setSignalStartValues</definition>
                <argsstring>(capl::IMessage &amp;msg)</argsstring>
                <name>setSignalStartValues</name>
                <param>
                    <type><ref refid="classcapl_1_1_i_message" kindref="compound">capl::IMessage</ref> &amp;</type>
                    <declname>msg</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7511" column="39" declfile="CAPLPluginApi.h" declline="7511"
                          declcolumn="39" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a692774bbee24e75f2a83ac2183057c22" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>unsigned __int8 &amp;</type>
                <definition>unsigned __int8 &amp; capl::Byte</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>Byte</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7514" column="23" bodyfile="CAPLPluginApi.h" bodystart="7514"
                          bodyend="7520" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1ad455fd7afd9e8a62a18bbea7e7539071" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int8 &amp;</type>
                <definition>__int8 &amp; capl::Char</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>Char</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7522" column="14" bodyfile="CAPLPluginApi.h" bodystart="7522"
                          bodyend="7528" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a6ba893d2d22a8f53b275d64a04dcc8d0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>unsigned __int16 &amp;</type>
                <definition>unsigned __int16 &amp; capl::Word</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>Word</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7530" column="24" bodyfile="CAPLPluginApi.h" bodystart="7530"
                          bodyend="7536" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a7242862652a957aa28d2dbbc591153f5" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int16 &amp;</type>
                <definition>__int16 &amp; capl::Short</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>Short</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7538" column="15" bodyfile="CAPLPluginApi.h" bodystart="7538"
                          bodyend="7544" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a89834eaeceb12a02b958807a7dc16d21" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>unsigned __int32 &amp;</type>
                <definition>unsigned __int32 &amp; capl::Dword</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>Dword</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7546" column="26" bodyfile="CAPLPluginApi.h" bodystart="7546"
                          bodyend="7552" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a1748fbc43e4fe4ba25a371085cbb8d2d" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int32 &amp;</type>
                <definition>__int32 &amp; capl::Long</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>Long</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7554" column="15" bodyfile="CAPLPluginApi.h" bodystart="7554"
                          bodyend="7560" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a078abe67ac0d962acfad89b9dd7f2cd4" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>unsigned __int64 &amp;</type>
                <definition>unsigned __int64 &amp; capl::Qword</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>Qword</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7562" column="24" bodyfile="CAPLPluginApi.h" bodystart="7562"
                          bodyend="7568" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1af83b2df0e4ef46653ec0bf8e085562b0" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <templateparamlist>
                    <param>
                        <type>class T</type>
                    </param>
                </templateparamlist>
                <type>__int64 &amp;</type>
                <definition>__int64 &amp; capl::int64</definition>
                <argsstring>(T &amp;arr, size_t pos)</argsstring>
                <name>int64</name>
                <param>
                    <type>T &amp;</type>
                    <declname>arr</declname>
                </param>
                <param>
                    <type>size_t</type>
                    <declname>pos</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7570" column="15" bodyfile="CAPLPluginApi.h" bodystart="7570"
                          bodyend="7576" />
            </memberdef>
            <memberdef kind="function" id="_c_a_p_l_plugin_api_8h_1a2138162d7acc29e751f183cc4848045f" prot="public"
                       static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>__int32</type>
                <definition>__int32 capl::elCountInternal</definition>
                <argsstring>(void *pData, __int32 elemSize)</argsstring>
                <name>elCountInternal</name>
                <param>
                    <type>void *</type>
                    <declname>pData</declname>
                </param>
                <param>
                    <type>__int32</type>
                    <declname>elemSize</declname>
                </param>
                <briefdescription>
                </briefdescription>
                <detaileddescription>
                </detaileddescription>
                <inbodydescription>
                </inbodydescription>
                <location file="CAPLPluginApi.h" line="7578" column="39" declfile="CAPLPluginApi.h" declline="7578"
                          declcolumn="39" />
            </memberdef>
        </sectiondef>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="CAPLPluginApi.h" line="21" column="1" />
    </compounddef>
</doxygen>