//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Capl.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

namespace CaplGrammar.Core
{
   /// <summary>
   ///    This class provides an empty implementation of <see cref="ICaplVisitor{Result}" />,
   ///    which can be extended to create a visitor which only needs to handle a subset
   ///    of the available methods.
   /// </summary>
   /// <typeparam name="Result">The return type of the visit operation.</typeparam>
   [GeneratedCode("ANTLR", "4.9.2")]
   [DebuggerNonUserCode]
   [CLSCompliant(false)]
   public class CaplBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, ICaplVisitor<Result>
   {
      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.primaryExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitPrimaryExpression([NotNull] CaplParser.PrimaryExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.includeBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitIncludeBlock([NotNull] CaplParser.IncludeBlockContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.startBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStartBlock([NotNull] CaplParser.StartBlockContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.variableBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitVariableBlock([NotNull] CaplParser.VariableBlockContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.eventBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitEventBlock([NotNull] CaplParser.EventBlockContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.timerBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitTimerBlock([NotNull] CaplParser.TimerBlockContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.errorFrame" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitErrorFrame([NotNull] CaplParser.ErrorFrameContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.messageBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitMessageBlock([NotNull] CaplParser.MessageBlockContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.multiplexedMessageBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitMultiplexedMessageBlock([NotNull] CaplParser.MultiplexedMessageBlockContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.diagRequestBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDiagRequestBlock([NotNull] CaplParser.DiagRequestBlockContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.diagResponseBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDiagResponseBlock([NotNull] CaplParser.DiagResponseBlockContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.signalBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitSignalBlock([NotNull] CaplParser.SignalBlockContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.sysvarBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitSysvarBlock([NotNull] CaplParser.SysvarBlockContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.stopMeasurement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStopMeasurement([NotNull] CaplParser.StopMeasurementContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.envBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitEnvBlock([NotNull] CaplParser.EnvBlockContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.postfixExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitPostfixExpression([NotNull] CaplParser.PostfixExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.argumentExpressionList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitArgumentExpressionList([NotNull] CaplParser.ArgumentExpressionListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.unaryExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitUnaryExpression([NotNull] CaplParser.UnaryExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.unaryOperator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitUnaryOperator([NotNull] CaplParser.UnaryOperatorContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.castExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitCastExpression([NotNull] CaplParser.CastExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.multiplicativeExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result
         VisitMultiplicativeExpression([NotNull] CaplParser.MultiplicativeExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.additiveExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitAdditiveExpression([NotNull] CaplParser.AdditiveExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.shiftExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitShiftExpression([NotNull] CaplParser.ShiftExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.relationalExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitRelationalExpression([NotNull] CaplParser.RelationalExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.equalityExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitEqualityExpression([NotNull] CaplParser.EqualityExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.andExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitAndExpression([NotNull] CaplParser.AndExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.exclusiveOrExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitExclusiveOrExpression([NotNull] CaplParser.ExclusiveOrExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.inclusiveOrExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitInclusiveOrExpression([NotNull] CaplParser.InclusiveOrExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.logicalAndExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitLogicalAndExpression([NotNull] CaplParser.LogicalAndExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.logicalOrExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitLogicalOrExpression([NotNull] CaplParser.LogicalOrExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.conditionalExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitConditionalExpression([NotNull] CaplParser.ConditionalExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.assignmentExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitAssignmentExpression([NotNull] CaplParser.AssignmentExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.assignmentOperator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitAssignmentOperator([NotNull] CaplParser.AssignmentOperatorContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.expression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitExpression([NotNull] CaplParser.ExpressionContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.constantExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitConstantExpression([NotNull] CaplParser.ConstantExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.declaration" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDeclaration([NotNull] CaplParser.DeclarationContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.declarationSpecifiers" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDeclarationSpecifiers([NotNull] CaplParser.DeclarationSpecifiersContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.declarationSpecifiers2" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDeclarationSpecifiers2([NotNull] CaplParser.DeclarationSpecifiers2Context context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.typeQualifier" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitTypeQualifier([NotNull] CaplParser.TypeQualifierContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.functionSpecifier" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitFunctionSpecifier([NotNull] CaplParser.FunctionSpecifierContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.declarationSpecifier" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDeclarationSpecifier([NotNull] CaplParser.DeclarationSpecifierContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.initDeclaratorList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitInitDeclaratorList([NotNull] CaplParser.InitDeclaratorListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.initDeclarator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitInitDeclarator([NotNull] CaplParser.InitDeclaratorContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.typeSpecifier" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitTypeSpecifier([NotNull] CaplParser.TypeSpecifierContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.structSpecifier" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStructSpecifier([NotNull] CaplParser.StructSpecifierContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.structure" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStructure([NotNull] CaplParser.StructureContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.structDeclarationList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStructDeclarationList([NotNull] CaplParser.StructDeclarationListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.structDeclaration" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStructDeclaration([NotNull] CaplParser.StructDeclarationContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.specifierQualifierList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitSpecifierQualifierList([NotNull] CaplParser.SpecifierQualifierListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.structDeclaratorList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStructDeclaratorList([NotNull] CaplParser.StructDeclaratorListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.structDeclarator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStructDeclarator([NotNull] CaplParser.StructDeclaratorContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.declarator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDeclarator([NotNull] CaplParser.DeclaratorContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.directDeclarator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDirectDeclarator([NotNull] CaplParser.DirectDeclaratorContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.nestedParenthesesBlock" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitNestedParenthesesBlock([NotNull] CaplParser.NestedParenthesesBlockContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.parameterTypeList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitParameterTypeList([NotNull] CaplParser.ParameterTypeListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.parameterList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitParameterList([NotNull] CaplParser.ParameterListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.parameterDeclaration" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitParameterDeclaration([NotNull] CaplParser.ParameterDeclarationContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.identifierList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitIdentifierList([NotNull] CaplParser.IdentifierListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.typeName" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitTypeName([NotNull] CaplParser.TypeNameContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.abstractDeclarator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitAbstractDeclarator([NotNull] CaplParser.AbstractDeclaratorContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.directAbstractDeclarator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result
         VisitDirectAbstractDeclarator([NotNull] CaplParser.DirectAbstractDeclaratorContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.initializer" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitInitializer([NotNull] CaplParser.InitializerContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.initializerList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitInitializerList([NotNull] CaplParser.InitializerListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.designation" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDesignation([NotNull] CaplParser.DesignationContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.designatorList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDesignatorList([NotNull] CaplParser.DesignatorListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.designator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDesignator([NotNull] CaplParser.DesignatorContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.statement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitStatement([NotNull] CaplParser.StatementContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.labeledStatement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitLabeledStatement([NotNull] CaplParser.LabeledStatementContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.compoundStatement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitCompoundStatement([NotNull] CaplParser.CompoundStatementContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.blockItemList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitBlockItemList([NotNull] CaplParser.BlockItemListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.blockItem" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitBlockItem([NotNull] CaplParser.BlockItemContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.expressionStatement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitExpressionStatement([NotNull] CaplParser.ExpressionStatementContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.selectionStatement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitSelectionStatement([NotNull] CaplParser.SelectionStatementContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.iterationStatement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitIterationStatement([NotNull] CaplParser.IterationStatementContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.forCondition" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitForCondition([NotNull] CaplParser.ForConditionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.forDeclaration" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitForDeclaration([NotNull] CaplParser.ForDeclarationContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.forExpression" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitForExpression([NotNull] CaplParser.ForExpressionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.jumpStatement" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitJumpStatement([NotNull] CaplParser.JumpStatementContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.compilationUnit" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitCompilationUnit([NotNull] CaplParser.CompilationUnitContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.translationUnit" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitTranslationUnit([NotNull] CaplParser.TranslationUnitContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.externalDeclaration" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitExternalDeclaration([NotNull] CaplParser.ExternalDeclarationContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.functionDefinition" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitFunctionDefinition([NotNull] CaplParser.FunctionDefinitionContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.declarationList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDeclarationList([NotNull] CaplParser.DeclarationListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.enumSpecifier" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitEnumSpecifier([NotNull] CaplParser.EnumSpecifierContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.enumeratorList" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitEnumeratorList([NotNull] CaplParser.EnumeratorListContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.enumerator" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitEnumerator([NotNull] CaplParser.EnumeratorContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.enumerationConstant" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitEnumerationConstant([NotNull] CaplParser.EnumerationConstantContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.timerType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitTimerType([NotNull] CaplParser.TimerTypeContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.messageType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitMessageType([NotNull] CaplParser.MessageTypeContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.multiplexedMessageType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitMultiplexedMessageType([NotNull] CaplParser.MultiplexedMessageTypeContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.diagRequestType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDiagRequestType([NotNull] CaplParser.DiagRequestTypeContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.diagResponseType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitDiagResponseType([NotNull] CaplParser.DiagResponseTypeContext context) =>
         VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.signalType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitSignalType([NotNull] CaplParser.SignalTypeContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.sysvarType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitSysvarType([NotNull] CaplParser.SysvarTypeContext context) => VisitChildren(context);

      /// <summary>
      ///    Visit a parse tree produced by <see cref="CaplParser.keyEventType" />.
      ///    <para>
      ///       The default implementation returns the result of calling
      ///       <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
      ///       on <paramref name="context" />.
      ///    </para>
      /// </summary>
      /// <param name="context">The parse tree.</param>
      /// <return>The visitor result.</return>
      public virtual Result VisitKeyEventType([NotNull] CaplParser.KeyEventTypeContext context) =>
         VisitChildren(context);
   }
} // namespace CaplGrammar.Core