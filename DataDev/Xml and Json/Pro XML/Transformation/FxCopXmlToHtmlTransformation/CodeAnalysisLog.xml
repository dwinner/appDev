<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>

<FxCopReport Version="11.0">
    <Targets>
        <Target Name="C:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio\bin\Debug\PVS-Studio-vs2012.dll">
            <Modules>
                <Module Name="pvs-studio-vs2012.dll">
                    <Messages>
                        <Message TypeName="MarkAssembliesWithAssemblyVersion" Category="Microsoft.Design"
                                 CheckId="CA1016" Status="Active" Created="2015-04-27 12:58:08Z"
                                 FixCategory="NonBreaking">
                            <Issue Certainty="95" Level="Error">Add an AssemblyVersion attribute to 'PVS-Studio-vs2012.dll'.</Issue>
                        </Message>
                        <Message TypeName="MarkAssembliesWithAssemblyVersion" Category="Microsoft.Design"
                                 CheckId="CA1016" Status="Active" Created="2015-04-27 12:58:08Z"
                                 FixCategory="NonBreaking">
                            <Issue Certainty="95" Level="Error">Add an AssemblyVersion attribute to 'PVS-Studio-vs2012.dll'.</Issue>
                        </Message>
                    </Messages>
                    <Namespaces>
                        <Namespace Name="ProgramVerificationSystems.PVSStudio">
                            <Types>
                                <Type Name="AuthPrompt" Kind="Class" Accessibility="Public" ExternallyVisible="True">
                                    <Members>
                                        <Member
                                            Name="#CredUIPromptForCredentials(ProgramVerificationSystems.PVSStudio.AuthPrompt+CREDUI_INFO&amp;,System.String,System.IntPtr,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Boolean&amp;,ProgramVerificationSystems.PVSStudio.AuthPrompt+CREDUI_FLAGS)"
                                            Kind="Method" Static="True" Accessibility="Private"
                                            ExternallyVisible="False">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'AuthPrompt.CredUIPromptForCredentials(ref AuthPrompt.CREDUI_INFO, string, IntPtr, int, StringBuilder, int, StringBuilder, int, ref bool, AuthPrompt.CREDUI_FLAGS)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments"
                                                         Category="Microsoft.Globalization" CheckId="CA2101"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="NonBreaking">
                                                    <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'targetName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
                                                </Message>
                                                <Message Id="4" TypeName="SpecifyMarshalingForPInvokeStringArguments"
                                                         Category="Microsoft.Globalization" CheckId="CA2101"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="NonBreaking">
                                                    <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'userName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
                                                </Message>
                                                <Message Id="6" TypeName="SpecifyMarshalingForPInvokeStringArguments"
                                                         Category="Microsoft.Globalization" CheckId="CA2101"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="NonBreaking">
                                                    <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'password' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                                <Type Name="AuthPrompt+CREDUI_INFO" Kind="Struct" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Members>
                                        <Member Name="#hbmBanner" Kind="Field" Static="False" Accessibility="Public"
                                                ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="PointersShouldNotBeVisible"
                                                         Category="Microsoft.Security" CheckId="CA2111" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="75" Level="CriticalError">Make 'AuthPrompt.CREDUI_INFO.hbmBanner' private.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member Name="#hwndParent" Kind="Field" Static="False" Accessibility="Public"
                                                ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="PointersShouldNotBeVisible"
                                                         Category="Microsoft.Security" CheckId="CA2111" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="75" Level="CriticalError">Make 'AuthPrompt.CREDUI_INFO.hwndParent' private.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                                <Type Name="Common" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
                                    <Members>
                                        <Member Name="#GetModuleDirectory()" Kind="Method" Static="True"
                                                Accessibility="Public" ExternallyVisible="False">
                                            <Messages>
                                                <Message TypeName="DoNotLockOnObjectsWithWeakIdentity"
                                                         Category="Microsoft.Reliability" CheckId="CA2002"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="NonBreaking">
                                                    <Issue Certainty="75" Level="CriticalError"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Common.cs" Line="547">
                                                        'Common.GetModuleDirectory()' locks on a reference of type 'string'. Replace this with a lock against an object with strong-identity.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member
                                            Name="#RunProcessWithArgs(System.String,System.String,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;)"
                                            Kind="Method" Static="True" Accessibility="Private"
                                            ExternallyVisible="False">
                                            <Messages>
                                                <Message TypeName="DoNotLockOnObjectsWithWeakIdentity"
                                                         Category="Microsoft.Reliability" CheckId="CA2002"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="NonBreaking">
                                                    <Issue Certainty="75" Level="CriticalError"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Common.cs" Line="477">
                                                        'Common.RunProcessWithArgs(string, string, Dictionary&lt;string, string&gt;)' locks on a reference of type 'Process'. Replace this with a lock against an object with strong-identity.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                                <Type Name="DynamicErrorList" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Members>
                                        <Member Name="#PVSStudioLogLoadedSuccessfully" Kind="Event" Static="False"
                                                Accessibility="Public" ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="DeclareEventHandlersCorrectly"
                                                         Category="Microsoft.Design" CheckId="CA1009" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'DynamicErrorList.LogLoadEventHandler' as an object named 'sender'.</Issue>
                                                    <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'DynamicErrorList.LogLoadEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                                <Type Name="InterruptibleWorker" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible"
                                                 Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="DependsOnFix">
                                            <Issue Certainty="90" Level="Error">'InterruptibleWorker' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'BackgroundWorker'</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="InvalidConfigurationException" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="MarkISerializableTypesWithSerializable"
                                                 Category="Microsoft.Usage" CheckId="CA2237" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                            <Issue Certainty="95" Level="Error">Add [Serializable] to 'InvalidConfigurationException' as this type implements ISerializable.</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="ListboxLinkedCellMouseCursorController" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible"
                                                 Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="DependsOnFix">
                                            <Issue Certainty="90" Level="Error">'ListboxLinkedCellMouseCursorController' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'MouseCursor', 'ControllerBase'</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="MismatchVersionException" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage"
                                                 CheckId="CA2240" Status="Active" Created="2015-04-27 12:58:08Z"
                                                 FixCategory="NonBreaking">
                                            <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'MismatchVersionException'.</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="ProcessingEngine" Kind="Class" Accessibility="Assembly"
                                      ExternallyVisible="False">
                                    <Messages>
                                        <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable"
                                                 Category="Microsoft.Design" CheckId="CA1001" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                            <Issue Name="NonBreaking" Certainty="95" Level="CriticalError">Implement IDisposable on 'ProcessingEngine' because it creates members of the following IDisposable types: 'ManualResetEvent', 'ExecutionDlg', 'ProjectsProgress'.</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="ProcessingStarted" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design"
                                                 CheckId="CA1063" Status="Active" Created="2015-04-27 12:58:08Z"
                                                 FixCategory="Breaking">
                                            <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ProcessingStarted' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
                                        </Message>
                                    </Messages>
                                    <Members>
                                        <Member
                                            Name="#CoRegisterMessageFilter(ProgramVerificationSystems.PVSStudio.IMessageFilter,ProgramVerificationSystems.PVSStudio.IMessageFilter&amp;)"
                                            Kind="Method" Static="True" Accessibility="Private"
                                            ExternallyVisible="False">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'ProcessingStarted.CoRegisterMessageFilter(IMessageFilter, out IMessageFilter)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public"
                                                ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="ImplementIDisposableCorrectly"
                                                         Category="Microsoft.Design" CheckId="CA1063" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Name="DisposeImplementation" Certainty="95" Level="Error"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Utilities.cs" Line="951">
                                                        Modify 'ProcessingStarted.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member
                                            Name="#ProgramVerificationSystems.PVSStudio.IMessageFilter.HandleInComingCall(System.Int32,System.IntPtr,System.Int32,System.IntPtr)"
                                            Kind="Method" Static="False" Accessibility="Private"
                                            ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes"
                                                         Category="Microsoft.Design" CheckId="CA1033" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                                    <Issue Certainty="95" Level="Error"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Utilities.cs" Line="1000">
                                                        Make 'ProcessingStarted' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IMessageFilter.HandleInComingCall(int, IntPtr, int, IntPtr)' and is visible to derived classes.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member
                                            Name="#ProgramVerificationSystems.PVSStudio.IMessageFilter.MessagePending(System.IntPtr,System.Int32,System.Int32)"
                                            Kind="Method" Static="False" Accessibility="Private"
                                            ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes"
                                                         Category="Microsoft.Design" CheckId="CA1033" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                                    <Issue Certainty="95" Level="Error"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Utilities.cs" Line="1021">
                                                        Make 'ProcessingStarted' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IMessageFilter.MessagePending(IntPtr, int, int)' and is visible to derived classes.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member
                                            Name="#ProgramVerificationSystems.PVSStudio.IMessageFilter.RetryRejectedCall(System.IntPtr,System.Int32,System.Int32)"
                                            Kind="Method" Static="False" Accessibility="Private"
                                            ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes"
                                                         Category="Microsoft.Design" CheckId="CA1033" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                                    <Issue Certainty="95" Level="Error"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Utilities.cs" Line="1006">
                                                        Make 'ProcessingStarted' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IMessageFilter.RetryRejectedCall(IntPtr, int, int)' and is visible to derived classes.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                                <Type Name="PVSContextMenuRenderer" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible"
                                                 Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="DependsOnFix">
                                            <Issue Certainty="90" Level="Error">'PVSContextMenuRenderer' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'ToolStripProfessionalRenderer', 'ToolStripRenderer'</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="PVSFolderEditor" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible"
                                                 Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="DependsOnFix">
                                            <Issue Certainty="90" Level="Error">'PVSFolderEditor' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'UITypeEditor'</Issue>
                                        </Message>
                                        <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable"
                                                 Category="Microsoft.Design" CheckId="CA1001" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="DependsOnFix">
                                            <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'PVSFolderEditor' because it creates members of the following IDisposable types: 'FolderBrowserDialog'. If 'PVSFolderEditor' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="PVSStudioException" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="MarkISerializableTypesWithSerializable"
                                                 Category="Microsoft.Usage" CheckId="CA2237" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                            <Issue Certainty="95" Level="Error">Add [Serializable] to 'PVSStudioException' as this type implements ISerializable.</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="PVSToolStripRenderer" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible"
                                                 Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="DependsOnFix">
                                            <Issue Certainty="90" Level="Error">'PVSToolStripRenderer' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'ToolStripProfessionalRenderer', 'ToolStripRenderer'</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="SerializableDictionary`2" Kind="Class" Accessibility="Public"
                                      ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ImplementSerializationConstructors"
                                                 Category="Microsoft.Usage" CheckId="CA2229" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                            <Issue Name="CreateMagicConstructor" Certainty="95" Level="Error">Add a constructor to SerializableDictionary with the following signature: 'protected SerializableDictionary(SerializationInfo info, StreamingContext context)'.</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                                <Type Name="TraceGuard" Kind="Class" Accessibility="Public" ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design"
                                                 CheckId="CA1063" Status="Active" Created="2015-04-27 12:58:08Z"
                                                 FixCategory="Breaking">
                                            <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'TraceGuard' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
                                        </Message>
                                    </Messages>
                                    <Members>
                                        <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public"
                                                ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="ImplementIDisposableCorrectly"
                                                         Category="Microsoft.Design" CheckId="CA1063" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Name="DisposeImplementation" Certainty="95" Level="Error"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Utilities.cs" Line="633">
                                                        Modify 'TraceGuard.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member Name="#SetTraceMode(ProgramVerificationSystems.PVSStudio.TraceMode)"
                                                Kind="Method" Static="True" Accessibility="Public"
                                                ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="Do not dispose objects multiple times"
                                                         Category="Microsoft.Usage" CheckId="CA2202" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="DependsOnFix">
                                                    <Issue Certainty="75" Level="Warning"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Utilities.cs" Line="699">
                                                        Object '....Listeners["PVSTextListener"]' can be disposed more than once in method 'TraceGuard.SetTraceMode(TraceMode)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 699
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                                <Type Name="WaitCursor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
                                    <Messages>
                                        <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design"
                                                 CheckId="CA1063" Status="Active" Created="2015-04-27 12:58:08Z"
                                                 FixCategory="Breaking">
                                            <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'WaitCursor' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
                                        </Message>
                                    </Messages>
                                    <Members>
                                        <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public"
                                                ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="ImplementIDisposableCorrectly"
                                                         Category="Microsoft.Design" CheckId="CA1063" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Name="DisposeImplementation" Certainty="95" Level="Error"
                                                           Path="c:\Users\SimpleUser\Documents\SVN\PVS-Studio\PVS-Studio"
                                                           File="Utilities.cs" Line="1038">
                                                        Modify 'WaitCursor.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.
                                                    </Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                                <Type Name="Win32" Kind="Class" Accessibility="Public" ExternallyVisible="True">
                                    <Members>
                                        <Member Name="#GetOEMCP()" Kind="Method" Static="True" Accessibility="Public"
                                                ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetOEMCP()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message TypeName="PInvokesShouldNotBeVisible"
                                                         Category="Microsoft.Interoperability" CheckId="CA1401"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.GetOEMCP()' so that it is no longer visible from outside its assembly.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member
                                            Name="#GetWindowPlacement(System.IntPtr,ProgramVerificationSystems.PVSStudio.Win32+WINDOWPLACEMENT&amp;)"
                                            Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetWindowPlacement(IntPtr, ref Win32.WINDOWPLACEMENT)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message TypeName="PInvokesShouldNotBeVisible"
                                                         Category="Microsoft.Interoperability" CheckId="CA1401"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.GetWindowPlacement(IntPtr, ref Win32.WINDOWPLACEMENT)' so that it is no longer visible from outside its assembly.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member Name="#PathMatchSpec(System.String,System.String)" Kind="Method"
                                                Static="True" Accessibility="Public" ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.PathMatchSpec(string, string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message TypeName="PInvokesShouldNotBeVisible"
                                                         Category="Microsoft.Interoperability" CheckId="CA1401"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.PathMatchSpec(string, string)' so that it is no longer visible from outside its assembly.</Issue>
                                                </Message>
                                                <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments"
                                                         Category="Microsoft.Globalization" CheckId="CA2101"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="NonBreaking">
                                                    <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'pszFile' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
                                                </Message>
                                                <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments"
                                                         Category="Microsoft.Globalization" CheckId="CA2101"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="NonBreaking">
                                                    <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'pszSpec' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member Name="#ReleaseCapture()" Kind="Method" Static="True"
                                                Accessibility="Public" ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.ReleaseCapture()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message TypeName="PInvokesShouldNotBeVisible"
                                                         Category="Microsoft.Interoperability" CheckId="CA1401"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.ReleaseCapture()' so that it is no longer visible from outside its assembly.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member
                                            Name="#SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)"
                                            Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SendMessage(IntPtr, int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message Id="2" TypeName="PInvokeDeclarationsShouldBePortable"
                                                         Category="Microsoft.Portability" CheckId="CA1901"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'wParam' of P/Invoke 'Win32.SendMessage(IntPtr, int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
                                                </Message>
                                                <Message Id="3" TypeName="PInvokeDeclarationsShouldBePortable"
                                                         Category="Microsoft.Portability" CheckId="CA1901"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Name="Parameter" Certainty="95" Level="Error">As it is declared in your code, parameter 'lParam' of P/Invoke 'Win32.SendMessage(IntPtr, int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
                                                </Message>
                                                <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable"
                                                         Category="Microsoft.Portability" CheckId="CA1901"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of P/Invoke 'Win32.SendMessage(IntPtr, int, int, int)' will be 4 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 8 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'int'.</Issue>
                                                </Message>
                                                <Message TypeName="PInvokesShouldNotBeVisible"
                                                         Category="Microsoft.Interoperability" CheckId="CA1401"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.SendMessage(IntPtr, int, int, int)' so that it is no longer visible from outside its assembly.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member Name="#SetForegroundWindow(System.IntPtr)" Kind="Method" Static="True"
                                                Accessibility="Public" ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SetForegroundWindow(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message TypeName="PInvokesShouldNotBeVisible"
                                                         Category="Microsoft.Interoperability" CheckId="CA1401"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.SetForegroundWindow(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                        <Member Name="#ShowWindowAsync(System.IntPtr,System.Int32)" Kind="Method"
                                                Static="True" Accessibility="Public" ExternallyVisible="True">
                                            <Messages>
                                                <Message TypeName="MovePInvokesToNativeMethodsClass"
                                                         Category="Microsoft.Design" CheckId="CA1060" Status="Active"
                                                         Created="2015-04-27 12:58:08Z" FixCategory="Breaking">
                                                    <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.ShowWindowAsync(IntPtr, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
                                                </Message>
                                                <Message TypeName="PInvokesShouldNotBeVisible"
                                                         Category="Microsoft.Interoperability" CheckId="CA1401"
                                                         Status="Active" Created="2015-04-27 12:58:08Z"
                                                         FixCategory="Breaking">
                                                    <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.ShowWindowAsync(IntPtr, int)' so that it is no longer visible from outside its assembly.</Issue>
                                                </Message>
                                            </Messages>
                                        </Member>
                                    </Members>
                                </Type>
                            </Types>
                        </Namespace>
                        <Namespace Name="ProgramVerificationSystems.PVSStudio.LogFilterEditor">
                            <Types>
                                <Type Name="LogFilterEditor" Kind="Class" Accessibility="Assembly"
                                      ExternallyVisible="False">
                                    <Messages>
                                        <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable"
                                                 Category="Microsoft.Design" CheckId="CA1001" Status="Active"
                                                 Created="2015-04-27 12:58:08Z" FixCategory="NonBreaking">
                                            <Issue Name="NonBreaking" Certainty="95" Level="CriticalError">Implement IDisposable on 'LogFilterEditor' because it creates members of the following IDisposable types: 'LogFilterEditorWindow'.</Issue>
                                        </Message>
                                    </Messages>
                                </Type>
                            </Types>
                        </Namespace>
                    </Namespaces>
                </Module>
            </Modules>
        </Target>
    </Targets>
    <Rules>
        <Rule TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability"
              CheckId="CA1405">
            <Name>COM visible type base types should be COM visible</Name>
            <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
            <Resolution Name="Default">{0} is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182202(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="90">Error</MessageLevel>
            <File Name="interoperabilityrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
            <Name>Declare event handlers correctly</Name>
            <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
            <Resolution Name="First">Declare the first parameter of {0} as an object named 'sender'.</Resolution>
            <Resolution Name="Second">Declare the second parameter of {0} as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182133(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">Error</MessageLevel>
            <File Name="designrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
            <Name>Do not dispose objects multiple times</Name>
            <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
            <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 699</Resolution>
            <Owner>RuleOwner</Owner>
            <Url>http://msdn.microsoft.com/library/ms182334(VS.100).aspx</Url>
            <Email />
            <MessageLevel Certainty="75">Warning</MessageLevel>
            <File Name="dataflowrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002">
            <Name>Do not lock on objects with weak identity</Name>
            <Description>Don't take locks on objects that may bleed across AppDomains or that don't have a strong identity.</Description>
            <Resolution Name="Default">{0} locks on a reference of type {1}. Replace this with a lock against an object with strong-identity.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182290(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="75">CriticalError</MessageLevel>
            <File Name="reliabilityrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
            <Name>Implement IDisposable correctly</Name>
            <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
            <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
            <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms244737(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">Error</MessageLevel>
            <File Name="designrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
            <Name>Implement ISerializable correctly</Name>
            <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
            <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182342(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="60">Error</MessageLevel>
            <File Name="usagerules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="ImplementSerializationConstructors" Category="Microsoft.Usage" CheckId="CA2229">
            <Name>Implement serialization constructors</Name>
            <Description>The constructor signature accepts the same arguments as ISerializable.GetObjectData, namely, a SerializationInfo instance and a StreamingContext instance. The constructor should be protected for non-sealed classes and private for sealed classes. Failure to implement a serialization constructor will cause deserialization to fail, and throw a SerializationException.</Description>
            <Resolution Name="CreateMagicConstructor">Add a constructor to {0} with the following signature: 'protected {0}(SerializationInfo info, StreamingContext context)'.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182343(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">Error</MessageLevel>
            <File Name="usagerules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
            <Name>Interface methods should be callable by child types</Name>
            <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
            <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182153(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">Error</MessageLevel>
            <File Name="designrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="MarkAssembliesWithAssemblyVersion" Category="Microsoft.Design" CheckId="CA1016">
            <Name>Mark assemblies with AssemblyVersionAttribute</Name>
            <Description>Assemblies should use version numbers. The version number is considered part of an assembly's identity. Versioning is applied by means of the AssemblyVersion attribute.</Description>
            <Resolution Name="Default">Add an AssemblyVersion attribute to {0}.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182155(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">Error</MessageLevel>
            <File Name="designrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
            <Name>Mark ISerializable types with SerializableAttribute</Name>
            <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
            <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182350(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="75">Warning</MessageLevel>
            <File Name="usagerules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
            <Name>Move P/Invokes to NativeMethods class</Name>
            <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
            <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182161(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
            <File Name="designrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901">
            <Name>P/Invoke declarations should be portable</Name>
            <Description>.</Description>
            <Resolution Name="Parameter">As it is declared in your code, parameter {0} of P/Invoke {1} will be {2} bytes wide on {3} platforms. This is not correct, as the actual native declaration of this API indicates it should be {4} bytes wide on {3} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {5}.</Resolution>
            <Resolution Name="Return">As it is declared in your code, the return type of P/Invoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of {4}.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182284(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">Error</MessageLevel>
            <File Name="portabilityrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
            <Name>P/Invokes should not be visible</Name>
            <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
            <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182209(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="50">CriticalError</MessageLevel>
            <File Name="interoperabilityrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111">
            <Name>Pointers should not be visible</Name>
            <Description>IntPtr and UIntPtr fields should be declared as private. Exposing non-private pointers can cause a security weakness.</Description>
            <Resolution Name="Default">Make {0} private.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182306(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="75">CriticalError</MessageLevel>
            <File Name="securityrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
            <Name>Specify marshaling for P/Invoke string arguments</Name>
            <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
            <Resolution Name="Parameter">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
            <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182319(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="75">Error</MessageLevel>
            <File Name="globalizationrules.dll" Version="11.0.0.0" />
        </Rule>
        <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
            <Name>Types that own disposable fields should be disposable</Name>
            <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
            <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
            <Resolution Name="NonBreaking">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}.</Resolution>
            <Owner />
            <Url>http://msdn.microsoft.com/library/ms182172(VS.100).aspx</Url>
            <Email>[none]</Email>
            <MessageLevel Certainty="95">CriticalError</MessageLevel>
            <File Name="designrules.dll" Version="11.0.0.0" />
        </Rule>
    </Rules>
    <Localized>
        <String Key="Category">Category</String>
        <String Key="Certainty">Certainty</String>
        <String Key="CollapseAll">Collapse All</String>
        <String Key="CheckId">Check Id</String>
        <String Key="Error">Error</String>
        <String Key="Errors">error(s)</String>
        <String Key="ExpandAll">Expand All</String>
        <String Key="Help">Help</String>
        <String Key="Line">Line</String>
        <String Key="Messages">message(s)</String>
        <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
        <String Key="Project">Project</String>
        <String Key="Resolution">Resolution</String>
        <String Key="Rule">Rule</String>
        <String Key="RuleFile">Rule File</String>
        <String Key="RuleDescription">Rule Description</String>
        <String Key="Source">Source</String>
        <String Key="Status">Status</String>
        <String Key="Target">Target</String>
        <String Key="Warning">Warning</String>
        <String Key="Warnings">warning(s)</String>
        <String Key="ReportTitle">Code Analysis Report</String>
    </Localized>
</FxCopReport>